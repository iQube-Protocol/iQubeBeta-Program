"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@dfinity";
exports.ids = ["vendor-chunks/@dfinity"];
exports.modules = {

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/actor.js":
/*!**************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/actor.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTOR_METHOD_WITH_CERTIFICATE: () => (/* binding */ ACTOR_METHOD_WITH_CERTIFICATE),\n/* harmony export */   ACTOR_METHOD_WITH_HTTP_DETAILS: () => (/* binding */ ACTOR_METHOD_WITH_HTTP_DETAILS),\n/* harmony export */   Actor: () => (/* binding */ Actor)\n/* harmony export */ });\n/* harmony import */ var _agent_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./agent/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/api.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/idl.js\");\n/* harmony import */ var _polling_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polling/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/index.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _certificate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./certificate.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _agent_http_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./agent/http/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\n\n\n\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nclass Actor {\n    /**\n     * Get the Agent class this Actor would call, or undefined if the Actor would use\n     * the default agent (global.ic.agent).\n     * @param actor The actor to get the agent of.\n     */\n    static agentOf(actor) {\n        return actor[metadataSymbol].config.agent;\n    }\n    /**\n     * Get the interface of an actor, in the form of an instance of a Service.\n     * @param actor The actor to get the interface of.\n     */\n    static interfaceOf(actor) {\n        return actor[metadataSymbol].service;\n    }\n    static canisterIdOf(actor) {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(actor[metadataSymbol].config.canisterId);\n    }\n    static createActorClass(interfaceFactory, options) {\n        const service = interfaceFactory({ IDL: _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__ });\n        class CanisterActor extends Actor {\n            constructor(config) {\n                if (!config.canisterId) {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MissingCanisterIdErrorCode(config.canisterId));\n                }\n                const canisterId = typeof config.canisterId === 'string'\n                    ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText(config.canisterId)\n                    : config.canisterId;\n                super({\n                    config: {\n                        ...DEFAULT_ACTOR_CONFIG,\n                        ...config,\n                        canisterId,\n                    },\n                    service,\n                });\n                for (const [methodName, func] of service._fields) {\n                    if (options?.httpDetails) {\n                        func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n                    }\n                    if (options?.certificate) {\n                        func.annotations.push(ACTOR_METHOD_WITH_CERTIFICATE);\n                    }\n                    this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n                }\n            }\n        }\n        return CanisterActor;\n    }\n    static createActor(interfaceFactory, configuration) {\n        if (!configuration.canisterId) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MissingCanisterIdErrorCode(configuration.canisterId));\n        }\n        return new (this.createActorClass(interfaceFactory))(configuration);\n    }\n    /**\n     * Returns an actor with methods that return the http response details along with the result\n     * @param interfaceFactory - the interface factory for the actor\n     * @param configuration - the configuration for the actor\n     * @deprecated - use createActor with actorClassOptions instead\n     */\n    static createActorWithHttpDetails(interfaceFactory, configuration) {\n        return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(configuration);\n    }\n    /**\n     * Returns an actor with methods that return the http response details along with the result\n     * @param interfaceFactory - the interface factory for the actor\n     * @param configuration - the configuration for the actor\n     * @param actorClassOptions - options for the actor class extended details to return with the result\n     */\n    static createActorWithExtendedDetails(interfaceFactory, configuration, actorClassOptions = {\n        httpDetails: true,\n        certificate: true,\n    }) {\n        return new (this.createActorClass(interfaceFactory, actorClassOptions))(configuration);\n    }\n    constructor(metadata) {\n        this[metadataSymbol] = Object.freeze(metadata);\n    }\n}\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types, msg) {\n    const returnValues = _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.decode(types, msg);\n    switch (returnValues.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return returnValues[0];\n        default:\n            return returnValues;\n    }\n}\nconst DEFAULT_ACTOR_CONFIG = {\n    pollingOptions: _polling_index_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_POLLING_OPTIONS,\n};\nconst ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\nconst ACTOR_METHOD_WITH_CERTIFICATE = 'certificate';\nfunction _createActorMethod(actor, methodName, func, blsVerify) {\n    let caller;\n    if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n        caller = async (options, ...args) => {\n            // First, if there's a config transformation, call it.\n            options = {\n                ...options,\n                ...actor[metadataSymbol].config.queryTransform?.(methodName, args, {\n                    ...actor[metadataSymbol].config,\n                    ...options,\n                }),\n            };\n            const agent = options.agent || actor[metadataSymbol].config.agent || new _agent_http_index_js__WEBPACK_IMPORTED_MODULE_4__.HttpAgent();\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.encode(func.argTypes, args);\n            const result = await agent.query(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: options.effectiveCanisterId,\n            });\n            const httpDetails = {\n                ...result.httpDetails,\n                requestDetails: result.requestDetails,\n            };\n            switch (result.status) {\n                case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.QueryResponseStatus.Rejected: {\n                    const uncertifiedRejectErrorCode = new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UncertifiedRejectErrorCode(result.requestId, result.reject_code, result.reject_message, result.error_code, result.signatures);\n                    uncertifiedRejectErrorCode.callContext = {\n                        canisterId: cid,\n                        methodName,\n                        httpDetails,\n                    };\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.RejectError.fromCode(uncertifiedRejectErrorCode);\n                }\n                case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.QueryResponseStatus.Replied:\n                    return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n                        ? {\n                            httpDetails,\n                            result: decodeReturnValue(func.retTypes, result.reply.arg),\n                        }\n                        : decodeReturnValue(func.retTypes, result.reply.arg);\n            }\n        };\n    }\n    else {\n        caller = async (options, ...args) => {\n            // First, if there's a config transformation, call it.\n            options = {\n                ...options,\n                ...actor[metadataSymbol].config.callTransform?.(methodName, args, {\n                    ...actor[metadataSymbol].config,\n                    ...options,\n                }),\n            };\n            const agent = options.agent || actor[metadataSymbol].config.agent || _agent_http_index_js__WEBPACK_IMPORTED_MODULE_4__.HttpAgent.createSync();\n            const { canisterId, effectiveCanisterId, pollingOptions } = {\n                ...DEFAULT_ACTOR_CONFIG,\n                ...actor[metadataSymbol].config,\n                ...options,\n            };\n            const cid = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(canisterId);\n            const ecid = effectiveCanisterId !== undefined ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(effectiveCanisterId) : cid;\n            const arg = _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.encode(func.argTypes, args);\n            const { requestId, response, requestDetails } = await agent.call(cid, {\n                methodName,\n                arg,\n                effectiveCanisterId: ecid,\n                nonce: options.nonce,\n            });\n            let reply;\n            let certificate;\n            if ((0,_agent_index_js__WEBPACK_IMPORTED_MODULE_5__.isV3ResponseBody)(response.body)) {\n                if (agent.rootKey == null) {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MissingRootKeyErrorCode());\n                }\n                const cert = response.body.certificate;\n                certificate = await _certificate_js__WEBPACK_IMPORTED_MODULE_6__.Certificate.create({\n                    certificate: cert,\n                    rootKey: agent.rootKey,\n                    canisterId: ecid,\n                    blsVerify,\n                    agent,\n                });\n                const path = [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_7__.utf8ToBytes)('request_status'), requestId];\n                const status = new TextDecoder().decode((0,_certificate_js__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer)(certificate.lookup_path([...path, 'status'])));\n                switch (status) {\n                    case 'replied':\n                        reply = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer)(certificate.lookup_path([...path, 'reply']));\n                        break;\n                    case 'rejected': {\n                        // Find rejection details in the certificate\n                        const rejectCode = new Uint8Array((0,_certificate_js__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer)(certificate.lookup_path([...path, 'reject_code'])))[0];\n                        const rejectMessage = new TextDecoder().decode((0,_certificate_js__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer)(certificate.lookup_path([...path, 'reject_message'])));\n                        const error_code_buf = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_6__.lookupResultToBuffer)(certificate.lookup_path([...path, 'error_code']));\n                        const error_code = error_code_buf\n                            ? new TextDecoder().decode(error_code_buf)\n                            : undefined;\n                        const certifiedRejectErrorCode = new _errors_js__WEBPACK_IMPORTED_MODULE_2__.CertifiedRejectErrorCode(requestId, rejectCode, rejectMessage, error_code);\n                        certifiedRejectErrorCode.callContext = {\n                            canisterId: cid,\n                            methodName,\n                            httpDetails: response,\n                        };\n                        throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.RejectError.fromCode(certifiedRejectErrorCode);\n                    }\n                }\n            }\n            else if ((0,_agent_index_js__WEBPACK_IMPORTED_MODULE_5__.isV2ResponseBody)(response.body)) {\n                const { reject_code, reject_message, error_code } = response.body;\n                const errorCode = new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UncertifiedRejectUpdateErrorCode(requestId, reject_code, reject_message, error_code);\n                errorCode.callContext = {\n                    canisterId: cid,\n                    methodName,\n                    httpDetails: response,\n                };\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.RejectError.fromCode(errorCode);\n            }\n            // Fall back to polling if we receive an Accepted response code\n            if (response.status === 202) {\n                const pollOptions = {\n                    ...pollingOptions,\n                    blsVerify,\n                };\n                // Contains the certificate and the reply from the boundary node\n                const response = await (0,_polling_index_js__WEBPACK_IMPORTED_MODULE_3__.pollForResponse)(agent, ecid, requestId, pollOptions);\n                certificate = response.certificate;\n                reply = response.reply;\n            }\n            const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n            const shouldIncludeCertificate = func.annotations.includes(ACTOR_METHOD_WITH_CERTIFICATE);\n            const httpDetails = { ...response, requestDetails };\n            if (reply !== undefined) {\n                if (shouldIncludeHttpDetails && shouldIncludeCertificate) {\n                    return {\n                        httpDetails,\n                        certificate,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                else if (shouldIncludeCertificate) {\n                    return {\n                        certificate,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                else if (shouldIncludeHttpDetails) {\n                    return {\n                        httpDetails,\n                        result: decodeReturnValue(func.retTypes, reply),\n                    };\n                }\n                return decodeReturnValue(func.retTypes, reply);\n            }\n            else {\n                const errorCode = new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(`Call was returned undefined. We cannot determine if the call was successful or not. Return types: [${func.retTypes.map(t => t.display()).join(',')}].`);\n                errorCode.callContext = {\n                    canisterId: cid,\n                    methodName,\n                    httpDetails,\n                };\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(errorCode);\n            }\n        };\n    }\n    const handler = (...args) => caller({}, ...args);\n    handler.withOptions =\n        (options) => (...args) => caller(options, ...args);\n    return handler;\n}\n//# sourceMappingURL=actor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/actor.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/api.js":
/*!******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/api.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryResponseStatus: () => (/* binding */ QueryResponseStatus),\n/* harmony export */   ReplicaRejectCode: () => (/* binding */ ReplicaRejectCode),\n/* harmony export */   isV2ResponseBody: () => (/* binding */ isV2ResponseBody),\n/* harmony export */   isV3ResponseBody: () => (/* binding */ isV3ResponseBody)\n/* harmony export */ });\n/**\n * Codes used by the replica for rejecting a message.\n * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.\n */\nvar ReplicaRejectCode;\n(function (ReplicaRejectCode) {\n    ReplicaRejectCode[ReplicaRejectCode[\"SysFatal\"] = 1] = \"SysFatal\";\n    ReplicaRejectCode[ReplicaRejectCode[\"SysTransient\"] = 2] = \"SysTransient\";\n    ReplicaRejectCode[ReplicaRejectCode[\"DestinationInvalid\"] = 3] = \"DestinationInvalid\";\n    ReplicaRejectCode[ReplicaRejectCode[\"CanisterReject\"] = 4] = \"CanisterReject\";\n    ReplicaRejectCode[ReplicaRejectCode[\"CanisterError\"] = 5] = \"CanisterError\";\n})(ReplicaRejectCode || (ReplicaRejectCode = {}));\nvar QueryResponseStatus;\n(function (QueryResponseStatus) {\n    QueryResponseStatus[\"Replied\"] = \"replied\";\n    QueryResponseStatus[\"Rejected\"] = \"rejected\";\n})(QueryResponseStatus || (QueryResponseStatus = {}));\n/**\n * Utility function to check if a body is a v2ResponseBody for type safety.\n * @param body The body to check\n * @returns boolean indicating if the body is a v2ResponseBody\n */\nfunction isV2ResponseBody(body) {\n    return body !== null && body !== undefined && 'reject_code' in body;\n}\n/**\n * Utility function to check if a body is a v3ResponseBody for type safety.\n * @param body The body to check\n * @returns boolean indicating if the body is a v3ResponseBody\n */\nfunction isV3ResponseBody(body) {\n    return body !== null && body !== undefined && 'certificate' in body;\n}\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2FnZW50L2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBLFFBQVEscUZBQXFGO0FBQzdGO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUN4QztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtEO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2FnZW50L2FwaS5qcz80ZjU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29kZXMgdXNlZCBieSB0aGUgcmVwbGljYSBmb3IgcmVqZWN0aW5nIGEgbWVzc2FnZS5cbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9zZGsuZGZpbml0eS5vcmcvZG9jcy9pbnRlcmZhY2Utc3BlYy8jcmVqZWN0LWNvZGVzIHwgdGhlIGludGVyZmFjZSBzcGVjfS5cbiAqL1xuZXhwb3J0IHZhciBSZXBsaWNhUmVqZWN0Q29kZTtcbihmdW5jdGlvbiAoUmVwbGljYVJlamVjdENvZGUpIHtcbiAgICBSZXBsaWNhUmVqZWN0Q29kZVtSZXBsaWNhUmVqZWN0Q29kZVtcIlN5c0ZhdGFsXCJdID0gMV0gPSBcIlN5c0ZhdGFsXCI7XG4gICAgUmVwbGljYVJlamVjdENvZGVbUmVwbGljYVJlamVjdENvZGVbXCJTeXNUcmFuc2llbnRcIl0gPSAyXSA9IFwiU3lzVHJhbnNpZW50XCI7XG4gICAgUmVwbGljYVJlamVjdENvZGVbUmVwbGljYVJlamVjdENvZGVbXCJEZXN0aW5hdGlvbkludmFsaWRcIl0gPSAzXSA9IFwiRGVzdGluYXRpb25JbnZhbGlkXCI7XG4gICAgUmVwbGljYVJlamVjdENvZGVbUmVwbGljYVJlamVjdENvZGVbXCJDYW5pc3RlclJlamVjdFwiXSA9IDRdID0gXCJDYW5pc3RlclJlamVjdFwiO1xuICAgIFJlcGxpY2FSZWplY3RDb2RlW1JlcGxpY2FSZWplY3RDb2RlW1wiQ2FuaXN0ZXJFcnJvclwiXSA9IDVdID0gXCJDYW5pc3RlckVycm9yXCI7XG59KShSZXBsaWNhUmVqZWN0Q29kZSB8fCAoUmVwbGljYVJlamVjdENvZGUgPSB7fSkpO1xuZXhwb3J0IHZhciBRdWVyeVJlc3BvbnNlU3RhdHVzO1xuKGZ1bmN0aW9uIChRdWVyeVJlc3BvbnNlU3RhdHVzKSB7XG4gICAgUXVlcnlSZXNwb25zZVN0YXR1c1tcIlJlcGxpZWRcIl0gPSBcInJlcGxpZWRcIjtcbiAgICBRdWVyeVJlc3BvbnNlU3RhdHVzW1wiUmVqZWN0ZWRcIl0gPSBcInJlamVjdGVkXCI7XG59KShRdWVyeVJlc3BvbnNlU3RhdHVzIHx8IChRdWVyeVJlc3BvbnNlU3RhdHVzID0ge30pKTtcbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBjaGVjayBpZiBhIGJvZHkgaXMgYSB2MlJlc3BvbnNlQm9keSBmb3IgdHlwZSBzYWZldHkuXG4gKiBAcGFyYW0gYm9keSBUaGUgYm9keSB0byBjaGVja1xuICogQHJldHVybnMgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBib2R5IGlzIGEgdjJSZXNwb25zZUJvZHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVjJSZXNwb25zZUJvZHkoYm9keSkge1xuICAgIHJldHVybiBib2R5ICE9PSBudWxsICYmIGJvZHkgIT09IHVuZGVmaW5lZCAmJiAncmVqZWN0X2NvZGUnIGluIGJvZHk7XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYSBib2R5IGlzIGEgdjNSZXNwb25zZUJvZHkgZm9yIHR5cGUgc2FmZXR5LlxuICogQHBhcmFtIGJvZHkgVGhlIGJvZHkgdG8gY2hlY2tcbiAqIEByZXR1cm5zIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgYm9keSBpcyBhIHYzUmVzcG9uc2VCb2R5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1YzUmVzcG9uc2VCb2R5KGJvZHkpIHtcbiAgICByZXR1cm4gYm9keSAhPT0gbnVsbCAmJiBib2R5ICE9PSB1bmRlZmluZWQgJiYgJ2NlcnRpZmljYXRlJyBpbiBib2R5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/api.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js":
/*!*************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expiry: () => (/* reexport safe */ _transforms_js__WEBPACK_IMPORTED_MODULE_0__.Expiry),\n/* harmony export */   HttpAgent: () => (/* binding */ HttpAgent),\n/* harmony export */   IC_ROOT_KEY: () => (/* binding */ IC_ROOT_KEY),\n/* harmony export */   JSON_KEY_EXPIRY: () => (/* reexport safe */ _transforms_js__WEBPACK_IMPORTED_MODULE_0__.JSON_KEY_EXPIRY),\n/* harmony export */   MANAGEMENT_CANISTER_ID: () => (/* binding */ MANAGEMENT_CANISTER_ID),\n/* harmony export */   RequestStatusResponseStatus: () => (/* binding */ RequestStatusResponseStatus),\n/* harmony export */   calculateIngressExpiry: () => (/* binding */ calculateIngressExpiry),\n/* harmony export */   httpHeadersTransform: () => (/* reexport safe */ _transforms_js__WEBPACK_IMPORTED_MODULE_0__.httpHeadersTransform),\n/* harmony export */   makeExpiryTransform: () => (/* reexport safe */ _transforms_js__WEBPACK_IMPORTED_MODULE_0__.makeExpiryTransform),\n/* harmony export */   makeNonce: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_1__.makeNonce),\n/* harmony export */   makeNonceTransform: () => (/* reexport safe */ _transforms_js__WEBPACK_IMPORTED_MODULE_0__.makeNonceTransform)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _auth_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../auth.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/auth.js\");\n/* harmony import */ var _cbor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../cbor.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _request_id_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../request_id.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../api.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/api.js\");\n/* harmony import */ var _transforms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transforms.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _canisterStatus_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../canisterStatus/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\");\n/* harmony import */ var _certificate_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../certificate.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _utils_expirableMap_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/expirableMap.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js\");\n/* harmony import */ var _public_key_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../public_key.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/public_key.js\");\n/* harmony import */ var _observable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../observable.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/observable.js\");\n/* harmony import */ var _polling_backoff_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../polling/backoff.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/backoff.js\");\n/* harmony import */ var _utils_leb_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utils/leb.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _utils_buffer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utils/buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../constants.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RequestStatusResponseStatus;\n(function (RequestStatusResponseStatus) {\n    RequestStatusResponseStatus[\"Received\"] = \"received\";\n    RequestStatusResponseStatus[\"Processing\"] = \"processing\";\n    RequestStatusResponseStatus[\"Replied\"] = \"replied\";\n    RequestStatusResponseStatus[\"Rejected\"] = \"rejected\";\n    RequestStatusResponseStatus[\"Unknown\"] = \"unknown\";\n    RequestStatusResponseStatus[\"Done\"] = \"done\";\n})(RequestStatusResponseStatus || (RequestStatusResponseStatus = {}));\nconst MINUTE_TO_MSECS = 60 * 1_000;\nconst MSECS_TO_NANOSECONDS = 1_000_000;\nconst DEFAULT_TIME_DIFF_MSECS = 0;\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY = '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n    'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n    '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n    'b01291091c5f87b98883463f98091a0baaae';\nconst MANAGEMENT_CANISTER_ID = 'aaaaa-aa';\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\nconst HTTP_STATUS_OK = 200;\nconst HTTP_STATUS_ACCEPTED = 202;\nconst HTTP_STATUS_NOT_FOUND = 404;\nfunction getDefaultFetch() {\n    let defaultFetch;\n    if (typeof window !== 'undefined') {\n        // Browser context\n        if (window.fetch) {\n            defaultFetch = window.fetch.bind(window);\n        }\n        else {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpDefaultFetchErrorCode('Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.'));\n        }\n    }\n    else if (typeof global !== 'undefined') {\n        // Node context\n        if (global.fetch) {\n            defaultFetch = global.fetch.bind(global);\n        }\n        else {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpDefaultFetchErrorCode('Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.'));\n        }\n    }\n    else if (typeof self !== 'undefined') {\n        if (self.fetch) {\n            defaultFetch = self.fetch.bind(self);\n        }\n    }\n    if (defaultFetch) {\n        return defaultFetch;\n    }\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpDefaultFetchErrorCode('Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.'));\n}\nfunction determineHost(configuredHost) {\n    let host;\n    if (configuredHost !== undefined) {\n        if (!configuredHost.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n            host = new URL(window.location.protocol + '//' + configuredHost);\n        }\n        else {\n            host = new URL(configuredHost);\n        }\n    }\n    else {\n        // Mainnet, local, and remote environments will have the api route available\n        const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n        const remoteHosts = ['.github.dev', '.gitpod.io'];\n        const location = typeof window !== 'undefined' ? window.location : undefined;\n        const hostname = location?.hostname;\n        let knownHost;\n        if (hostname && typeof hostname === 'string') {\n            if (remoteHosts.some(host => hostname.endsWith(host))) {\n                knownHost = hostname;\n            }\n            else {\n                knownHost = knownHosts.find(host => hostname.endsWith(host));\n            }\n        }\n        if (location && knownHost) {\n            // If the user is on a boundary-node provided host, we can use the same host for the agent\n            host = new URL(`${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`);\n        }\n        else {\n            host = new URL('https://icp-api.io');\n        }\n    }\n    return host.toString();\n}\n/**\n * A HTTP agent allows users to interact with a client of the internet computer\nusing the available methods. It exposes an API that closely follows the\npublic view of the internet computer, and is not intended to be exposed\ndirectly to the majority of users due to its low-level interface.\n * There is a pipeline to apply transformations to the request before sending\nit to the client. This is to decouple signature, nonce generation and\nother computations so that this class can stay as simple as possible while\nallowing extensions.\n */\nclass HttpAgent {\n    #rootKeyPromise;\n    #shouldFetchRootKey;\n    #timeDiffMsecs;\n    #hasSyncedTime;\n    #syncTimePromise;\n    #shouldSyncTime;\n    #identity;\n    #fetch;\n    #fetchOptions;\n    #callOptions;\n    #credentials;\n    #retryTimes; // Retry requests N times before erroring by default\n    #backoffStrategy;\n    #maxIngressExpiryInMinutes;\n    get #maxIngressExpiryInMs() {\n        return this.#maxIngressExpiryInMinutes * MINUTE_TO_MSECS;\n    }\n    #queryPipeline;\n    #updatePipeline;\n    #subnetKeys;\n    #verifyQuerySignatures;\n    /**\n     * @param options - Options for the HttpAgent\n     * @deprecated Use `HttpAgent.create` or `HttpAgent.createSync` instead\n     */\n    constructor(options = {}) {\n        this.#rootKeyPromise = null;\n        this.#shouldFetchRootKey = false;\n        this.#timeDiffMsecs = DEFAULT_TIME_DIFF_MSECS;\n        this.#hasSyncedTime = false;\n        this.#syncTimePromise = null;\n        this.#shouldSyncTime = false;\n        // Public signature to help with type checking.\n        this._isAgent = true;\n        this.config = {};\n        this.log = new _observable_js__WEBPACK_IMPORTED_MODULE_3__.ObservableLog();\n        this.#queryPipeline = [];\n        this.#updatePipeline = [];\n        this.#subnetKeys = new _utils_expirableMap_js__WEBPACK_IMPORTED_MODULE_4__.ExpirableMap({\n            expirationTime: 5 * MINUTE_TO_MSECS,\n        });\n        this.#verifyQuerySignatures = true;\n        /**\n         * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n         * @param queryResponse - The response from the query\n         * @param subnetStatus - The subnet status, including all node keys\n         * @returns ApiQueryResponse\n         */\n        this.#verifyQueryResponse = (queryResponse, subnetStatus) => {\n            if (this.#verifyQuerySignatures === false) {\n                // This should not be called if the user has disabled verification\n                return queryResponse;\n            }\n            const { status, signatures = [], requestId } = queryResponse;\n            for (const sig of signatures) {\n                const { timestamp, identity } = sig;\n                const nodeId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromUint8Array(identity).toText();\n                // Hash is constructed differently depending on the status\n                let hash;\n                if (status === _api_js__WEBPACK_IMPORTED_MODULE_6__.QueryResponseStatus.Replied) {\n                    const { reply } = queryResponse;\n                    hash = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_7__.hashOfMap)({\n                        status: status,\n                        reply: reply,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else if (status === _api_js__WEBPACK_IMPORTED_MODULE_6__.QueryResponseStatus.Rejected) {\n                    const { reject_code, reject_message, error_code } = queryResponse;\n                    hash = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_7__.hashOfMap)({\n                        status: status,\n                        reject_code: reject_code,\n                        reject_message: reject_message,\n                        error_code: error_code,\n                        timestamp: BigInt(timestamp),\n                        request_id: requestId,\n                    });\n                }\n                else {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(`Unknown status: ${status}`));\n                }\n                const separatorWithHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.concatBytes)(_constants_js__WEBPACK_IMPORTED_MODULE_9__.IC_RESPONSE_DOMAIN_SEPARATOR, hash);\n                // FIX: check for match without verifying N times\n                const pubKey = subnetStatus.nodeKeys.get(nodeId);\n                if (!pubKey) {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MalformedPublicKeyErrorCode());\n                }\n                const rawKey = _public_key_js__WEBPACK_IMPORTED_MODULE_10__.Ed25519PublicKey.fromDer(pubKey).rawKey;\n                const valid = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_11__.ed25519.verify(sig.signature, separatorWithHash, rawKey);\n                if (valid)\n                    return queryResponse;\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.QuerySignatureVerificationFailedErrorCode(nodeId));\n            }\n            return queryResponse;\n        };\n        this.config = options;\n        this.#fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n        this.#fetchOptions = options.fetchOptions;\n        this.#callOptions = options.callOptions;\n        this.#shouldFetchRootKey = options.shouldFetchRootKey ?? false;\n        this.#shouldSyncTime = options.shouldSyncTime ?? false;\n        // Use provided root key, otherwise fall back to IC_ROOT_KEY for mainnet or null if the key needs to be fetched\n        if (options.rootKey) {\n            this.rootKey = options.rootKey;\n        }\n        else if (this.#shouldFetchRootKey) {\n            this.rootKey = null;\n        }\n        else {\n            this.rootKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(IC_ROOT_KEY);\n        }\n        const host = determineHost(options.host);\n        this.host = new URL(host);\n        if (options.verifyQuerySignatures !== undefined) {\n            this.#verifyQuerySignatures = options.verifyQuerySignatures;\n        }\n        // Default is 3\n        this.#retryTimes = options.retryTimes ?? 3;\n        // Delay strategy for retries. Default is exponential backoff\n        const defaultBackoffFactory = () => new _polling_backoff_js__WEBPACK_IMPORTED_MODULE_12__.ExponentialBackoff({\n            maxIterations: this.#retryTimes,\n        });\n        this.#backoffStrategy = options.backoffStrategy || defaultBackoffFactory;\n        // Rewrite to avoid redirects\n        if (this.host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n            this.host.hostname = IC0_DOMAIN;\n        }\n        else if (this.host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n            this.host.hostname = ICP0_DOMAIN;\n        }\n        else if (this.host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n            this.host.hostname = ICP_API_DOMAIN;\n        }\n        if (options.credentials) {\n            const { name, password } = options.credentials;\n            this.#credentials = `${name}${password ? ':' + password : ''}`;\n        }\n        this.#identity = Promise.resolve(options.identity || new _auth_js__WEBPACK_IMPORTED_MODULE_13__.AnonymousIdentity());\n        if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes > 5) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IngressExpiryInvalidErrorCode('The maximum ingress expiry time is 5 minutes.', options.ingressExpiryInMinutes));\n        }\n        if (options.ingressExpiryInMinutes && options.ingressExpiryInMinutes <= 0) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IngressExpiryInvalidErrorCode('Ingress expiry time must be greater than 0.', options.ingressExpiryInMinutes));\n        }\n        this.#maxIngressExpiryInMinutes = options.ingressExpiryInMinutes || 5;\n        // Add a nonce transform to ensure calls are unique\n        this.addTransform('update', (0,_transforms_js__WEBPACK_IMPORTED_MODULE_0__.makeNonceTransform)(_types_js__WEBPACK_IMPORTED_MODULE_1__.makeNonce));\n        if (options.useQueryNonces) {\n            this.addTransform('query', (0,_transforms_js__WEBPACK_IMPORTED_MODULE_0__.makeNonceTransform)(_types_js__WEBPACK_IMPORTED_MODULE_1__.makeNonce));\n        }\n        if (options.logToConsole) {\n            this.log.subscribe(log => {\n                if (log.level === 'error') {\n                    console.error(log.message);\n                }\n                else if (log.level === 'warn') {\n                    console.warn(log.message);\n                }\n                else {\n                    console.log(log.message);\n                }\n            });\n        }\n    }\n    static createSync(options = {}) {\n        return new this({ ...options });\n    }\n    static async create(options = {}) {\n        const agent = HttpAgent.createSync(options);\n        await agent.#asyncGuard();\n        return agent;\n    }\n    static async from(agent) {\n        try {\n            if ('config' in agent) {\n                return await HttpAgent.create(agent.config);\n            }\n            return await HttpAgent.create({\n                fetch: agent._fetch,\n                fetchOptions: agent._fetchOptions,\n                callOptions: agent._callOptions,\n                host: agent._host.toString(),\n                identity: agent._identity ?? undefined,\n            });\n        }\n        catch {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.CreateHttpAgentErrorCode());\n        }\n    }\n    isLocal() {\n        const hostname = this.host.hostname;\n        return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n    }\n    addTransform(type, fn, priority = fn.priority || 0) {\n        if (type === 'update') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = this.#updatePipeline.findIndex(x => (x.priority || 0) < priority);\n            this.#updatePipeline.splice(i >= 0 ? i : this.#updatePipeline.length, 0, Object.assign(fn, { priority }));\n        }\n        else if (type === 'query') {\n            // Keep the pipeline sorted at all time, by priority.\n            const i = this.#queryPipeline.findIndex(x => (x.priority || 0) < priority);\n            this.#queryPipeline.splice(i >= 0 ? i : this.#queryPipeline.length, 0, Object.assign(fn, { priority }));\n        }\n    }\n    async getPrincipal() {\n        if (!this.#identity) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IdentityInvalidErrorCode());\n        }\n        return (await this.#identity).getPrincipal();\n    }\n    /**\n     * Makes a call to a canister method.\n     * @param canisterId - The ID of the canister to call. Can be a Principal or a string.\n     * @param options - Options for the call.\n     * @param options.methodName - The name of the method to call.\n     * @param options.arg - The argument to pass to the method, as a Uint8Array.\n     * @param options.effectiveCanisterId - (Optional) The effective canister ID, if different from the target canister ID.\n     * @param options.callSync - (Optional) Whether to use synchronous call mode. Defaults to true.\n     * @param options.nonce - (Optional) A unique nonce for the request. If provided, it will override any nonce set by transforms.\n     * @param identity - (Optional) The identity to use for the call. If not provided, the agent's current identity will be used.\n     * @returns A promise that resolves to the response of the call, including the request ID and response details.\n     */\n    async call(canisterId, options, identity) {\n        const callSync = options.callSync ?? true;\n        const id = await (identity ?? this.#identity);\n        if (!id) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IdentityInvalidErrorCode());\n        }\n        const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n        const ecid = options.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(options.effectiveCanisterId)\n            : canister;\n        await this.#asyncGuard(ecid);\n        const sender = id.getPrincipal();\n        const ingress_expiry = calculateIngressExpiry(this.#maxIngressExpiryInMinutes, this.#timeDiffMsecs);\n        const submit = {\n            request_type: _types_js__WEBPACK_IMPORTED_MODULE_1__.SubmitRequestType.Call,\n            canister_id: canister,\n            method_name: options.methodName,\n            arg: options.arg,\n            sender,\n            ingress_expiry,\n        };\n        let transformedRequest = (await this._transform({\n            request: {\n                body: null,\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/cbor',\n                    ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n                },\n            },\n            endpoint: _types_js__WEBPACK_IMPORTED_MODULE_1__.Endpoint.Call,\n            body: submit,\n        }));\n        // Determine the nonce to use for the request\n        let nonce;\n        // Check if a nonce is provided in the options and convert it to the correct type\n        if (options?.nonce) {\n            nonce = toNonce(options.nonce);\n        }\n        // If no nonce is provided in the options, check the transformedRequest body\n        else if (transformedRequest.body.nonce) {\n            nonce = toNonce(transformedRequest.body.nonce);\n        }\n        // If no nonce is found, set it to undefined\n        else {\n            nonce = undefined;\n        }\n        // Assign the determined nonce to the submit object\n        submit.nonce = nonce;\n        /**\n         * Converts a Uint8Array to a Nonce type.\n         * @param buf - The buffer to convert.\n         * @returns The buffer as a Nonce.\n         */\n        function toNonce(buf) {\n            return Object.assign(buf, { __nonce__: undefined });\n        }\n        // Apply transform for identity.\n        transformedRequest = (await id.transformRequest(transformedRequest));\n        const body = _cbor_js__WEBPACK_IMPORTED_MODULE_14__.encode(transformedRequest.body);\n        const backoff = this.#backoffStrategy();\n        const requestId = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_7__.requestIdOf)(submit);\n        try {\n            // Attempt v3 sync call\n            const requestSync = () => {\n                this.log.print(`fetching \"/api/v3/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n                return this.#fetch('' + new URL(`/api/v3/canister/${ecid.toText()}/call`, this.host), {\n                    ...this.#callOptions,\n                    ...transformedRequest.request,\n                    body,\n                });\n            };\n            const requestAsync = () => {\n                this.log.print(`fetching \"/api/v2/canister/${ecid.toText()}/call\" with request:`, transformedRequest);\n                return this.#fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this.host), {\n                    ...this.#callOptions,\n                    ...transformedRequest.request,\n                    body,\n                });\n            };\n            const requestFn = callSync ? requestSync : requestAsync;\n            const { responseBodyBytes, ...response } = await this.#requestAndRetry({\n                requestFn,\n                backoff,\n                tries: 0,\n            });\n            const responseBody = (responseBodyBytes.byteLength > 0 ? _cbor_js__WEBPACK_IMPORTED_MODULE_14__.decode(responseBodyBytes) : null);\n            return {\n                requestId,\n                response: {\n                    ...response,\n                    body: responseBody,\n                },\n                requestDetails: submit,\n            };\n        }\n        catch (error) {\n            let callError;\n            if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.AgentError) {\n                // If the error is due to the v3 api not being supported, fall back to v2\n                if (error.hasCode(_errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpV3ApiNotSupportedErrorCode)) {\n                    this.log.warn('v3 api not supported. Fall back to v2');\n                    return this.call(canisterId, {\n                        ...options,\n                        // disable v3 api\n                        callSync: false,\n                    }, identity);\n                }\n                else if (error.hasCode(_errors_js__WEBPACK_IMPORTED_MODULE_2__.IngressExpiryInvalidErrorCode) && !this.#hasSyncedTime) {\n                    // if there is an ingress expiry error and the time has not been synced yet,\n                    // sync time with the network and try again\n                    await this.syncTime(canister);\n                    return this.call(canister, options, identity);\n                }\n                else {\n                    // override the error code to include the request details\n                    error.code.requestContext = {\n                        requestId,\n                        senderPubKey: transformedRequest.body.sender_pubkey,\n                        senderSignature: transformedRequest.body.sender_sig,\n                        ingressExpiry: transformedRequest.body.content.ingress_expiry,\n                    };\n                    callError = error;\n                }\n            }\n            else {\n                callError = _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(error));\n            }\n            this.log.error(`Error while making call: ${callError.message}`, callError);\n            throw callError;\n        }\n    }\n    async #requestAndRetryQuery(args) {\n        const { ecid, transformedRequest, body, requestId, backoff, tries } = args;\n        const delay = tries === 0 ? 0 : backoff.next();\n        this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with tries:`, {\n            tries,\n            backoff,\n            delay,\n        });\n        // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n        if (delay === null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.TimeoutWaitingForResponseErrorCode(`Backoff strategy exhausted after ${tries} attempts.`, requestId));\n        }\n        if (delay > 0) {\n            await new Promise(resolve => setTimeout(resolve, delay));\n        }\n        let response;\n        // Make the request and retry if it throws an error\n        try {\n            this.log.print(`fetching \"/api/v2/canister/${ecid.toString()}/query\" with request:`, transformedRequest);\n            const fetchResponse = await this.#fetch('' + new URL(`/api/v2/canister/${ecid.toString()}/query`, this.host), {\n                ...this.#fetchOptions,\n                ...transformedRequest.request,\n                body,\n            });\n            if (fetchResponse.status === HTTP_STATUS_OK) {\n                const queryResponse = _cbor_js__WEBPACK_IMPORTED_MODULE_14__.decode((0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_15__.uint8FromBufLike)(await fetchResponse.arrayBuffer()));\n                response = {\n                    ...queryResponse,\n                    httpDetails: {\n                        ok: fetchResponse.ok,\n                        status: fetchResponse.status,\n                        statusText: fetchResponse.statusText,\n                        headers: (0,_transforms_js__WEBPACK_IMPORTED_MODULE_0__.httpHeadersTransform)(fetchResponse.headers),\n                    },\n                    requestId,\n                };\n            }\n            else {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpErrorCode(fetchResponse.status, fetchResponse.statusText, (0,_transforms_js__WEBPACK_IMPORTED_MODULE_0__.httpHeadersTransform)(fetchResponse.headers), await fetchResponse.text()));\n            }\n        }\n        catch (error) {\n            if (tries < this.#retryTimes) {\n                this.log.warn(`Caught exception while attempting to make query:\\n` +\n                    `  ${error}\\n` +\n                    `  Retrying query.`);\n                return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n            }\n            if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.AgentError) {\n                // if it's an error that we have thrown, just throw it as is\n                throw error;\n            }\n            // if it's an error that we have not thrown, wrap it in a TransportError\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.TransportError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpFetchErrorCode(error));\n        }\n        // Skip timestamp verification if the user has set verifyQuerySignatures to false\n        if (!this.#verifyQuerySignatures) {\n            return response;\n        }\n        const signatureTimestampNs = response.signatures?.[0]?.timestamp;\n        if (!signatureTimestampNs) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MalformedSignatureErrorCode('Timestamp not found in query response. This suggests a malformed or malicious response.'));\n        }\n        const signatureTimestampMs = Number(BigInt(signatureTimestampNs) / BigInt(MSECS_TO_NANOSECONDS));\n        const currentTimestampInMs = Date.now() + this.#timeDiffMsecs;\n        // We don't need `Math.abs` here because we allow signatures in the future\n        if (currentTimestampInMs - signatureTimestampMs > this.#maxIngressExpiryInMs) {\n            if (tries < this.#retryTimes) {\n                this.log.warn('Timestamp is older than the max ingress expiry. Retrying query.', {\n                    requestId,\n                    signatureTimestampMs,\n                });\n                return await this.#requestAndRetryQuery({ ...args, tries: tries + 1 });\n            }\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.CertificateOutdatedErrorCode(this.#maxIngressExpiryInMinutes, requestId, tries));\n        }\n        return response;\n    }\n    /**\n     * Makes a request and retries if it fails.\n     * @param args - The arguments for the request.\n     * @param args.requestFn - A function that returns a Promise resolving to a Response.\n     * @param args.backoff - The backoff strategy to use for retries.\n     * @param args.tries - The number of retry attempts made so far.\n     * @returns The response from the request, if the status is 200 or 202.\n     * See the https://internetcomputer.org/docs/references/ic-interface-spec#http-interface for details on the response statuses.\n     * @throws {ProtocolError} if the response status is not 200 or 202, and the retry limit has been reached.\n     * @throws {TransportError} if the request fails, and the retry limit has been reached.\n     */\n    async #requestAndRetry(args) {\n        const { requestFn, backoff, tries } = args;\n        const delay = tries === 0 ? 0 : backoff.next();\n        // If delay is null, the backoff strategy is exhausted due to a maximum number of retries, duration, or other reason\n        if (delay === null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.TimeoutWaitingForResponseErrorCode(`Retry strategy exhausted after ${tries} attempts.`));\n        }\n        if (delay > 0) {\n            await new Promise(resolve => setTimeout(resolve, delay));\n        }\n        let response;\n        let responseBodyBytes = new Uint8Array();\n        try {\n            response = await requestFn();\n            // According to the spec, only 200 responses have a non-empty body\n            if (response.status === HTTP_STATUS_OK) {\n                // Consume the response body, to ensure that the response is not closed unexpectedly\n                responseBodyBytes = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_15__.uint8FromBufLike)(await response.clone().arrayBuffer());\n            }\n        }\n        catch (error) {\n            if (tries < this.#retryTimes) {\n                this.log.warn(`Caught exception while attempting to make request:\\n` +\n                    `  ${error}\\n` +\n                    `  Retrying request.`);\n                // Delay the request by the configured backoff strategy\n                return await this.#requestAndRetry({ requestFn, backoff, tries: tries + 1 });\n            }\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.TransportError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpFetchErrorCode(error));\n        }\n        const headers = (0,_transforms_js__WEBPACK_IMPORTED_MODULE_0__.httpHeadersTransform)(response.headers);\n        if (response.status === HTTP_STATUS_OK || response.status === HTTP_STATUS_ACCEPTED) {\n            return {\n                ok: response.ok, // should always be true\n                status: response.status,\n                statusText: response.statusText,\n                responseBodyBytes,\n                headers,\n            };\n        }\n        const responseText = await response.text();\n        if (response.status === HTTP_STATUS_NOT_FOUND && response.url.includes('api/v3')) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpV3ApiNotSupportedErrorCode());\n        }\n        // The error message comes from https://github.com/dfinity/ic/blob/23d5990bfc5277c32e54f0087b5a38fa412171e1/rs/validator/src/ingress_validation.rs#L233\n        if (responseText.startsWith('Invalid request expiry: ')) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IngressExpiryInvalidErrorCode(responseText, this.#maxIngressExpiryInMinutes));\n        }\n        if (tries < this.#retryTimes) {\n            return await this.#requestAndRetry({ requestFn, backoff, tries: tries + 1 });\n        }\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HttpErrorCode(response.status, response.statusText, headers, responseText));\n    }\n    async query(canisterId, fields, identity) {\n        const backoff = this.#backoffStrategy();\n        const ecid = fields.effectiveCanisterId\n            ? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(fields.effectiveCanisterId)\n            : _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n        await this.#asyncGuard(ecid);\n        this.log.print(`ecid ${ecid.toString()}`);\n        this.log.print(`canisterId ${canisterId.toString()}`);\n        let transformedRequest;\n        const id = await (identity ?? this.#identity);\n        if (!id) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IdentityInvalidErrorCode());\n        }\n        const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n        const sender = id.getPrincipal();\n        const ingressExpiry = calculateIngressExpiry(this.#maxIngressExpiryInMinutes, this.#timeDiffMsecs);\n        const request = {\n            request_type: _types_js__WEBPACK_IMPORTED_MODULE_1__.ReadRequestType.Query,\n            canister_id: canister,\n            method_name: fields.methodName,\n            arg: fields.arg,\n            sender,\n            ingress_expiry: ingressExpiry,\n        };\n        const requestId = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_7__.requestIdOf)(request);\n        transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/cbor',\n                    ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n                },\n            },\n            endpoint: _types_js__WEBPACK_IMPORTED_MODULE_1__.Endpoint.Query,\n            body: request,\n        });\n        // Apply transform for identity.\n        transformedRequest = (await id.transformRequest(transformedRequest));\n        const body = _cbor_js__WEBPACK_IMPORTED_MODULE_14__.encode(transformedRequest.body);\n        const args = {\n            canister: canister.toText(),\n            ecid,\n            transformedRequest,\n            body,\n            requestId,\n            backoff,\n            tries: 0,\n        };\n        const makeQuery = async () => {\n            // Attempt to make the query i=retryTimes times\n            const query = await this.#requestAndRetryQuery(args);\n            return {\n                requestDetails: request,\n                ...query,\n            };\n        };\n        const getSubnetStatus = async () => {\n            const cachedSubnetStatus = this.#subnetKeys.get(ecid.toString());\n            if (cachedSubnetStatus) {\n                return cachedSubnetStatus;\n            }\n            await this.fetchSubnetKeys(ecid.toString());\n            const subnetStatus = this.#subnetKeys.get(ecid.toString());\n            if (!subnetStatus) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MissingSignatureErrorCode());\n            }\n            return subnetStatus;\n        };\n        try {\n            if (!this.#verifyQuerySignatures) {\n                // Skip verification if the user has disabled it\n                return await makeQuery();\n            }\n            // Make query and fetch subnet keys in parallel\n            const [queryWithDetails, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n            try {\n                return this.#verifyQueryResponse(queryWithDetails, subnetStatus);\n            }\n            catch {\n                // In case the node signatures have changed, refresh the subnet keys and try again\n                this.log.warn('Query response verification failed. Retrying with fresh subnet keys.');\n                this.#subnetKeys.delete(ecid.toString());\n                const updatedSubnetStatus = await getSubnetStatus();\n                return this.#verifyQueryResponse(queryWithDetails, updatedSubnetStatus);\n            }\n        }\n        catch (error) {\n            let queryError;\n            if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.AgentError) {\n                // override the error code to include the request details\n                error.code.requestContext = {\n                    requestId,\n                    senderPubKey: transformedRequest.body.sender_pubkey,\n                    senderSignature: transformedRequest.body.sender_sig,\n                    ingressExpiry: transformedRequest.body.content.ingress_expiry,\n                };\n                queryError = error;\n            }\n            else {\n                queryError = _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(error));\n            }\n            this.log.error(`Error while making query: ${queryError.message}`, queryError);\n            throw queryError;\n        }\n    }\n    /**\n     * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n     * @param queryResponse - The response from the query\n     * @param subnetStatus - The subnet status, including all node keys\n     * @returns ApiQueryResponse\n     */\n    #verifyQueryResponse;\n    async createReadStateRequest(fields, identity) {\n        await this.#asyncGuard();\n        const id = await (identity ?? this.#identity);\n        if (!id) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IdentityInvalidErrorCode());\n        }\n        const sender = id.getPrincipal();\n        const transformedRequest = await this._transform({\n            request: {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/cbor',\n                    ...(this.#credentials ? { Authorization: 'Basic ' + btoa(this.#credentials) } : {}),\n                },\n            },\n            endpoint: _types_js__WEBPACK_IMPORTED_MODULE_1__.Endpoint.ReadState,\n            body: {\n                request_type: _types_js__WEBPACK_IMPORTED_MODULE_1__.ReadRequestType.ReadState,\n                paths: fields.paths,\n                sender,\n                ingress_expiry: calculateIngressExpiry(this.#maxIngressExpiryInMinutes, this.#timeDiffMsecs),\n            },\n        });\n        // Apply transform for identity.\n        return id.transformRequest(transformedRequest);\n    }\n    async readState(canisterId, fields, _identity, \n    // eslint-disable-next-line\n    request) {\n        await this.#rootKeyGuard();\n        const canister = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n        function getRequestId(options) {\n            for (const path of options.paths) {\n                const [pathName, value] = path;\n                const request_status = new TextEncoder().encode('request_status');\n                if ((0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_15__.uint8Equals)(pathName, request_status)) {\n                    return value;\n                }\n            }\n        }\n        let transformedRequest;\n        let requestId;\n        // If a pre-signed request is provided, use it\n        if (request) {\n            // This is a pre-signed request\n            transformedRequest = request;\n            requestId = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_7__.requestIdOf)(transformedRequest);\n        }\n        else {\n            // This is fields, we need to create a request\n            requestId = getRequestId(fields);\n            // Always create a fresh request with the current identity\n            const identity = await this.#identity;\n            if (!identity) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.IdentityInvalidErrorCode());\n            }\n            transformedRequest = await this.createReadStateRequest(fields, identity);\n        }\n        this.log.print(`fetching \"/api/v2/canister/${canister}/read_state\" with request:`, transformedRequest);\n        const backoff = this.#backoffStrategy();\n        try {\n            const { responseBodyBytes } = await this.#requestAndRetry({\n                requestFn: () => this.#fetch('' + new URL(`/api/v2/canister/${canister.toString()}/read_state`, this.host), {\n                    ...this.#fetchOptions,\n                    ...transformedRequest.request,\n                    body: _cbor_js__WEBPACK_IMPORTED_MODULE_14__.encode(transformedRequest.body),\n                }),\n                backoff,\n                tries: 0,\n            });\n            const decodedResponse = _cbor_js__WEBPACK_IMPORTED_MODULE_14__.decode(responseBodyBytes);\n            this.log.print('Read state response:', decodedResponse);\n            return decodedResponse;\n        }\n        catch (error) {\n            let readStateError;\n            if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.AgentError) {\n                // override the error code to include the request details\n                error.code.requestContext = {\n                    requestId,\n                    senderPubKey: transformedRequest.body.sender_pubkey,\n                    senderSignature: transformedRequest.body.sender_sig,\n                    ingressExpiry: transformedRequest.body.content.ingress_expiry,\n                };\n                readStateError = error;\n            }\n            else {\n                readStateError = _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(error));\n            }\n            this.log.error(`Error while making read state: ${readStateError.message}`, readStateError);\n            throw readStateError;\n        }\n    }\n    parseTimeFromResponse(response) {\n        let tree;\n        if (response.certificate) {\n            const decoded = _cbor_js__WEBPACK_IMPORTED_MODULE_14__.decode(response.certificate);\n            if (decoded && 'tree' in decoded) {\n                tree = decoded.tree;\n            }\n            else {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.HashTreeDecodeErrorCode('Could not decode time from response'));\n            }\n            const timeLookup = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_16__.lookup_path)(['time'], tree);\n            if (timeLookup.status !== _certificate_js__WEBPACK_IMPORTED_MODULE_16__.LookupPathStatus.Found) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.LookupErrorCode('Time was not found in the response or was not in its expected format.', timeLookup.status));\n            }\n            if (!(timeLookup.value instanceof Uint8Array) && !ArrayBuffer.isView(timeLookup)) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MalformedLookupFoundValueErrorCode('Time was not in its expected format.'));\n            }\n            const date = (0,_utils_leb_js__WEBPACK_IMPORTED_MODULE_17__.decodeTime)(timeLookup.value);\n            this.log.print('Time from response:', date);\n            this.log.print('Time from response in milliseconds:', date.getTime());\n            return date.getTime();\n        }\n        else {\n            this.log.warn('No certificate found in response');\n        }\n        return 0;\n    }\n    /**\n     * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n     * @param {Principal} canisterIdOverride - Pass a canister ID if you need to sync the time with a particular subnet. Uses the ICP ledger canister by default.\n     */\n    async syncTime(canisterIdOverride) {\n        this.#syncTimePromise =\n            this.#syncTimePromise ??\n                (async () => {\n                    await this.#rootKeyGuard();\n                    const callTime = Date.now();\n                    try {\n                        if (!canisterIdOverride) {\n                            this.log.print('Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai');\n                        }\n                        // Fall back with canisterId of the ICP Ledger\n                        const canisterId = canisterIdOverride ?? _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai');\n                        const anonymousAgent = HttpAgent.createSync({\n                            identity: new _auth_js__WEBPACK_IMPORTED_MODULE_13__.AnonymousIdentity(),\n                            host: this.host.toString(),\n                            fetch: this.#fetch,\n                            retryTimes: 0,\n                            rootKey: this.rootKey ?? undefined,\n                            shouldSyncTime: false,\n                        });\n                        const replicaTimes = await Promise.all(Array(3)\n                            .fill(null)\n                            .map(async () => {\n                            const status = await (0,_canisterStatus_index_js__WEBPACK_IMPORTED_MODULE_18__.request)({\n                                canisterId,\n                                agent: anonymousAgent,\n                                paths: ['time'],\n                                disableCertificateTimeVerification: true, // avoid recursive calls to syncTime\n                            });\n                            const date = status.get('time');\n                            if (date instanceof Date) {\n                                return date.getTime();\n                            }\n                        }, []));\n                        const maxReplicaTime = replicaTimes.reduce((max, current) => {\n                            return typeof current === 'number' && current > max ? current : max;\n                        }, 0);\n                        if (maxReplicaTime > 0) {\n                            this.#timeDiffMsecs = maxReplicaTime - callTime;\n                            this.#hasSyncedTime = true;\n                            this.log.notify({\n                                message: `Syncing time: offset of ${this.#timeDiffMsecs}`,\n                                level: 'info',\n                            });\n                        }\n                    }\n                    catch (error) {\n                        const syncTimeError = error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.AgentError\n                            ? error\n                            : _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedErrorCode(error));\n                        this.log.error('Caught exception while attempting to sync time', syncTimeError);\n                        throw syncTimeError;\n                    }\n                })();\n        await this.#syncTimePromise.finally(() => {\n            this.#syncTimePromise = null;\n        });\n    }\n    async status() {\n        const headers = this.#credentials\n            ? {\n                Authorization: 'Basic ' + btoa(this.#credentials),\n            }\n            : {};\n        this.log.print(`fetching \"/api/v2/status\"`);\n        const backoff = this.#backoffStrategy();\n        const { responseBodyBytes } = await this.#requestAndRetry({\n            backoff,\n            requestFn: () => this.#fetch('' + new URL(`/api/v2/status`, this.host), { headers, ...this.#fetchOptions }),\n            tries: 0,\n        });\n        return _cbor_js__WEBPACK_IMPORTED_MODULE_14__.decode(responseBodyBytes);\n    }\n    async fetchRootKey() {\n        // Wait for already pending promise to avoid duplicate calls\n        this.#rootKeyPromise =\n            this.#rootKeyPromise ??\n                (async () => {\n                    const value = await this.status();\n                    // Hex-encoded version of the replica root key\n                    this.rootKey = value.root_key;\n                    return this.rootKey;\n                })();\n        // clear rootkey promise and return result\n        return await this.#rootKeyPromise.finally(() => {\n            this.#rootKeyPromise = null;\n        });\n    }\n    async #asyncGuard(canisterIdOverride) {\n        await Promise.all([this.#rootKeyGuard(), this.#syncTimeGuard(canisterIdOverride)]);\n    }\n    async #rootKeyGuard() {\n        if (this.rootKey) {\n            return;\n        }\n        else if (this.rootKey === null &&\n            this.host.toString() !== 'https://icp-api.io' &&\n            this.#shouldFetchRootKey) {\n            await this.fetchRootKey();\n        }\n        else {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_2__.MissingRootKeyErrorCode(this.#shouldFetchRootKey));\n        }\n    }\n    async #syncTimeGuard(canisterIdOverride) {\n        if (this.#shouldSyncTime && !this.hasSyncedTime()) {\n            await this.syncTime(canisterIdOverride);\n        }\n    }\n    invalidateIdentity() {\n        this.#identity = null;\n    }\n    replaceIdentity(identity) {\n        this.#identity = Promise.resolve(identity);\n    }\n    async fetchSubnetKeys(canisterId) {\n        const effectiveCanisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.from(canisterId);\n        await this.#asyncGuard(effectiveCanisterId);\n        const response = await (0,_canisterStatus_index_js__WEBPACK_IMPORTED_MODULE_18__.request)({\n            canisterId: effectiveCanisterId,\n            paths: ['subnet'],\n            agent: this,\n        });\n        const subnetResponse = response.get('subnet');\n        if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n            this.#subnetKeys.set(effectiveCanisterId.toText(), subnetResponse);\n            return subnetResponse;\n        }\n        // If the subnet status is not returned, return undefined\n        return undefined;\n    }\n    _transform(request) {\n        let p = Promise.resolve(request);\n        if (request.endpoint === _types_js__WEBPACK_IMPORTED_MODULE_1__.Endpoint.Call) {\n            for (const fn of this.#updatePipeline) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        else {\n            for (const fn of this.#queryPipeline) {\n                p = p.then(r => fn(r).then(r2 => r2 || r));\n            }\n        }\n        return p;\n    }\n    /**\n     * Returns the time difference in milliseconds between the IC network clock and the client's clock,\n     * after the clock has been synced.\n     *\n     * If the time has not been synced, returns `0`.\n     */\n    getTimeDiffMsecs() {\n        return this.#timeDiffMsecs;\n    }\n    /**\n     * Returns `true` if the time has been synced at least once with the IC network, `false` otherwise.\n     */\n    hasSyncedTime() {\n        return this.#hasSyncedTime;\n    }\n}\n/**\n * Calculates the ingress expiry time based on the maximum allowed expiry in minutes and the time difference in milliseconds.\n * The expiry is rounded down according to the {@link Expiry.fromDeltaInMilliseconds} method.\n * @param maxIngressExpiryInMinutes - The maximum ingress expiry time in minutes.\n * @param timeDiffMsecs - The time difference in milliseconds to adjust the expiry.\n * @returns The calculated ingress expiry as an Expiry object.\n */\nfunction calculateIngressExpiry(maxIngressExpiryInMinutes, timeDiffMsecs) {\n    const ingressExpiryMs = maxIngressExpiryInMinutes * MINUTE_TO_MSECS;\n    return _transforms_js__WEBPACK_IMPORTED_MODULE_0__.Expiry.fromDeltaInMilliseconds(ingressExpiryMs, timeDiffMsecs);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2FnZW50L2h0dHAvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ2trQjtBQUMvakI7QUFDWjtBQUN1QjtBQUNaO0FBQ2tDO0FBQ0c7QUFDTDtBQUNaO0FBQ3JCO0FBQ1c7QUFDSjtBQUNIO0FBQ1c7QUFDZjtBQUNjO0FBQ1E7QUFDSjtBQUNsQztBQUNPO0FBQ2hDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtFQUFrRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQWEsY0FBYyxpRUFBeUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBYSxjQUFjLGlFQUF5QjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUscURBQWEsY0FBYyxpRUFBeUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0JBQWtCLElBQUksVUFBVSxFQUFFLHlDQUF5QztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5REFBYTtBQUNwQztBQUNBO0FBQ0EsK0JBQStCLGdFQUFZO0FBQzNDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQ0FBcUM7QUFDekQ7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDLCtCQUErQix5REFBUztBQUN4QztBQUNBO0FBQ0EsK0JBQStCLHdEQUFtQjtBQUNsRCw0QkFBNEIsUUFBUTtBQUNwQywyQkFBMkIseURBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxvQ0FBb0Msd0RBQW1CO0FBQ3ZELDRCQUE0QiwwQ0FBMEM7QUFDdEUsMkJBQTJCLHlEQUFTO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsMEJBQTBCLG9EQUFZLGNBQWMsMkRBQW1CLG9CQUFvQixPQUFPO0FBQ2xHO0FBQ0EsMENBQTBDLGdFQUFXLENBQUMsdUVBQTRCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxREFBYSxjQUFjLG1FQUEyQjtBQUNoRjtBQUNBLCtCQUErQiw2REFBZ0I7QUFDL0MsOEJBQThCLDJEQUFPO0FBQ3JDO0FBQ0E7QUFDQSxzQkFBc0Isa0RBQVUsY0FBYyxpRkFBeUM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrREFBVTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsb0VBQWtCO0FBQ2xFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckMsbUNBQW1DLEtBQUssRUFBRSwrQkFBK0I7QUFDekU7QUFDQSxpRUFBaUUsd0RBQWlCO0FBQ2xGO0FBQ0Esa0JBQWtCLGtEQUFVLGNBQWMscUVBQTZCO0FBQ3ZFO0FBQ0E7QUFDQSxrQkFBa0Isa0RBQVUsY0FBYyxxRUFBNkI7QUFDdkU7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtFQUFrQixDQUFDLGdEQUFTO0FBQ2hFO0FBQ0EsdUNBQXVDLGtFQUFrQixDQUFDLGdEQUFTO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLDBCQUEwQixZQUFZO0FBQ3RDO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esa0JBQWtCLGtEQUFVLGNBQWMsZ0VBQXdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUdBQXlHLFVBQVU7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1R0FBdUcsVUFBVTtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBYSxjQUFjLGdFQUF3QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBYSxjQUFjLGdFQUF3QjtBQUNyRTtBQUNBLHlCQUF5Qix5REFBUztBQUNsQztBQUNBLGNBQWMseURBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3REFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG9EQUFvRCxJQUFJO0FBQ3RHLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2Isc0JBQXNCLCtDQUFRO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHNCQUFzQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkNBQVc7QUFDaEM7QUFDQSwwQkFBMEIsMkRBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGNBQWM7QUFDM0Usb0VBQW9FLGNBQWM7QUFDbEY7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw2REFBNkQsY0FBYztBQUMzRSxvRUFBb0UsY0FBYztBQUNsRjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG9CQUFvQixpQ0FBaUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLHFFQUFxRSw2Q0FBVztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0RBQVU7QUFDM0M7QUFDQSxrQ0FBa0Msc0VBQThCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSx1Q0FBdUMscUVBQTZCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0RBQVksY0FBYywyREFBbUI7QUFDekU7QUFDQSx1REFBdUQsa0JBQWtCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDREQUE0RDtBQUM1RTtBQUNBLHFEQUFxRCxnQkFBZ0I7QUFDckU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQVksY0FBYywwRUFBa0MscUNBQXFDLE9BQU87QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsZ0JBQWdCO0FBQ3pFLHFGQUFxRixnQkFBZ0I7QUFDckc7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0NBQXNDLDZDQUFXLENBQUMsbUVBQWdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvRUFBb0I7QUFDckQscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFhLGNBQWMscURBQWEsaURBQWlELG9FQUFvQjtBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE1BQU07QUFDL0I7QUFDQSwwREFBMEQsMkJBQTJCO0FBQ3JGO0FBQ0EsaUNBQWlDLGtEQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFjLGNBQWMsMERBQWtCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFEQUFhLGNBQWMsbUVBQTJCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiwwREFBMEQsMkJBQTJCO0FBQ3JGO0FBQ0Esa0JBQWtCLGtEQUFVLGNBQWMsb0VBQTRCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZTtBQUMvQixnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxnQkFBZ0IsNEJBQTRCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBYSxjQUFjLDBFQUFrQyxtQ0FBbUMsT0FBTztBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG1FQUFnQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE1BQU07QUFDL0I7QUFDQTtBQUNBLHFEQUFxRCxzQ0FBc0M7QUFDM0Y7QUFDQSxrQkFBa0Isc0RBQWMsY0FBYywwREFBa0I7QUFDaEU7QUFDQSx3QkFBd0Isb0VBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQWEsY0FBYyxzRUFBOEI7QUFDM0U7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtEQUFVLGNBQWMscUVBQTZCO0FBQ3ZFO0FBQ0E7QUFDQSxpREFBaUQsc0NBQXNDO0FBQ3ZGO0FBQ0EsY0FBYyxxREFBYSxjQUFjLHFEQUFhO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5REFBUztBQUN2QixjQUFjLHlEQUFTO0FBQ3ZCO0FBQ0EsK0JBQStCLGdCQUFnQjtBQUMvQyxxQ0FBcUMsc0JBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBYSxjQUFjLGdFQUF3QjtBQUNyRTtBQUNBLHlCQUF5Qix5REFBUztBQUNsQztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsc0RBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJEQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsb0RBQW9ELElBQUk7QUFDdEcsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixzQkFBc0IsK0NBQVE7QUFDOUI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFCQUFxQiw2Q0FBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrREFBVSxjQUFjLGlFQUF5QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFZLGNBQWMsMkRBQW1CO0FBQzFFO0FBQ0Esd0RBQXdELG1CQUFtQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFEQUFhLGNBQWMsZ0VBQXdCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG9EQUFvRCxJQUFJO0FBQ3RHLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2Isc0JBQXNCLCtDQUFRO0FBQzlCO0FBQ0EsOEJBQThCLHNEQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseURBQVM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOERBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkRBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQWEsY0FBYyxnRUFBd0I7QUFDekU7QUFDQTtBQUNBO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEMsOEVBQThFLG9CQUFvQjtBQUNsRztBQUNBO0FBQ0EsMEJBQTBCLDZDQUFXO0FBQ3JDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTtBQUNiLG9DQUFvQyw2Q0FBVztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFVO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG9EQUFZLGNBQWMsMkRBQW1CO0FBQzlFO0FBQ0EsNkRBQTZELHVCQUF1QjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkNBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQWEsY0FBYywrREFBdUI7QUFDeEU7QUFDQSwrQkFBK0IsNkRBQVc7QUFDMUMsc0NBQXNDLDhEQUFnQjtBQUN0RCxzQkFBc0IscURBQWEsY0FBYyx1REFBZTtBQUNoRTtBQUNBO0FBQ0Esc0JBQXNCLHFEQUFhLGNBQWMsMEVBQWtDO0FBQ25GO0FBQ0EseUJBQXlCLDBEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLHlEQUFTO0FBQzFFO0FBQ0EsMENBQTBDLHdEQUFpQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxrRUFBcUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxvQkFBb0I7QUFDeEY7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGtEQUFVO0FBQ3pFO0FBQ0EsOEJBQThCLG9EQUFZLGNBQWMsMkRBQW1CO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQSxzRkFBc0YsZ0NBQWdDO0FBQ3RIO0FBQ0EsU0FBUztBQUNULGVBQWUsNkNBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQWEsY0FBYywrREFBdUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx5REFBUztBQUM3QztBQUNBLCtCQUErQixrRUFBcUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtDQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0NBQXNDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFdBQVcsa0RBQU07QUFDakI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BpcXViZS9vcHMtY29uc29sZS8uLi8uLi9wYWNrYWdlcy9zZGstanMvbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYWdlbnQvaHR0cC9pbmRleC5qcz8xOGEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW5jaXBhbCB9IGZyb20gJ0BkZmluaXR5L3ByaW5jaXBhbCc7XG5pbXBvcnQgeyBIYXNoVHJlZURlY29kZUVycm9yQ29kZSwgQ3JlYXRlSHR0cEFnZW50RXJyb3JDb2RlLCBFeHRlcm5hbEVycm9yLCBIdHRwRGVmYXVsdEZldGNoRXJyb3JDb2RlLCBJZGVudGl0eUludmFsaWRFcnJvckNvZGUsIEluZ3Jlc3NFeHBpcnlJbnZhbGlkRXJyb3JDb2RlLCBJbnB1dEVycm9yLCBMb29rdXBFcnJvckNvZGUsIE1hbGZvcm1lZFB1YmxpY0tleUVycm9yQ29kZSwgTWFsZm9ybWVkU2lnbmF0dXJlRXJyb3JDb2RlLCBNaXNzaW5nUm9vdEtleUVycm9yQ29kZSwgTWlzc2luZ1NpZ25hdHVyZUVycm9yQ29kZSwgUHJvdG9jb2xFcnJvciwgUXVlcnlTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWRFcnJvckNvZGUsIFRpbWVvdXRXYWl0aW5nRm9yUmVzcG9uc2VFcnJvckNvZGUsIFRydXN0RXJyb3IsIFVuZXhwZWN0ZWRFcnJvckNvZGUsIFVua25vd25FcnJvciwgSHR0cEVycm9yQ29kZSwgSHR0cFYzQXBpTm90U3VwcG9ydGVkRXJyb3JDb2RlLCBUcmFuc3BvcnRFcnJvciwgSHR0cEZldGNoRXJyb3JDb2RlLCBBZ2VudEVycm9yLCBNYWxmb3JtZWRMb29rdXBGb3VuZFZhbHVlRXJyb3JDb2RlLCBDZXJ0aWZpY2F0ZU91dGRhdGVkRXJyb3JDb2RlLCB9IGZyb20gXCIuLi8uLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IEFub255bW91c0lkZW50aXR5IH0gZnJvbSBcIi4uLy4uL2F1dGguanNcIjtcbmltcG9ydCAqIGFzIGNib3IgZnJvbSBcIi4uLy4uL2Nib3IuanNcIjtcbmltcG9ydCB7IGhhc2hPZk1hcCwgcmVxdWVzdElkT2YgfSBmcm9tIFwiLi4vLi4vcmVxdWVzdF9pZC5qc1wiO1xuaW1wb3J0IHsgUXVlcnlSZXNwb25zZVN0YXR1cywgfSBmcm9tIFwiLi4vYXBpLmpzXCI7XG5pbXBvcnQgeyBFeHBpcnksIGh0dHBIZWFkZXJzVHJhbnNmb3JtLCBtYWtlTm9uY2VUcmFuc2Zvcm0gfSBmcm9tIFwiLi90cmFuc2Zvcm1zLmpzXCI7XG5pbXBvcnQgeyBFbmRwb2ludCwgbWFrZU5vbmNlLCBSZWFkUmVxdWVzdFR5cGUsIFN1Ym1pdFJlcXVlc3RUeXBlLCB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XG5pbXBvcnQgeyByZXF1ZXN0IGFzIGNhbmlzdGVyU3RhdHVzUmVxdWVzdCB9IGZyb20gXCIuLi8uLi9jYW5pc3RlclN0YXR1cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgbG9va3VwX3BhdGgsIExvb2t1cFBhdGhTdGF0dXMgfSBmcm9tIFwiLi4vLi4vY2VydGlmaWNhdGUuanNcIjtcbmltcG9ydCB7IGVkMjU1MTkgfSBmcm9tICdAbm9ibGUvY3VydmVzL2VkMjU1MTknO1xuaW1wb3J0IHsgRXhwaXJhYmxlTWFwIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2V4cGlyYWJsZU1hcC5qc1wiO1xuaW1wb3J0IHsgRWQyNTUxOVB1YmxpY0tleSB9IGZyb20gXCIuLi8uLi9wdWJsaWNfa2V5LmpzXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlTG9nIH0gZnJvbSBcIi4uLy4uL29ic2VydmFibGUuanNcIjtcbmltcG9ydCB7IEV4cG9uZW50aWFsQmFja29mZiwgfSBmcm9tIFwiLi4vLi4vcG9sbGluZy9iYWNrb2ZmLmpzXCI7XG5pbXBvcnQgeyBkZWNvZGVUaW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2xlYi5qc1wiO1xuaW1wb3J0IHsgY29uY2F0Qnl0ZXMsIGhleFRvQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IHVpbnQ4RXF1YWxzLCB1aW50OEZyb21CdWZMaWtlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2J1ZmZlci5qc1wiO1xuaW1wb3J0IHsgSUNfUkVTUE9OU0VfRE9NQUlOX1NFUEFSQVRPUiB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybXMuanNcIjtcbmV4cG9ydCB7IG1ha2VOb25jZSB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgdmFyIFJlcXVlc3RTdGF0dXNSZXNwb25zZVN0YXR1cztcbihmdW5jdGlvbiAoUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzKSB7XG4gICAgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzW1wiUmVjZWl2ZWRcIl0gPSBcInJlY2VpdmVkXCI7XG4gICAgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzW1wiUHJvY2Vzc2luZ1wiXSA9IFwicHJvY2Vzc2luZ1wiO1xuICAgIFJlcXVlc3RTdGF0dXNSZXNwb25zZVN0YXR1c1tcIlJlcGxpZWRcIl0gPSBcInJlcGxpZWRcIjtcbiAgICBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXNbXCJSZWplY3RlZFwiXSA9IFwicmVqZWN0ZWRcIjtcbiAgICBSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXNbXCJVbmtub3duXCJdID0gXCJ1bmtub3duXCI7XG4gICAgUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzW1wiRG9uZVwiXSA9IFwiZG9uZVwiO1xufSkoUmVxdWVzdFN0YXR1c1Jlc3BvbnNlU3RhdHVzIHx8IChSZXF1ZXN0U3RhdHVzUmVzcG9uc2VTdGF0dXMgPSB7fSkpO1xuY29uc3QgTUlOVVRFX1RPX01TRUNTID0gNjAgKiAxXzAwMDtcbmNvbnN0IE1TRUNTX1RPX05BTk9TRUNPTkRTID0gMV8wMDBfMDAwO1xuY29uc3QgREVGQVVMVF9USU1FX0RJRkZfTVNFQ1MgPSAwO1xuLy8gUm9vdCBwdWJsaWMga2V5IGZvciB0aGUgSUMsIGVuY29kZWQgYXMgaGV4XG5leHBvcnQgY29uc3QgSUNfUk9PVF9LRVkgPSAnMzA4MTgyMzAxZDA2MGQyYjA2MDEwNDAxODJkYzdjMDUwMzAxMDIwMTA2MGMyYjA2MDEwNDAxODJkYzdjMDUwMzAyMDEwMzYxMDA4MTQnICtcbiAgICAnYzBlNmVjNzFmYWI1ODNiMDhiZDgxMzczYzI1NWMzYzM3MWIyZTg0ODYzYzk4YTRmMWUwOGI3NDIzNWQxNGZiNWQ5YzBjZDU0NmQ5NjgnICtcbiAgICAnNWY5MTNhMGMwYjJjYzUzNDE1ODNiZjRiNDM5MmU0NjdkYjk2ZDY1YjliYjRjYjcxNzExMmY4NDcyZTBkNWE0ZDE0NTA1ZmZkNzQ4NCcgK1xuICAgICdiMDEyOTEwOTFjNWY4N2I5ODg4MzQ2M2Y5ODA5MWEwYmFhYWUnO1xuZXhwb3J0IGNvbnN0IE1BTkFHRU1FTlRfQ0FOSVNURVJfSUQgPSAnYWFhYWEtYWEnO1xuLy8gSUMwIGRvbWFpbiBpbmZvXG5jb25zdCBJQzBfRE9NQUlOID0gJ2ljMC5hcHAnO1xuY29uc3QgSUMwX1NVQl9ET01BSU4gPSAnLmljMC5hcHAnO1xuY29uc3QgSUNQMF9ET01BSU4gPSAnaWNwMC5pbyc7XG5jb25zdCBJQ1AwX1NVQl9ET01BSU4gPSAnLmljcDAuaW8nO1xuY29uc3QgSUNQX0FQSV9ET01BSU4gPSAnaWNwLWFwaS5pbyc7XG5jb25zdCBJQ1BfQVBJX1NVQl9ET01BSU4gPSAnLmljcC1hcGkuaW8nO1xuY29uc3QgSFRUUF9TVEFUVVNfT0sgPSAyMDA7XG5jb25zdCBIVFRQX1NUQVRVU19BQ0NFUFRFRCA9IDIwMjtcbmNvbnN0IEhUVFBfU1RBVFVTX05PVF9GT1VORCA9IDQwNDtcbmZ1bmN0aW9uIGdldERlZmF1bHRGZXRjaCgpIHtcbiAgICBsZXQgZGVmYXVsdEZldGNoO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBCcm93c2VyIGNvbnRleHRcbiAgICAgICAgaWYgKHdpbmRvdy5mZXRjaCkge1xuICAgICAgICAgICAgZGVmYXVsdEZldGNoID0gd2luZG93LmZldGNoLmJpbmQod2luZG93KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEV4dGVybmFsRXJyb3IuZnJvbUNvZGUobmV3IEh0dHBEZWZhdWx0RmV0Y2hFcnJvckNvZGUoJ0ZldGNoIGltcGxlbWVudGF0aW9uIHdhcyBub3QgYXZhaWxhYmxlLiBZb3UgYXBwZWFyIHRvIGJlIGluIGEgYnJvd3NlciBjb250ZXh0LCBidXQgd2luZG93LmZldGNoIHdhcyBub3QgcHJlc2VudC4nKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTm9kZSBjb250ZXh0XG4gICAgICAgIGlmIChnbG9iYWwuZmV0Y2gpIHtcbiAgICAgICAgICAgIGRlZmF1bHRGZXRjaCA9IGdsb2JhbC5mZXRjaC5iaW5kKGdsb2JhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFeHRlcm5hbEVycm9yLmZyb21Db2RlKG5ldyBIdHRwRGVmYXVsdEZldGNoRXJyb3JDb2RlKCdGZXRjaCBpbXBsZW1lbnRhdGlvbiB3YXMgbm90IGF2YWlsYWJsZS4gWW91IGFwcGVhciB0byBiZSBpbiBhIE5vZGUuanMgY29udGV4dCwgYnV0IGdsb2JhbC5mZXRjaCB3YXMgbm90IGF2YWlsYWJsZS4nKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChzZWxmLmZldGNoKSB7XG4gICAgICAgICAgICBkZWZhdWx0RmV0Y2ggPSBzZWxmLmZldGNoLmJpbmQoc2VsZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZmF1bHRGZXRjaCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdEZldGNoO1xuICAgIH1cbiAgICB0aHJvdyBFeHRlcm5hbEVycm9yLmZyb21Db2RlKG5ldyBIdHRwRGVmYXVsdEZldGNoRXJyb3JDb2RlKCdGZXRjaCBpbXBsZW1lbnRhdGlvbiB3YXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIHByb3ZpZGUgZmV0Y2ggdG8gdGhlIEh0dHBBZ2VudCBjb25zdHJ1Y3Rvciwgb3IgZW5zdXJlIGl0IGlzIGF2YWlsYWJsZSBpbiB0aGUgd2luZG93IG9yIGdsb2JhbCBjb250ZXh0LicpKTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUhvc3QoY29uZmlndXJlZEhvc3QpIHtcbiAgICBsZXQgaG9zdDtcbiAgICBpZiAoY29uZmlndXJlZEhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIWNvbmZpZ3VyZWRIb3N0Lm1hdGNoKC9eW2Etel0rOi8pICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBob3N0ID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgY29uZmlndXJlZEhvc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdCA9IG5ldyBVUkwoY29uZmlndXJlZEhvc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBNYWlubmV0LCBsb2NhbCwgYW5kIHJlbW90ZSBlbnZpcm9ubWVudHMgd2lsbCBoYXZlIHRoZSBhcGkgcm91dGUgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGtub3duSG9zdHMgPSBbJ2ljMC5hcHAnLCAnaWNwMC5pbycsICcxMjcuMC4wLjEnLCAnbG9jYWxob3N0J107XG4gICAgICAgIGNvbnN0IHJlbW90ZUhvc3RzID0gWycuZ2l0aHViLmRldicsICcuZ2l0cG9kLmlvJ107XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cubG9jYXRpb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGhvc3RuYW1lID0gbG9jYXRpb24/Lmhvc3RuYW1lO1xuICAgICAgICBsZXQga25vd25Ib3N0O1xuICAgICAgICBpZiAoaG9zdG5hbWUgJiYgdHlwZW9mIGhvc3RuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHJlbW90ZUhvc3RzLnNvbWUoaG9zdCA9PiBob3N0bmFtZS5lbmRzV2l0aChob3N0KSkpIHtcbiAgICAgICAgICAgICAgICBrbm93bkhvc3QgPSBob3N0bmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtub3duSG9zdCA9IGtub3duSG9zdHMuZmluZChob3N0ID0+IGhvc3RuYW1lLmVuZHNXaXRoKGhvc3QpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYXRpb24gJiYga25vd25Ib3N0KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyBvbiBhIGJvdW5kYXJ5LW5vZGUgcHJvdmlkZWQgaG9zdCwgd2UgY2FuIHVzZSB0aGUgc2FtZSBob3N0IGZvciB0aGUgYWdlbnRcbiAgICAgICAgICAgIGhvc3QgPSBuZXcgVVJMKGAke2xvY2F0aW9uLnByb3RvY29sfS8vJHtrbm93bkhvc3R9JHtsb2NhdGlvbi5wb3J0ID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdCA9IG5ldyBVUkwoJ2h0dHBzOi8vaWNwLWFwaS5pbycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBob3N0LnRvU3RyaW5nKCk7XG59XG4vKipcbiAqIEEgSFRUUCBhZ2VudCBhbGxvd3MgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCBhIGNsaWVudCBvZiB0aGUgaW50ZXJuZXQgY29tcHV0ZXJcbnVzaW5nIHRoZSBhdmFpbGFibGUgbWV0aG9kcy4gSXQgZXhwb3NlcyBhbiBBUEkgdGhhdCBjbG9zZWx5IGZvbGxvd3MgdGhlXG5wdWJsaWMgdmlldyBvZiB0aGUgaW50ZXJuZXQgY29tcHV0ZXIsIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgZXhwb3NlZFxuZGlyZWN0bHkgdG8gdGhlIG1ham9yaXR5IG9mIHVzZXJzIGR1ZSB0byBpdHMgbG93LWxldmVsIGludGVyZmFjZS5cbiAqIFRoZXJlIGlzIGEgcGlwZWxpbmUgdG8gYXBwbHkgdHJhbnNmb3JtYXRpb25zIHRvIHRoZSByZXF1ZXN0IGJlZm9yZSBzZW5kaW5nXG5pdCB0byB0aGUgY2xpZW50LiBUaGlzIGlzIHRvIGRlY291cGxlIHNpZ25hdHVyZSwgbm9uY2UgZ2VuZXJhdGlvbiBhbmRcbm90aGVyIGNvbXB1dGF0aW9ucyBzbyB0aGF0IHRoaXMgY2xhc3MgY2FuIHN0YXkgYXMgc2ltcGxlIGFzIHBvc3NpYmxlIHdoaWxlXG5hbGxvd2luZyBleHRlbnNpb25zLlxuICovXG5leHBvcnQgY2xhc3MgSHR0cEFnZW50IHtcbiAgICAjcm9vdEtleVByb21pc2U7XG4gICAgI3Nob3VsZEZldGNoUm9vdEtleTtcbiAgICAjdGltZURpZmZNc2VjcztcbiAgICAjaGFzU3luY2VkVGltZTtcbiAgICAjc3luY1RpbWVQcm9taXNlO1xuICAgICNzaG91bGRTeW5jVGltZTtcbiAgICAjaWRlbnRpdHk7XG4gICAgI2ZldGNoO1xuICAgICNmZXRjaE9wdGlvbnM7XG4gICAgI2NhbGxPcHRpb25zO1xuICAgICNjcmVkZW50aWFscztcbiAgICAjcmV0cnlUaW1lczsgLy8gUmV0cnkgcmVxdWVzdHMgTiB0aW1lcyBiZWZvcmUgZXJyb3JpbmcgYnkgZGVmYXVsdFxuICAgICNiYWNrb2ZmU3RyYXRlZ3k7XG4gICAgI21heEluZ3Jlc3NFeHBpcnlJbk1pbnV0ZXM7XG4gICAgZ2V0ICNtYXhJbmdyZXNzRXhwaXJ5SW5NcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI21heEluZ3Jlc3NFeHBpcnlJbk1pbnV0ZXMgKiBNSU5VVEVfVE9fTVNFQ1M7XG4gICAgfVxuICAgICNxdWVyeVBpcGVsaW5lO1xuICAgICN1cGRhdGVQaXBlbGluZTtcbiAgICAjc3VibmV0S2V5cztcbiAgICAjdmVyaWZ5UXVlcnlTaWduYXR1cmVzO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIEh0dHBBZ2VudFxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBgSHR0cEFnZW50LmNyZWF0ZWAgb3IgYEh0dHBBZ2VudC5jcmVhdGVTeW5jYCBpbnN0ZWFkXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuI3Jvb3RLZXlQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy4jc2hvdWxkRmV0Y2hSb290S2V5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuI3RpbWVEaWZmTXNlY3MgPSBERUZBVUxUX1RJTUVfRElGRl9NU0VDUztcbiAgICAgICAgdGhpcy4jaGFzU3luY2VkVGltZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNzeW5jVGltZVByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLiNzaG91bGRTeW5jVGltZSA9IGZhbHNlO1xuICAgICAgICAvLyBQdWJsaWMgc2lnbmF0dXJlIHRvIGhlbHAgd2l0aCB0eXBlIGNoZWNraW5nLlxuICAgICAgICB0aGlzLl9pc0FnZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICAgICAgdGhpcy5sb2cgPSBuZXcgT2JzZXJ2YWJsZUxvZygpO1xuICAgICAgICB0aGlzLiNxdWVyeVBpcGVsaW5lID0gW107XG4gICAgICAgIHRoaXMuI3VwZGF0ZVBpcGVsaW5lID0gW107XG4gICAgICAgIHRoaXMuI3N1Ym5ldEtleXMgPSBuZXcgRXhwaXJhYmxlTWFwKHtcbiAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lOiA1ICogTUlOVVRFX1RPX01TRUNTLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdmVyaWZ5UXVlcnlTaWduYXR1cmVzID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZSBodHRwczovL2ludGVybmV0Y29tcHV0ZXIub3JnL2RvY3MvY3VycmVudC9yZWZlcmVuY2VzL2ljLWludGVyZmFjZS1zcGVjLyNodHRwLXF1ZXJ5IGZvciBkZXRhaWxzIG9uIHZhbGlkYXRpb25cbiAgICAgICAgICogQHBhcmFtIHF1ZXJ5UmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgcXVlcnlcbiAgICAgICAgICogQHBhcmFtIHN1Ym5ldFN0YXR1cyAtIFRoZSBzdWJuZXQgc3RhdHVzLCBpbmNsdWRpbmcgYWxsIG5vZGUga2V5c1xuICAgICAgICAgKiBAcmV0dXJucyBBcGlRdWVyeVJlc3BvbnNlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiN2ZXJpZnlRdWVyeVJlc3BvbnNlID0gKHF1ZXJ5UmVzcG9uc2UsIHN1Ym5ldFN0YXR1cykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuI3ZlcmlmeVF1ZXJ5U2lnbmF0dXJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBub3QgYmUgY2FsbGVkIGlmIHRoZSB1c2VyIGhhcyBkaXNhYmxlZCB2ZXJpZmljYXRpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnlSZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdHVzLCBzaWduYXR1cmVzID0gW10sIHJlcXVlc3RJZCB9ID0gcXVlcnlSZXNwb25zZTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2lnIG9mIHNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRpbWVzdGFtcCwgaWRlbnRpdHkgfSA9IHNpZztcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlSWQgPSBQcmluY2lwYWwuZnJvbVVpbnQ4QXJyYXkoaWRlbnRpdHkpLnRvVGV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIEhhc2ggaXMgY29uc3RydWN0ZWQgZGlmZmVyZW50bHkgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNcbiAgICAgICAgICAgICAgICBsZXQgaGFzaDtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBRdWVyeVJlc3BvbnNlU3RhdHVzLlJlcGxpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZXBseSB9ID0gcXVlcnlSZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzaCA9IGhhc2hPZk1hcCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5OiByZXBseSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogQmlnSW50KHRpbWVzdGFtcCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X2lkOiByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT09IFF1ZXJ5UmVzcG9uc2VTdGF0dXMuUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyByZWplY3RfY29kZSwgcmVqZWN0X21lc3NhZ2UsIGVycm9yX2NvZGUgfSA9IHF1ZXJ5UmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIGhhc2ggPSBoYXNoT2ZNYXAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3RfY29kZTogcmVqZWN0X2NvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3RfbWVzc2FnZTogcmVqZWN0X21lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiBlcnJvcl9jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBCaWdJbnQodGltZXN0YW1wKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RfaWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBVbmtub3duRXJyb3IuZnJvbUNvZGUobmV3IFVuZXhwZWN0ZWRFcnJvckNvZGUoYFVua25vd24gc3RhdHVzOiAke3N0YXR1c31gKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcGFyYXRvcldpdGhIYXNoID0gY29uY2F0Qnl0ZXMoSUNfUkVTUE9OU0VfRE9NQUlOX1NFUEFSQVRPUiwgaGFzaCk7XG4gICAgICAgICAgICAgICAgLy8gRklYOiBjaGVjayBmb3IgbWF0Y2ggd2l0aG91dCB2ZXJpZnlpbmcgTiB0aW1lc1xuICAgICAgICAgICAgICAgIGNvbnN0IHB1YktleSA9IHN1Ym5ldFN0YXR1cy5ub2RlS2V5cy5nZXQobm9kZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoIXB1YktleSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBQcm90b2NvbEVycm9yLmZyb21Db2RlKG5ldyBNYWxmb3JtZWRQdWJsaWNLZXlFcnJvckNvZGUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJhd0tleSA9IEVkMjU1MTlQdWJsaWNLZXkuZnJvbURlcihwdWJLZXkpLnJhd0tleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZCA9IGVkMjU1MTkudmVyaWZ5KHNpZy5zaWduYXR1cmUsIHNlcGFyYXRvcldpdGhIYXNoLCByYXdLZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5UmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdGhyb3cgVHJ1c3RFcnJvci5mcm9tQ29kZShuZXcgUXVlcnlTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWRFcnJvckNvZGUobm9kZUlkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcXVlcnlSZXNwb25zZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLiNmZXRjaCA9IG9wdGlvbnMuZmV0Y2ggfHwgZ2V0RGVmYXVsdEZldGNoKCkgfHwgZmV0Y2guYmluZChnbG9iYWwpO1xuICAgICAgICB0aGlzLiNmZXRjaE9wdGlvbnMgPSBvcHRpb25zLmZldGNoT3B0aW9ucztcbiAgICAgICAgdGhpcy4jY2FsbE9wdGlvbnMgPSBvcHRpb25zLmNhbGxPcHRpb25zO1xuICAgICAgICB0aGlzLiNzaG91bGRGZXRjaFJvb3RLZXkgPSBvcHRpb25zLnNob3VsZEZldGNoUm9vdEtleSA/PyBmYWxzZTtcbiAgICAgICAgdGhpcy4jc2hvdWxkU3luY1RpbWUgPSBvcHRpb25zLnNob3VsZFN5bmNUaW1lID8/IGZhbHNlO1xuICAgICAgICAvLyBVc2UgcHJvdmlkZWQgcm9vdCBrZXksIG90aGVyd2lzZSBmYWxsIGJhY2sgdG8gSUNfUk9PVF9LRVkgZm9yIG1haW5uZXQgb3IgbnVsbCBpZiB0aGUga2V5IG5lZWRzIHRvIGJlIGZldGNoZWRcbiAgICAgICAgaWYgKG9wdGlvbnMucm9vdEtleSkge1xuICAgICAgICAgICAgdGhpcy5yb290S2V5ID0gb3B0aW9ucy5yb290S2V5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuI3Nob3VsZEZldGNoUm9vdEtleSkge1xuICAgICAgICAgICAgdGhpcy5yb290S2V5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucm9vdEtleSA9IGhleFRvQnl0ZXMoSUNfUk9PVF9LRVkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvc3QgPSBkZXRlcm1pbmVIb3N0KG9wdGlvbnMuaG9zdCk7XG4gICAgICAgIHRoaXMuaG9zdCA9IG5ldyBVUkwoaG9zdCk7XG4gICAgICAgIGlmIChvcHRpb25zLnZlcmlmeVF1ZXJ5U2lnbmF0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLiN2ZXJpZnlRdWVyeVNpZ25hdHVyZXMgPSBvcHRpb25zLnZlcmlmeVF1ZXJ5U2lnbmF0dXJlcztcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWZhdWx0IGlzIDNcbiAgICAgICAgdGhpcy4jcmV0cnlUaW1lcyA9IG9wdGlvbnMucmV0cnlUaW1lcyA/PyAzO1xuICAgICAgICAvLyBEZWxheSBzdHJhdGVneSBmb3IgcmV0cmllcy4gRGVmYXVsdCBpcyBleHBvbmVudGlhbCBiYWNrb2ZmXG4gICAgICAgIGNvbnN0IGRlZmF1bHRCYWNrb2ZmRmFjdG9yeSA9ICgpID0+IG5ldyBFeHBvbmVudGlhbEJhY2tvZmYoe1xuICAgICAgICAgICAgbWF4SXRlcmF0aW9uczogdGhpcy4jcmV0cnlUaW1lcyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2JhY2tvZmZTdHJhdGVneSA9IG9wdGlvbnMuYmFja29mZlN0cmF0ZWd5IHx8IGRlZmF1bHRCYWNrb2ZmRmFjdG9yeTtcbiAgICAgICAgLy8gUmV3cml0ZSB0byBhdm9pZCByZWRpcmVjdHNcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5ob3N0bmFtZS5lbmRzV2l0aChJQzBfU1VCX0RPTUFJTikpIHtcbiAgICAgICAgICAgIHRoaXMuaG9zdC5ob3N0bmFtZSA9IElDMF9ET01BSU47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3N0Lmhvc3RuYW1lLmVuZHNXaXRoKElDUDBfU1VCX0RPTUFJTikpIHtcbiAgICAgICAgICAgIHRoaXMuaG9zdC5ob3N0bmFtZSA9IElDUDBfRE9NQUlOO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaG9zdC5ob3N0bmFtZS5lbmRzV2l0aChJQ1BfQVBJX1NVQl9ET01BSU4pKSB7XG4gICAgICAgICAgICB0aGlzLmhvc3QuaG9zdG5hbWUgPSBJQ1BfQVBJX0RPTUFJTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBwYXNzd29yZCB9ID0gb3B0aW9ucy5jcmVkZW50aWFscztcbiAgICAgICAgICAgIHRoaXMuI2NyZWRlbnRpYWxzID0gYCR7bmFtZX0ke3Bhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJ31gO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2lkZW50aXR5ID0gUHJvbWlzZS5yZXNvbHZlKG9wdGlvbnMuaWRlbnRpdHkgfHwgbmV3IEFub255bW91c0lkZW50aXR5KCkpO1xuICAgICAgICBpZiAob3B0aW9ucy5pbmdyZXNzRXhwaXJ5SW5NaW51dGVzICYmIG9wdGlvbnMuaW5ncmVzc0V4cGlyeUluTWludXRlcyA+IDUpIHtcbiAgICAgICAgICAgIHRocm93IElucHV0RXJyb3IuZnJvbUNvZGUobmV3IEluZ3Jlc3NFeHBpcnlJbnZhbGlkRXJyb3JDb2RlKCdUaGUgbWF4aW11bSBpbmdyZXNzIGV4cGlyeSB0aW1lIGlzIDUgbWludXRlcy4nLCBvcHRpb25zLmluZ3Jlc3NFeHBpcnlJbk1pbnV0ZXMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbmdyZXNzRXhwaXJ5SW5NaW51dGVzICYmIG9wdGlvbnMuaW5ncmVzc0V4cGlyeUluTWludXRlcyA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBJbnB1dEVycm9yLmZyb21Db2RlKG5ldyBJbmdyZXNzRXhwaXJ5SW52YWxpZEVycm9yQ29kZSgnSW5ncmVzcyBleHBpcnkgdGltZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLicsIG9wdGlvbnMuaW5ncmVzc0V4cGlyeUluTWludXRlcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI21heEluZ3Jlc3NFeHBpcnlJbk1pbnV0ZXMgPSBvcHRpb25zLmluZ3Jlc3NFeHBpcnlJbk1pbnV0ZXMgfHwgNTtcbiAgICAgICAgLy8gQWRkIGEgbm9uY2UgdHJhbnNmb3JtIHRvIGVuc3VyZSBjYWxscyBhcmUgdW5pcXVlXG4gICAgICAgIHRoaXMuYWRkVHJhbnNmb3JtKCd1cGRhdGUnLCBtYWtlTm9uY2VUcmFuc2Zvcm0obWFrZU5vbmNlKSk7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVF1ZXJ5Tm9uY2VzKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRyYW5zZm9ybSgncXVlcnknLCBtYWtlTm9uY2VUcmFuc2Zvcm0obWFrZU5vbmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubG9nVG9Db25zb2xlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5zdWJzY3JpYmUobG9nID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLmxldmVsID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobG9nLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb2cubGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obG9nLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobG9nLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVTeW5jKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoeyAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBhZ2VudCA9IEh0dHBBZ2VudC5jcmVhdGVTeW5jKG9wdGlvbnMpO1xuICAgICAgICBhd2FpdCBhZ2VudC4jYXN5bmNHdWFyZCgpO1xuICAgICAgICByZXR1cm4gYWdlbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBmcm9tKGFnZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoJ2NvbmZpZycgaW4gYWdlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgSHR0cEFnZW50LmNyZWF0ZShhZ2VudC5jb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IEh0dHBBZ2VudC5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIGZldGNoOiBhZ2VudC5fZmV0Y2gsXG4gICAgICAgICAgICAgICAgZmV0Y2hPcHRpb25zOiBhZ2VudC5fZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgICAgIGNhbGxPcHRpb25zOiBhZ2VudC5fY2FsbE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgaG9zdDogYWdlbnQuX2hvc3QudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpZGVudGl0eTogYWdlbnQuX2lkZW50aXR5ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IElucHV0RXJyb3IuZnJvbUNvZGUobmV3IENyZWF0ZUh0dHBBZ2VudEVycm9yQ29kZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0xvY2FsKCkge1xuICAgICAgICBjb25zdCBob3N0bmFtZSA9IHRoaXMuaG9zdC5ob3N0bmFtZTtcbiAgICAgICAgcmV0dXJuIGhvc3RuYW1lID09PSAnMTI3LjAuMC4xJyB8fCBob3N0bmFtZS5lbmRzV2l0aCgnMTI3LjAuMC4xJyk7XG4gICAgfVxuICAgIGFkZFRyYW5zZm9ybSh0eXBlLCBmbiwgcHJpb3JpdHkgPSBmbi5wcmlvcml0eSB8fCAwKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAndXBkYXRlJykge1xuICAgICAgICAgICAgLy8gS2VlcCB0aGUgcGlwZWxpbmUgc29ydGVkIGF0IGFsbCB0aW1lLCBieSBwcmlvcml0eS5cbiAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLiN1cGRhdGVQaXBlbGluZS5maW5kSW5kZXgoeCA9PiAoeC5wcmlvcml0eSB8fCAwKSA8IHByaW9yaXR5KTtcbiAgICAgICAgICAgIHRoaXMuI3VwZGF0ZVBpcGVsaW5lLnNwbGljZShpID49IDAgPyBpIDogdGhpcy4jdXBkYXRlUGlwZWxpbmUubGVuZ3RoLCAwLCBPYmplY3QuYXNzaWduKGZuLCB7IHByaW9yaXR5IH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAncXVlcnknKSB7XG4gICAgICAgICAgICAvLyBLZWVwIHRoZSBwaXBlbGluZSBzb3J0ZWQgYXQgYWxsIHRpbWUsIGJ5IHByaW9yaXR5LlxuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuI3F1ZXJ5UGlwZWxpbmUuZmluZEluZGV4KHggPT4gKHgucHJpb3JpdHkgfHwgMCkgPCBwcmlvcml0eSk7XG4gICAgICAgICAgICB0aGlzLiNxdWVyeVBpcGVsaW5lLnNwbGljZShpID49IDAgPyBpIDogdGhpcy4jcXVlcnlQaXBlbGluZS5sZW5ndGgsIDAsIE9iamVjdC5hc3NpZ24oZm4sIHsgcHJpb3JpdHkgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldFByaW5jaXBhbCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNpZGVudGl0eSkge1xuICAgICAgICAgICAgdGhyb3cgRXh0ZXJuYWxFcnJvci5mcm9tQ29kZShuZXcgSWRlbnRpdHlJbnZhbGlkRXJyb3JDb2RlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy4jaWRlbnRpdHkpLmdldFByaW5jaXBhbCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIGNhbGwgdG8gYSBjYW5pc3RlciBtZXRob2QuXG4gICAgICogQHBhcmFtIGNhbmlzdGVySWQgLSBUaGUgSUQgb2YgdGhlIGNhbmlzdGVyIHRvIGNhbGwuIENhbiBiZSBhIFByaW5jaXBhbCBvciBhIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBjYWxsLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLm1ldGhvZE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHRvIGNhbGwuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYXJnIC0gVGhlIGFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZCwgYXMgYSBVaW50OEFycmF5LlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmVmZmVjdGl2ZUNhbmlzdGVySWQgLSAoT3B0aW9uYWwpIFRoZSBlZmZlY3RpdmUgY2FuaXN0ZXIgSUQsIGlmIGRpZmZlcmVudCBmcm9tIHRoZSB0YXJnZXQgY2FuaXN0ZXIgSUQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuY2FsbFN5bmMgLSAoT3B0aW9uYWwpIFdoZXRoZXIgdG8gdXNlIHN5bmNocm9ub3VzIGNhbGwgbW9kZS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5ub25jZSAtIChPcHRpb25hbCkgQSB1bmlxdWUgbm9uY2UgZm9yIHRoZSByZXF1ZXN0LiBJZiBwcm92aWRlZCwgaXQgd2lsbCBvdmVycmlkZSBhbnkgbm9uY2Ugc2V0IGJ5IHRyYW5zZm9ybXMuXG4gICAgICogQHBhcmFtIGlkZW50aXR5IC0gKE9wdGlvbmFsKSBUaGUgaWRlbnRpdHkgdG8gdXNlIGZvciB0aGUgY2FsbC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgYWdlbnQncyBjdXJyZW50IGlkZW50aXR5IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzcG9uc2Ugb2YgdGhlIGNhbGwsIGluY2x1ZGluZyB0aGUgcmVxdWVzdCBJRCBhbmQgcmVzcG9uc2UgZGV0YWlscy5cbiAgICAgKi9cbiAgICBhc3luYyBjYWxsKGNhbmlzdGVySWQsIG9wdGlvbnMsIGlkZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGNhbGxTeW5jID0gb3B0aW9ucy5jYWxsU3luYyA/PyB0cnVlO1xuICAgICAgICBjb25zdCBpZCA9IGF3YWl0IChpZGVudGl0eSA/PyB0aGlzLiNpZGVudGl0eSk7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IEV4dGVybmFsRXJyb3IuZnJvbUNvZGUobmV3IElkZW50aXR5SW52YWxpZEVycm9yQ29kZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5pc3RlciA9IFByaW5jaXBhbC5mcm9tKGNhbmlzdGVySWQpO1xuICAgICAgICBjb25zdCBlY2lkID0gb3B0aW9ucy5lZmZlY3RpdmVDYW5pc3RlcklkXG4gICAgICAgICAgICA/IFByaW5jaXBhbC5mcm9tKG9wdGlvbnMuZWZmZWN0aXZlQ2FuaXN0ZXJJZClcbiAgICAgICAgICAgIDogY2FuaXN0ZXI7XG4gICAgICAgIGF3YWl0IHRoaXMuI2FzeW5jR3VhcmQoZWNpZCk7XG4gICAgICAgIGNvbnN0IHNlbmRlciA9IGlkLmdldFByaW5jaXBhbCgpO1xuICAgICAgICBjb25zdCBpbmdyZXNzX2V4cGlyeSA9IGNhbGN1bGF0ZUluZ3Jlc3NFeHBpcnkodGhpcy4jbWF4SW5ncmVzc0V4cGlyeUluTWludXRlcywgdGhpcy4jdGltZURpZmZNc2Vjcyk7XG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9IHtcbiAgICAgICAgICAgIHJlcXVlc3RfdHlwZTogU3VibWl0UmVxdWVzdFR5cGUuQ2FsbCxcbiAgICAgICAgICAgIGNhbmlzdGVyX2lkOiBjYW5pc3RlcixcbiAgICAgICAgICAgIG1ldGhvZF9uYW1lOiBvcHRpb25zLm1ldGhvZE5hbWUsXG4gICAgICAgICAgICBhcmc6IG9wdGlvbnMuYXJnLFxuICAgICAgICAgICAgc2VuZGVyLFxuICAgICAgICAgICAgaW5ncmVzc19leHBpcnksXG4gICAgICAgIH07XG4gICAgICAgIGxldCB0cmFuc2Zvcm1lZFJlcXVlc3QgPSAoYXdhaXQgdGhpcy5fdHJhbnNmb3JtKHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICBib2R5OiBudWxsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9jYm9yJyxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHRoaXMuI2NyZWRlbnRpYWxzID8geyBBdXRob3JpemF0aW9uOiAnQmFzaWMgJyArIGJ0b2EodGhpcy4jY3JlZGVudGlhbHMpIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmRwb2ludDogRW5kcG9pbnQuQ2FsbCxcbiAgICAgICAgICAgIGJvZHk6IHN1Ym1pdCxcbiAgICAgICAgfSkpO1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIG5vbmNlIHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgICAgbGV0IG5vbmNlO1xuICAgICAgICAvLyBDaGVjayBpZiBhIG5vbmNlIGlzIHByb3ZpZGVkIGluIHRoZSBvcHRpb25zIGFuZCBjb252ZXJ0IGl0IHRvIHRoZSBjb3JyZWN0IHR5cGVcbiAgICAgICAgaWYgKG9wdGlvbnM/Lm5vbmNlKSB7XG4gICAgICAgICAgICBub25jZSA9IHRvTm9uY2Uob3B0aW9ucy5ub25jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbm8gbm9uY2UgaXMgcHJvdmlkZWQgaW4gdGhlIG9wdGlvbnMsIGNoZWNrIHRoZSB0cmFuc2Zvcm1lZFJlcXVlc3QgYm9keVxuICAgICAgICBlbHNlIGlmICh0cmFuc2Zvcm1lZFJlcXVlc3QuYm9keS5ub25jZSkge1xuICAgICAgICAgICAgbm9uY2UgPSB0b05vbmNlKHRyYW5zZm9ybWVkUmVxdWVzdC5ib2R5Lm5vbmNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBubyBub25jZSBpcyBmb3VuZCwgc2V0IGl0IHRvIHVuZGVmaW5lZFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFzc2lnbiB0aGUgZGV0ZXJtaW5lZCBub25jZSB0byB0aGUgc3VibWl0IG9iamVjdFxuICAgICAgICBzdWJtaXQubm9uY2UgPSBub25jZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIE5vbmNlIHR5cGUuXG4gICAgICAgICAqIEBwYXJhbSBidWYgLSBUaGUgYnVmZmVyIHRvIGNvbnZlcnQuXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBidWZmZXIgYXMgYSBOb25jZS5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHRvTm9uY2UoYnVmKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihidWYsIHsgX19ub25jZV9fOiB1bmRlZmluZWQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwbHkgdHJhbnNmb3JtIGZvciBpZGVudGl0eS5cbiAgICAgICAgdHJhbnNmb3JtZWRSZXF1ZXN0ID0gKGF3YWl0IGlkLnRyYW5zZm9ybVJlcXVlc3QodHJhbnNmb3JtZWRSZXF1ZXN0KSk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBjYm9yLmVuY29kZSh0cmFuc2Zvcm1lZFJlcXVlc3QuYm9keSk7XG4gICAgICAgIGNvbnN0IGJhY2tvZmYgPSB0aGlzLiNiYWNrb2ZmU3RyYXRlZ3koKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gcmVxdWVzdElkT2Yoc3VibWl0KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdjMgc3luYyBjYWxsXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0U3luYyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5wcmludChgZmV0Y2hpbmcgXCIvYXBpL3YzL2NhbmlzdGVyLyR7ZWNpZC50b1RleHQoKX0vY2FsbFwiIHdpdGggcmVxdWVzdDpgLCB0cmFuc2Zvcm1lZFJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNmZXRjaCgnJyArIG5ldyBVUkwoYC9hcGkvdjMvY2FuaXN0ZXIvJHtlY2lkLnRvVGV4dCgpfS9jYWxsYCwgdGhpcy5ob3N0KSwge1xuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLiNjYWxsT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4udHJhbnNmb3JtZWRSZXF1ZXN0LnJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEFzeW5jID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLnByaW50KGBmZXRjaGluZyBcIi9hcGkvdjIvY2FuaXN0ZXIvJHtlY2lkLnRvVGV4dCgpfS9jYWxsXCIgd2l0aCByZXF1ZXN0OmAsIHRyYW5zZm9ybWVkUmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2ZldGNoKCcnICsgbmV3IFVSTChgL2FwaS92Mi9jYW5pc3Rlci8ke2VjaWQudG9UZXh0KCl9L2NhbGxgLCB0aGlzLmhvc3QpLCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuI2NhbGxPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAuLi50cmFuc2Zvcm1lZFJlcXVlc3QucmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0Rm4gPSBjYWxsU3luYyA/IHJlcXVlc3RTeW5jIDogcmVxdWVzdEFzeW5jO1xuICAgICAgICAgICAgY29uc3QgeyByZXNwb25zZUJvZHlCeXRlcywgLi4ucmVzcG9uc2UgfSA9IGF3YWl0IHRoaXMuI3JlcXVlc3RBbmRSZXRyeSh7XG4gICAgICAgICAgICAgICAgcmVxdWVzdEZuLFxuICAgICAgICAgICAgICAgIGJhY2tvZmYsXG4gICAgICAgICAgICAgICAgdHJpZXM6IDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IChyZXNwb25zZUJvZHlCeXRlcy5ieXRlTGVuZ3RoID4gMCA/IGNib3IuZGVjb2RlKHJlc3BvbnNlQm9keUJ5dGVzKSA6IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlQm9keSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3REZXRhaWxzOiBzdWJtaXQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGNhbGxFcnJvcjtcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFnZW50RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXJyb3IgaXMgZHVlIHRvIHRoZSB2MyBhcGkgbm90IGJlaW5nIHN1cHBvcnRlZCwgZmFsbCBiYWNrIHRvIHYyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmhhc0NvZGUoSHR0cFYzQXBpTm90U3VwcG9ydGVkRXJyb3JDb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy53YXJuKCd2MyBhcGkgbm90IHN1cHBvcnRlZC4gRmFsbCBiYWNrIHRvIHYyJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGwoY2FuaXN0ZXJJZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdjMgYXBpXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsU3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sIGlkZW50aXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IuaGFzQ29kZShJbmdyZXNzRXhwaXJ5SW52YWxpZEVycm9yQ29kZSkgJiYgIXRoaXMuI2hhc1N5bmNlZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYW4gaW5ncmVzcyBleHBpcnkgZXJyb3IgYW5kIHRoZSB0aW1lIGhhcyBub3QgYmVlbiBzeW5jZWQgeWV0LFxuICAgICAgICAgICAgICAgICAgICAvLyBzeW5jIHRpbWUgd2l0aCB0aGUgbmV0d29yayBhbmQgdHJ5IGFnYWluXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1RpbWUoY2FuaXN0ZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsKGNhbmlzdGVyLCBvcHRpb25zLCBpZGVudGl0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBvdmVycmlkZSB0aGUgZXJyb3IgY29kZSB0byBpbmNsdWRlIHRoZSByZXF1ZXN0IGRldGFpbHNcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuY29kZS5yZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclB1YktleTogdHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkuc2VuZGVyX3B1YmtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclNpZ25hdHVyZTogdHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkuc2VuZGVyX3NpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZ3Jlc3NFeHBpcnk6IHRyYW5zZm9ybWVkUmVxdWVzdC5ib2R5LmNvbnRlbnQuaW5ncmVzc19leHBpcnksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxFcnJvciA9IFVua25vd25FcnJvci5mcm9tQ29kZShuZXcgVW5leHBlY3RlZEVycm9yQ29kZShlcnJvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sb2cuZXJyb3IoYEVycm9yIHdoaWxlIG1ha2luZyBjYWxsOiAke2NhbGxFcnJvci5tZXNzYWdlfWAsIGNhbGxFcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBjYWxsRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI3JlcXVlc3RBbmRSZXRyeVF1ZXJ5KGFyZ3MpIHtcbiAgICAgICAgY29uc3QgeyBlY2lkLCB0cmFuc2Zvcm1lZFJlcXVlc3QsIGJvZHksIHJlcXVlc3RJZCwgYmFja29mZiwgdHJpZXMgfSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gdHJpZXMgPT09IDAgPyAwIDogYmFja29mZi5uZXh0KCk7XG4gICAgICAgIHRoaXMubG9nLnByaW50KGBmZXRjaGluZyBcIi9hcGkvdjIvY2FuaXN0ZXIvJHtlY2lkLnRvU3RyaW5nKCl9L3F1ZXJ5XCIgd2l0aCB0cmllczpgLCB7XG4gICAgICAgICAgICB0cmllcyxcbiAgICAgICAgICAgIGJhY2tvZmYsXG4gICAgICAgICAgICBkZWxheSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIGRlbGF5IGlzIG51bGwsIHRoZSBiYWNrb2ZmIHN0cmF0ZWd5IGlzIGV4aGF1c3RlZCBkdWUgdG8gYSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzLCBkdXJhdGlvbiwgb3Igb3RoZXIgcmVhc29uXG4gICAgICAgIGlmIChkZWxheSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgVW5rbm93bkVycm9yLmZyb21Db2RlKG5ldyBUaW1lb3V0V2FpdGluZ0ZvclJlc3BvbnNlRXJyb3JDb2RlKGBCYWNrb2ZmIHN0cmF0ZWd5IGV4aGF1c3RlZCBhZnRlciAke3RyaWVzfSBhdHRlbXB0cy5gLCByZXF1ZXN0SWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgIC8vIE1ha2UgdGhlIHJlcXVlc3QgYW5kIHJldHJ5IGlmIGl0IHRocm93cyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5sb2cucHJpbnQoYGZldGNoaW5nIFwiL2FwaS92Mi9jYW5pc3Rlci8ke2VjaWQudG9TdHJpbmcoKX0vcXVlcnlcIiB3aXRoIHJlcXVlc3Q6YCwgdHJhbnNmb3JtZWRSZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGZldGNoUmVzcG9uc2UgPSBhd2FpdCB0aGlzLiNmZXRjaCgnJyArIG5ldyBVUkwoYC9hcGkvdjIvY2FuaXN0ZXIvJHtlY2lkLnRvU3RyaW5nKCl9L3F1ZXJ5YCwgdGhpcy5ob3N0KSwge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuI2ZldGNoT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi50cmFuc2Zvcm1lZFJlcXVlc3QucmVxdWVzdCxcbiAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZmV0Y2hSZXNwb25zZS5zdGF0dXMgPT09IEhUVFBfU1RBVFVTX09LKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVlcnlSZXNwb25zZSA9IGNib3IuZGVjb2RlKHVpbnQ4RnJvbUJ1Zkxpa2UoYXdhaXQgZmV0Y2hSZXNwb25zZS5hcnJheUJ1ZmZlcigpKSk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnF1ZXJ5UmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIGh0dHBEZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvazogZmV0Y2hSZXNwb25zZS5vayxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogZmV0Y2hSZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBmZXRjaFJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBodHRwSGVhZGVyc1RyYW5zZm9ybShmZXRjaFJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IFByb3RvY29sRXJyb3IuZnJvbUNvZGUobmV3IEh0dHBFcnJvckNvZGUoZmV0Y2hSZXNwb25zZS5zdGF0dXMsIGZldGNoUmVzcG9uc2Uuc3RhdHVzVGV4dCwgaHR0cEhlYWRlcnNUcmFuc2Zvcm0oZmV0Y2hSZXNwb25zZS5oZWFkZXJzKSwgYXdhaXQgZmV0Y2hSZXNwb25zZS50ZXh0KCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0cmllcyA8IHRoaXMuI3JldHJ5VGltZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy53YXJuKGBDYXVnaHQgZXhjZXB0aW9uIHdoaWxlIGF0dGVtcHRpbmcgdG8gbWFrZSBxdWVyeTpcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCAgJHtlcnJvcn1cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCAgUmV0cnlpbmcgcXVlcnkuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3JlcXVlc3RBbmRSZXRyeVF1ZXJ5KHsgLi4uYXJncywgdHJpZXM6IHRyaWVzICsgMSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFnZW50RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGFuIGVycm9yIHRoYXQgd2UgaGF2ZSB0aHJvd24sIGp1c3QgdGhyb3cgaXQgYXMgaXNcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGl0J3MgYW4gZXJyb3IgdGhhdCB3ZSBoYXZlIG5vdCB0aHJvd24sIHdyYXAgaXQgaW4gYSBUcmFuc3BvcnRFcnJvclxuICAgICAgICAgICAgdGhyb3cgVHJhbnNwb3J0RXJyb3IuZnJvbUNvZGUobmV3IEh0dHBGZXRjaEVycm9yQ29kZShlcnJvcikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgdGltZXN0YW1wIHZlcmlmaWNhdGlvbiBpZiB0aGUgdXNlciBoYXMgc2V0IHZlcmlmeVF1ZXJ5U2lnbmF0dXJlcyB0byBmYWxzZVxuICAgICAgICBpZiAoIXRoaXMuI3ZlcmlmeVF1ZXJ5U2lnbmF0dXJlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZVRpbWVzdGFtcE5zID0gcmVzcG9uc2Uuc2lnbmF0dXJlcz8uWzBdPy50aW1lc3RhbXA7XG4gICAgICAgIGlmICghc2lnbmF0dXJlVGltZXN0YW1wTnMpIHtcbiAgICAgICAgICAgIHRocm93IFByb3RvY29sRXJyb3IuZnJvbUNvZGUobmV3IE1hbGZvcm1lZFNpZ25hdHVyZUVycm9yQ29kZSgnVGltZXN0YW1wIG5vdCBmb3VuZCBpbiBxdWVyeSByZXNwb25zZS4gVGhpcyBzdWdnZXN0cyBhIG1hbGZvcm1lZCBvciBtYWxpY2lvdXMgcmVzcG9uc2UuJykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZVRpbWVzdGFtcE1zID0gTnVtYmVyKEJpZ0ludChzaWduYXR1cmVUaW1lc3RhbXBOcykgLyBCaWdJbnQoTVNFQ1NfVE9fTkFOT1NFQ09ORFMpKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWVzdGFtcEluTXMgPSBEYXRlLm5vdygpICsgdGhpcy4jdGltZURpZmZNc2VjcztcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCBgTWF0aC5hYnNgIGhlcmUgYmVjYXVzZSB3ZSBhbGxvdyBzaWduYXR1cmVzIGluIHRoZSBmdXR1cmVcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lc3RhbXBJbk1zIC0gc2lnbmF0dXJlVGltZXN0YW1wTXMgPiB0aGlzLiNtYXhJbmdyZXNzRXhwaXJ5SW5Ncykge1xuICAgICAgICAgICAgaWYgKHRyaWVzIDwgdGhpcy4jcmV0cnlUaW1lcykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLndhcm4oJ1RpbWVzdGFtcCBpcyBvbGRlciB0aGFuIHRoZSBtYXggaW5ncmVzcyBleHBpcnkuIFJldHJ5aW5nIHF1ZXJ5LicsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVUaW1lc3RhbXBNcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jcmVxdWVzdEFuZFJldHJ5UXVlcnkoeyAuLi5hcmdzLCB0cmllczogdHJpZXMgKyAxIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgVHJ1c3RFcnJvci5mcm9tQ29kZShuZXcgQ2VydGlmaWNhdGVPdXRkYXRlZEVycm9yQ29kZSh0aGlzLiNtYXhJbmdyZXNzRXhwaXJ5SW5NaW51dGVzLCByZXF1ZXN0SWQsIHRyaWVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIHJlcXVlc3QgYW5kIHJldHJpZXMgaWYgaXQgZmFpbHMuXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0gYXJncy5yZXF1ZXN0Rm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIFByb21pc2UgcmVzb2x2aW5nIHRvIGEgUmVzcG9uc2UuXG4gICAgICogQHBhcmFtIGFyZ3MuYmFja29mZiAtIFRoZSBiYWNrb2ZmIHN0cmF0ZWd5IHRvIHVzZSBmb3IgcmV0cmllcy5cbiAgICAgKiBAcGFyYW0gYXJncy50cmllcyAtIFRoZSBudW1iZXIgb2YgcmV0cnkgYXR0ZW1wdHMgbWFkZSBzbyBmYXIuXG4gICAgICogQHJldHVybnMgVGhlIHJlc3BvbnNlIGZyb20gdGhlIHJlcXVlc3QsIGlmIHRoZSBzdGF0dXMgaXMgMjAwIG9yIDIwMi5cbiAgICAgKiBTZWUgdGhlIGh0dHBzOi8vaW50ZXJuZXRjb21wdXRlci5vcmcvZG9jcy9yZWZlcmVuY2VzL2ljLWludGVyZmFjZS1zcGVjI2h0dHAtaW50ZXJmYWNlIGZvciBkZXRhaWxzIG9uIHRoZSByZXNwb25zZSBzdGF0dXNlcy5cbiAgICAgKiBAdGhyb3dzIHtQcm90b2NvbEVycm9yfSBpZiB0aGUgcmVzcG9uc2Ugc3RhdHVzIGlzIG5vdCAyMDAgb3IgMjAyLCBhbmQgdGhlIHJldHJ5IGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICogQHRocm93cyB7VHJhbnNwb3J0RXJyb3J9IGlmIHRoZSByZXF1ZXN0IGZhaWxzLCBhbmQgdGhlIHJldHJ5IGxpbWl0IGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICovXG4gICAgYXN5bmMgI3JlcXVlc3RBbmRSZXRyeShhcmdzKSB7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdEZuLCBiYWNrb2ZmLCB0cmllcyB9ID0gYXJncztcbiAgICAgICAgY29uc3QgZGVsYXkgPSB0cmllcyA9PT0gMCA/IDAgOiBiYWNrb2ZmLm5leHQoKTtcbiAgICAgICAgLy8gSWYgZGVsYXkgaXMgbnVsbCwgdGhlIGJhY2tvZmYgc3RyYXRlZ3kgaXMgZXhoYXVzdGVkIGR1ZSB0byBhIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXMsIGR1cmF0aW9uLCBvciBvdGhlciByZWFzb25cbiAgICAgICAgaWYgKGRlbGF5ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBQcm90b2NvbEVycm9yLmZyb21Db2RlKG5ldyBUaW1lb3V0V2FpdGluZ0ZvclJlc3BvbnNlRXJyb3JDb2RlKGBSZXRyeSBzdHJhdGVneSBleGhhdXN0ZWQgYWZ0ZXIgJHt0cmllc30gYXR0ZW1wdHMuYCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgbGV0IHJlc3BvbnNlQm9keUJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdEZuKCk7XG4gICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIG9ubHkgMjAwIHJlc3BvbnNlcyBoYXZlIGEgbm9uLWVtcHR5IGJvZHlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IEhUVFBfU1RBVFVTX09LKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29uc3VtZSB0aGUgcmVzcG9uc2UgYm9keSwgdG8gZW5zdXJlIHRoYXQgdGhlIHJlc3BvbnNlIGlzIG5vdCBjbG9zZWQgdW5leHBlY3RlZGx5XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VCb2R5Qnl0ZXMgPSB1aW50OEZyb21CdWZMaWtlKGF3YWl0IHJlc3BvbnNlLmNsb25lKCkuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHJpZXMgPCB0aGlzLiNyZXRyeVRpbWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cud2FybihgQ2F1Z2h0IGV4Y2VwdGlvbiB3aGlsZSBhdHRlbXB0aW5nIHRvIG1ha2UgcmVxdWVzdDpcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCAgJHtlcnJvcn1cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCAgUmV0cnlpbmcgcmVxdWVzdC5gKTtcbiAgICAgICAgICAgICAgICAvLyBEZWxheSB0aGUgcmVxdWVzdCBieSB0aGUgY29uZmlndXJlZCBiYWNrb2ZmIHN0cmF0ZWd5XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3JlcXVlc3RBbmRSZXRyeSh7IHJlcXVlc3RGbiwgYmFja29mZiwgdHJpZXM6IHRyaWVzICsgMSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IFRyYW5zcG9ydEVycm9yLmZyb21Db2RlKG5ldyBIdHRwRmV0Y2hFcnJvckNvZGUoZXJyb3IpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkZXJzID0gaHR0cEhlYWRlcnNUcmFuc2Zvcm0ocmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IEhUVFBfU1RBVFVTX09LIHx8IHJlc3BvbnNlLnN0YXR1cyA9PT0gSFRUUF9TVEFUVVNfQUNDRVBURUQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb2s6IHJlc3BvbnNlLm9rLCAvLyBzaG91bGQgYWx3YXlzIGJlIHRydWVcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQm9keUJ5dGVzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gSFRUUF9TVEFUVVNfTk9UX0ZPVU5EICYmIHJlc3BvbnNlLnVybC5pbmNsdWRlcygnYXBpL3YzJykpIHtcbiAgICAgICAgICAgIHRocm93IFByb3RvY29sRXJyb3IuZnJvbUNvZGUobmV3IEh0dHBWM0FwaU5vdFN1cHBvcnRlZEVycm9yQ29kZSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgZXJyb3IgbWVzc2FnZSBjb21lcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9kZmluaXR5L2ljL2Jsb2IvMjNkNTk5MGJmYzUyNzdjMzJlNTRmMDA4N2I1YTM4ZmE0MTIxNzFlMS9ycy92YWxpZGF0b3Ivc3JjL2luZ3Jlc3NfdmFsaWRhdGlvbi5ycyNMMjMzXG4gICAgICAgIGlmIChyZXNwb25zZVRleHQuc3RhcnRzV2l0aCgnSW52YWxpZCByZXF1ZXN0IGV4cGlyeTogJykpIHtcbiAgICAgICAgICAgIHRocm93IElucHV0RXJyb3IuZnJvbUNvZGUobmV3IEluZ3Jlc3NFeHBpcnlJbnZhbGlkRXJyb3JDb2RlKHJlc3BvbnNlVGV4dCwgdGhpcy4jbWF4SW5ncmVzc0V4cGlyeUluTWludXRlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmllcyA8IHRoaXMuI3JldHJ5VGltZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLiNyZXF1ZXN0QW5kUmV0cnkoeyByZXF1ZXN0Rm4sIGJhY2tvZmYsIHRyaWVzOiB0cmllcyArIDEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgUHJvdG9jb2xFcnJvci5mcm9tQ29kZShuZXcgSHR0cEVycm9yQ29kZShyZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQsIGhlYWRlcnMsIHJlc3BvbnNlVGV4dCkpO1xuICAgIH1cbiAgICBhc3luYyBxdWVyeShjYW5pc3RlcklkLCBmaWVsZHMsIGlkZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGJhY2tvZmYgPSB0aGlzLiNiYWNrb2ZmU3RyYXRlZ3koKTtcbiAgICAgICAgY29uc3QgZWNpZCA9IGZpZWxkcy5lZmZlY3RpdmVDYW5pc3RlcklkXG4gICAgICAgICAgICA/IFByaW5jaXBhbC5mcm9tKGZpZWxkcy5lZmZlY3RpdmVDYW5pc3RlcklkKVxuICAgICAgICAgICAgOiBQcmluY2lwYWwuZnJvbShjYW5pc3RlcklkKTtcbiAgICAgICAgYXdhaXQgdGhpcy4jYXN5bmNHdWFyZChlY2lkKTtcbiAgICAgICAgdGhpcy5sb2cucHJpbnQoYGVjaWQgJHtlY2lkLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIHRoaXMubG9nLnByaW50KGBjYW5pc3RlcklkICR7Y2FuaXN0ZXJJZC50b1N0cmluZygpfWApO1xuICAgICAgICBsZXQgdHJhbnNmb3JtZWRSZXF1ZXN0O1xuICAgICAgICBjb25zdCBpZCA9IGF3YWl0IChpZGVudGl0eSA/PyB0aGlzLiNpZGVudGl0eSk7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IEV4dGVybmFsRXJyb3IuZnJvbUNvZGUobmV3IElkZW50aXR5SW52YWxpZEVycm9yQ29kZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5pc3RlciA9IFByaW5jaXBhbC5mcm9tKGNhbmlzdGVySWQpO1xuICAgICAgICBjb25zdCBzZW5kZXIgPSBpZC5nZXRQcmluY2lwYWwoKTtcbiAgICAgICAgY29uc3QgaW5ncmVzc0V4cGlyeSA9IGNhbGN1bGF0ZUluZ3Jlc3NFeHBpcnkodGhpcy4jbWF4SW5ncmVzc0V4cGlyeUluTWludXRlcywgdGhpcy4jdGltZURpZmZNc2Vjcyk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICByZXF1ZXN0X3R5cGU6IFJlYWRSZXF1ZXN0VHlwZS5RdWVyeSxcbiAgICAgICAgICAgIGNhbmlzdGVyX2lkOiBjYW5pc3RlcixcbiAgICAgICAgICAgIG1ldGhvZF9uYW1lOiBmaWVsZHMubWV0aG9kTmFtZSxcbiAgICAgICAgICAgIGFyZzogZmllbGRzLmFyZyxcbiAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgIGluZ3Jlc3NfZXhwaXJ5OiBpbmdyZXNzRXhwaXJ5LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSByZXF1ZXN0SWRPZihyZXF1ZXN0KTtcbiAgICAgICAgdHJhbnNmb3JtZWRSZXF1ZXN0ID0gYXdhaXQgdGhpcy5fdHJhbnNmb3JtKHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vY2JvcicsXG4gICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLiNjcmVkZW50aWFscyA/IHsgQXV0aG9yaXphdGlvbjogJ0Jhc2ljICcgKyBidG9hKHRoaXMuI2NyZWRlbnRpYWxzKSB9IDoge30pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kcG9pbnQ6IEVuZHBvaW50LlF1ZXJ5LFxuICAgICAgICAgICAgYm9keTogcmVxdWVzdCxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFwcGx5IHRyYW5zZm9ybSBmb3IgaWRlbnRpdHkuXG4gICAgICAgIHRyYW5zZm9ybWVkUmVxdWVzdCA9IChhd2FpdCBpZC50cmFuc2Zvcm1SZXF1ZXN0KHRyYW5zZm9ybWVkUmVxdWVzdCkpO1xuICAgICAgICBjb25zdCBib2R5ID0gY2Jvci5lbmNvZGUodHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkpO1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgY2FuaXN0ZXI6IGNhbmlzdGVyLnRvVGV4dCgpLFxuICAgICAgICAgICAgZWNpZCxcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkUmVxdWVzdCxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICBiYWNrb2ZmLFxuICAgICAgICAgICAgdHJpZXM6IDAsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG1ha2VRdWVyeSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gbWFrZSB0aGUgcXVlcnkgaT1yZXRyeVRpbWVzIHRpbWVzXG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IGF3YWl0IHRoaXMuI3JlcXVlc3RBbmRSZXRyeVF1ZXJ5KGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGV0YWlsczogcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGdldFN1Ym5ldFN0YXR1cyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZFN1Ym5ldFN0YXR1cyA9IHRoaXMuI3N1Ym5ldEtleXMuZ2V0KGVjaWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkU3VibmV0U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFN1Ym5ldFN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hTdWJuZXRLZXlzKGVjaWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjb25zdCBzdWJuZXRTdGF0dXMgPSB0aGlzLiNzdWJuZXRLZXlzLmdldChlY2lkLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYgKCFzdWJuZXRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBUcnVzdEVycm9yLmZyb21Db2RlKG5ldyBNaXNzaW5nU2lnbmF0dXJlRXJyb3JDb2RlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1Ym5ldFN0YXR1cztcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy4jdmVyaWZ5UXVlcnlTaWduYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgLy8gU2tpcCB2ZXJpZmljYXRpb24gaWYgdGhlIHVzZXIgaGFzIGRpc2FibGVkIGl0XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG1ha2VRdWVyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSBxdWVyeSBhbmQgZmV0Y2ggc3VibmV0IGtleXMgaW4gcGFyYWxsZWxcbiAgICAgICAgICAgIGNvbnN0IFtxdWVyeVdpdGhEZXRhaWxzLCBzdWJuZXRTdGF0dXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW21ha2VRdWVyeSgpLCBnZXRTdWJuZXRTdGF0dXMoKV0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jdmVyaWZ5UXVlcnlSZXNwb25zZShxdWVyeVdpdGhEZXRhaWxzLCBzdWJuZXRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIG5vZGUgc2lnbmF0dXJlcyBoYXZlIGNoYW5nZWQsIHJlZnJlc2ggdGhlIHN1Ym5ldCBrZXlzIGFuZCB0cnkgYWdhaW5cbiAgICAgICAgICAgICAgICB0aGlzLmxvZy53YXJuKCdRdWVyeSByZXNwb25zZSB2ZXJpZmljYXRpb24gZmFpbGVkLiBSZXRyeWluZyB3aXRoIGZyZXNoIHN1Ym5ldCBrZXlzLicpO1xuICAgICAgICAgICAgICAgIHRoaXMuI3N1Ym5ldEtleXMuZGVsZXRlKGVjaWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFN1Ym5ldFN0YXR1cyA9IGF3YWl0IGdldFN1Ym5ldFN0YXR1cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiN2ZXJpZnlRdWVyeVJlc3BvbnNlKHF1ZXJ5V2l0aERldGFpbHMsIHVwZGF0ZWRTdWJuZXRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5RXJyb3I7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBZ2VudEVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gb3ZlcnJpZGUgdGhlIGVycm9yIGNvZGUgdG8gaW5jbHVkZSB0aGUgcmVxdWVzdCBkZXRhaWxzXG4gICAgICAgICAgICAgICAgZXJyb3IuY29kZS5yZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXJQdWJLZXk6IHRyYW5zZm9ybWVkUmVxdWVzdC5ib2R5LnNlbmRlcl9wdWJrZXksXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlclNpZ25hdHVyZTogdHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkuc2VuZGVyX3NpZyxcbiAgICAgICAgICAgICAgICAgICAgaW5ncmVzc0V4cGlyeTogdHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkuY29udGVudC5pbmdyZXNzX2V4cGlyeSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHF1ZXJ5RXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHF1ZXJ5RXJyb3IgPSBVbmtub3duRXJyb3IuZnJvbUNvZGUobmV3IFVuZXhwZWN0ZWRFcnJvckNvZGUoZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKGBFcnJvciB3aGlsZSBtYWtpbmcgcXVlcnk6ICR7cXVlcnlFcnJvci5tZXNzYWdlfWAsIHF1ZXJ5RXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgcXVlcnlFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWUgaHR0cHM6Ly9pbnRlcm5ldGNvbXB1dGVyLm9yZy9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlcy9pYy1pbnRlcmZhY2Utc3BlYy8jaHR0cC1xdWVyeSBmb3IgZGV0YWlscyBvbiB2YWxpZGF0aW9uXG4gICAgICogQHBhcmFtIHF1ZXJ5UmVzcG9uc2UgLSBUaGUgcmVzcG9uc2UgZnJvbSB0aGUgcXVlcnlcbiAgICAgKiBAcGFyYW0gc3VibmV0U3RhdHVzIC0gVGhlIHN1Ym5ldCBzdGF0dXMsIGluY2x1ZGluZyBhbGwgbm9kZSBrZXlzXG4gICAgICogQHJldHVybnMgQXBpUXVlcnlSZXNwb25zZVxuICAgICAqL1xuICAgICN2ZXJpZnlRdWVyeVJlc3BvbnNlO1xuICAgIGFzeW5jIGNyZWF0ZVJlYWRTdGF0ZVJlcXVlc3QoZmllbGRzLCBpZGVudGl0eSkge1xuICAgICAgICBhd2FpdCB0aGlzLiNhc3luY0d1YXJkKCk7XG4gICAgICAgIGNvbnN0IGlkID0gYXdhaXQgKGlkZW50aXR5ID8/IHRoaXMuI2lkZW50aXR5KTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgdGhyb3cgRXh0ZXJuYWxFcnJvci5mcm9tQ29kZShuZXcgSWRlbnRpdHlJbnZhbGlkRXJyb3JDb2RlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlbmRlciA9IGlkLmdldFByaW5jaXBhbCgpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFJlcXVlc3QgPSBhd2FpdCB0aGlzLl90cmFuc2Zvcm0oe1xuICAgICAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9jYm9yJyxcbiAgICAgICAgICAgICAgICAgICAgLi4uKHRoaXMuI2NyZWRlbnRpYWxzID8geyBBdXRob3JpemF0aW9uOiAnQmFzaWMgJyArIGJ0b2EodGhpcy4jY3JlZGVudGlhbHMpIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmRwb2ludDogRW5kcG9pbnQuUmVhZFN0YXRlLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RfdHlwZTogUmVhZFJlcXVlc3RUeXBlLlJlYWRTdGF0ZSxcbiAgICAgICAgICAgICAgICBwYXRoczogZmllbGRzLnBhdGhzLFxuICAgICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgICBpbmdyZXNzX2V4cGlyeTogY2FsY3VsYXRlSW5ncmVzc0V4cGlyeSh0aGlzLiNtYXhJbmdyZXNzRXhwaXJ5SW5NaW51dGVzLCB0aGlzLiN0aW1lRGlmZk1zZWNzKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBBcHBseSB0cmFuc2Zvcm0gZm9yIGlkZW50aXR5LlxuICAgICAgICByZXR1cm4gaWQudHJhbnNmb3JtUmVxdWVzdCh0cmFuc2Zvcm1lZFJlcXVlc3QpO1xuICAgIH1cbiAgICBhc3luYyByZWFkU3RhdGUoY2FuaXN0ZXJJZCwgZmllbGRzLCBfaWRlbnRpdHksIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJlcXVlc3QpIHtcbiAgICAgICAgYXdhaXQgdGhpcy4jcm9vdEtleUd1YXJkKCk7XG4gICAgICAgIGNvbnN0IGNhbmlzdGVyID0gUHJpbmNpcGFsLmZyb20oY2FuaXN0ZXJJZCk7XG4gICAgICAgIGZ1bmN0aW9uIGdldFJlcXVlc3RJZChvcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2Ygb3B0aW9ucy5wYXRocykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtwYXRoTmFtZSwgdmFsdWVdID0gcGF0aDtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0X3N0YXR1cyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgncmVxdWVzdF9zdGF0dXMnKTtcbiAgICAgICAgICAgICAgICBpZiAodWludDhFcXVhbHMocGF0aE5hbWUsIHJlcXVlc3Rfc3RhdHVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0cmFuc2Zvcm1lZFJlcXVlc3Q7XG4gICAgICAgIGxldCByZXF1ZXN0SWQ7XG4gICAgICAgIC8vIElmIGEgcHJlLXNpZ25lZCByZXF1ZXN0IGlzIHByb3ZpZGVkLCB1c2UgaXRcbiAgICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBwcmUtc2lnbmVkIHJlcXVlc3RcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkUmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgICAgICByZXF1ZXN0SWQgPSByZXF1ZXN0SWRPZih0cmFuc2Zvcm1lZFJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBmaWVsZHMsIHdlIG5lZWQgdG8gY3JlYXRlIGEgcmVxdWVzdFxuICAgICAgICAgICAgcmVxdWVzdElkID0gZ2V0UmVxdWVzdElkKGZpZWxkcyk7XG4gICAgICAgICAgICAvLyBBbHdheXMgY3JlYXRlIGEgZnJlc2ggcmVxdWVzdCB3aXRoIHRoZSBjdXJyZW50IGlkZW50aXR5XG4gICAgICAgICAgICBjb25zdCBpZGVudGl0eSA9IGF3YWl0IHRoaXMuI2lkZW50aXR5O1xuICAgICAgICAgICAgaWYgKCFpZGVudGl0eSkge1xuICAgICAgICAgICAgICAgIHRocm93IEV4dGVybmFsRXJyb3IuZnJvbUNvZGUobmV3IElkZW50aXR5SW52YWxpZEVycm9yQ29kZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkUmVxdWVzdCA9IGF3YWl0IHRoaXMuY3JlYXRlUmVhZFN0YXRlUmVxdWVzdChmaWVsZHMsIGlkZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZy5wcmludChgZmV0Y2hpbmcgXCIvYXBpL3YyL2NhbmlzdGVyLyR7Y2FuaXN0ZXJ9L3JlYWRfc3RhdGVcIiB3aXRoIHJlcXVlc3Q6YCwgdHJhbnNmb3JtZWRSZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgYmFja29mZiA9IHRoaXMuI2JhY2tvZmZTdHJhdGVneSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyByZXNwb25zZUJvZHlCeXRlcyB9ID0gYXdhaXQgdGhpcy4jcmVxdWVzdEFuZFJldHJ5KHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Rm46ICgpID0+IHRoaXMuI2ZldGNoKCcnICsgbmV3IFVSTChgL2FwaS92Mi9jYW5pc3Rlci8ke2NhbmlzdGVyLnRvU3RyaW5nKCl9L3JlYWRfc3RhdGVgLCB0aGlzLmhvc3QpLCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuI2ZldGNoT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4udHJhbnNmb3JtZWRSZXF1ZXN0LnJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGNib3IuZW5jb2RlKHRyYW5zZm9ybWVkUmVxdWVzdC5ib2R5KSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBiYWNrb2ZmLFxuICAgICAgICAgICAgICAgIHRyaWVzOiAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkUmVzcG9uc2UgPSBjYm9yLmRlY29kZShyZXNwb25zZUJvZHlCeXRlcyk7XG4gICAgICAgICAgICB0aGlzLmxvZy5wcmludCgnUmVhZCBzdGF0ZSByZXNwb25zZTonLCBkZWNvZGVkUmVzcG9uc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRSZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxldCByZWFkU3RhdGVFcnJvcjtcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFnZW50RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBvdmVycmlkZSB0aGUgZXJyb3IgY29kZSB0byBpbmNsdWRlIHRoZSByZXF1ZXN0IGRldGFpbHNcbiAgICAgICAgICAgICAgICBlcnJvci5jb2RlLnJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlclB1YktleTogdHJhbnNmb3JtZWRSZXF1ZXN0LmJvZHkuc2VuZGVyX3B1YmtleSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyU2lnbmF0dXJlOiB0cmFuc2Zvcm1lZFJlcXVlc3QuYm9keS5zZW5kZXJfc2lnLFxuICAgICAgICAgICAgICAgICAgICBpbmdyZXNzRXhwaXJ5OiB0cmFuc2Zvcm1lZFJlcXVlc3QuYm9keS5jb250ZW50LmluZ3Jlc3NfZXhwaXJ5LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZFN0YXRlRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlYWRTdGF0ZUVycm9yID0gVW5rbm93bkVycm9yLmZyb21Db2RlKG5ldyBVbmV4cGVjdGVkRXJyb3JDb2RlKGVycm9yKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvZy5lcnJvcihgRXJyb3Igd2hpbGUgbWFraW5nIHJlYWQgc3RhdGU6ICR7cmVhZFN0YXRlRXJyb3IubWVzc2FnZX1gLCByZWFkU3RhdGVFcnJvcik7XG4gICAgICAgICAgICB0aHJvdyByZWFkU3RhdGVFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXJzZVRpbWVGcm9tUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IHRyZWU7XG4gICAgICAgIGlmIChyZXNwb25zZS5jZXJ0aWZpY2F0ZSkge1xuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IGNib3IuZGVjb2RlKHJlc3BvbnNlLmNlcnRpZmljYXRlKTtcbiAgICAgICAgICAgIGlmIChkZWNvZGVkICYmICd0cmVlJyBpbiBkZWNvZGVkKSB7XG4gICAgICAgICAgICAgICAgdHJlZSA9IGRlY29kZWQudHJlZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IFByb3RvY29sRXJyb3IuZnJvbUNvZGUobmV3IEhhc2hUcmVlRGVjb2RlRXJyb3JDb2RlKCdDb3VsZCBub3QgZGVjb2RlIHRpbWUgZnJvbSByZXNwb25zZScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRpbWVMb29rdXAgPSBsb29rdXBfcGF0aChbJ3RpbWUnXSwgdHJlZSk7XG4gICAgICAgICAgICBpZiAodGltZUxvb2t1cC5zdGF0dXMgIT09IExvb2t1cFBhdGhTdGF0dXMuRm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBQcm90b2NvbEVycm9yLmZyb21Db2RlKG5ldyBMb29rdXBFcnJvckNvZGUoJ1RpbWUgd2FzIG5vdCBmb3VuZCBpbiB0aGUgcmVzcG9uc2Ugb3Igd2FzIG5vdCBpbiBpdHMgZXhwZWN0ZWQgZm9ybWF0LicsIHRpbWVMb29rdXAuc3RhdHVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISh0aW1lTG9va3VwLnZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkgJiYgIUFycmF5QnVmZmVyLmlzVmlldyh0aW1lTG9va3VwKSkge1xuICAgICAgICAgICAgICAgIHRocm93IFByb3RvY29sRXJyb3IuZnJvbUNvZGUobmV3IE1hbGZvcm1lZExvb2t1cEZvdW5kVmFsdWVFcnJvckNvZGUoJ1RpbWUgd2FzIG5vdCBpbiBpdHMgZXhwZWN0ZWQgZm9ybWF0LicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBkZWNvZGVUaW1lKHRpbWVMb29rdXAudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5sb2cucHJpbnQoJ1RpbWUgZnJvbSByZXNwb25zZTonLCBkYXRlKTtcbiAgICAgICAgICAgIHRoaXMubG9nLnByaW50KCdUaW1lIGZyb20gcmVzcG9uc2UgaW4gbWlsbGlzZWNvbmRzOicsIGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nLndhcm4oJ05vIGNlcnRpZmljYXRlIGZvdW5kIGluIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsbG93cyBhZ2VudCB0byBzeW5jIGl0cyB0aW1lIHdpdGggdGhlIG5ldHdvcmsuIENhbiBiZSBjYWxsZWQgZHVyaW5nIGludGlhbGl6YXRpb24gb3IgbWlkLWxpZmVjeWNsZSBpZiB0aGUgZGV2aWNlJ3MgY2xvY2sgaGFzIGRyaWZ0ZWQgYXdheSBmcm9tIHRoZSBuZXR3b3JrIHRpbWUuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIHNldCB0aGUgRXhwaXJ5IGZvciBhIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge1ByaW5jaXBhbH0gY2FuaXN0ZXJJZE92ZXJyaWRlIC0gUGFzcyBhIGNhbmlzdGVyIElEIGlmIHlvdSBuZWVkIHRvIHN5bmMgdGhlIHRpbWUgd2l0aCBhIHBhcnRpY3VsYXIgc3VibmV0LiBVc2VzIHRoZSBJQ1AgbGVkZ2VyIGNhbmlzdGVyIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgYXN5bmMgc3luY1RpbWUoY2FuaXN0ZXJJZE92ZXJyaWRlKSB7XG4gICAgICAgIHRoaXMuI3N5bmNUaW1lUHJvbWlzZSA9XG4gICAgICAgICAgICB0aGlzLiNzeW5jVGltZVByb21pc2UgPz9cbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNyb290S2V5R3VhcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5pc3RlcklkT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5wcmludCgnU3luY2luZyB0aW1lIHdpdGggdGhlIElDLiBObyBjYW5pc3RlcklkIHByb3ZpZGVkLCBzbyBmYWxsaW5nIGJhY2sgdG8gcnlqbDMtdHlhYWEtYWFhYWEtYWFhYmEtY2FpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWxsIGJhY2sgd2l0aCBjYW5pc3RlcklkIG9mIHRoZSBJQ1AgTGVkZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5pc3RlcklkID0gY2FuaXN0ZXJJZE92ZXJyaWRlID8/IFByaW5jaXBhbC5mcm9tKCdyeWpsMy10eWFhYS1hYWFhYS1hYWFiYS1jYWknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFub255bW91c0FnZW50ID0gSHR0cEFnZW50LmNyZWF0ZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aXR5OiBuZXcgQW5vbnltb3VzSWRlbnRpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiB0aGlzLmhvc3QudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZXRjaDogdGhpcy4jZmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlUaW1lczogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290S2V5OiB0aGlzLnJvb3RLZXkgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFN5bmNUaW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwbGljYVRpbWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoQXJyYXkoMylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsbChudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IGNhbmlzdGVyU3RhdHVzUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmlzdGVySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50OiBhbm9ueW1vdXNBZ2VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHM6IFsndGltZSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ2VydGlmaWNhdGVUaW1lVmVyaWZpY2F0aW9uOiB0cnVlLCAvLyBhdm9pZCByZWN1cnNpdmUgY2FsbHMgdG8gc3luY1RpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gc3RhdHVzLmdldCgndGltZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgW10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFJlcGxpY2FUaW1lID0gcmVwbGljYVRpbWVzLnJlZHVjZSgobWF4LCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnbnVtYmVyJyAmJiBjdXJyZW50ID4gbWF4ID8gY3VycmVudCA6IG1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1heFJlcGxpY2FUaW1lID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3RpbWVEaWZmTXNlY3MgPSBtYXhSZXBsaWNhVGltZSAtIGNhbGxUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2hhc1N5bmNlZFRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLm5vdGlmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBTeW5jaW5nIHRpbWU6IG9mZnNldCBvZiAke3RoaXMuI3RpbWVEaWZmTXNlY3N9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN5bmNUaW1lRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIEFnZW50RXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBVbmtub3duRXJyb3IuZnJvbUNvZGUobmV3IFVuZXhwZWN0ZWRFcnJvckNvZGUoZXJyb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdDYXVnaHQgZXhjZXB0aW9uIHdoaWxlIGF0dGVtcHRpbmcgdG8gc3luYyB0aW1lJywgc3luY1RpbWVFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBzeW5jVGltZUVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgYXdhaXQgdGhpcy4jc3luY1RpbWVQcm9taXNlLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jc3luY1RpbWVQcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXR1cygpIHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuI2NyZWRlbnRpYWxzXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAnQmFzaWMgJyArIGJ0b2EodGhpcy4jY3JlZGVudGlhbHMpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgdGhpcy5sb2cucHJpbnQoYGZldGNoaW5nIFwiL2FwaS92Mi9zdGF0dXNcImApO1xuICAgICAgICBjb25zdCBiYWNrb2ZmID0gdGhpcy4jYmFja29mZlN0cmF0ZWd5KCk7XG4gICAgICAgIGNvbnN0IHsgcmVzcG9uc2VCb2R5Qnl0ZXMgfSA9IGF3YWl0IHRoaXMuI3JlcXVlc3RBbmRSZXRyeSh7XG4gICAgICAgICAgICBiYWNrb2ZmLFxuICAgICAgICAgICAgcmVxdWVzdEZuOiAoKSA9PiB0aGlzLiNmZXRjaCgnJyArIG5ldyBVUkwoYC9hcGkvdjIvc3RhdHVzYCwgdGhpcy5ob3N0KSwgeyBoZWFkZXJzLCAuLi50aGlzLiNmZXRjaE9wdGlvbnMgfSksXG4gICAgICAgICAgICB0cmllczogMCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjYm9yLmRlY29kZShyZXNwb25zZUJvZHlCeXRlcyk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoUm9vdEtleSgpIHtcbiAgICAgICAgLy8gV2FpdCBmb3IgYWxyZWFkeSBwZW5kaW5nIHByb21pc2UgdG8gYXZvaWQgZHVwbGljYXRlIGNhbGxzXG4gICAgICAgIHRoaXMuI3Jvb3RLZXlQcm9taXNlID1cbiAgICAgICAgICAgIHRoaXMuI3Jvb3RLZXlQcm9taXNlID8/XG4gICAgICAgICAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0aGlzLnN0YXR1cygpO1xuICAgICAgICAgICAgICAgICAgICAvLyBIZXgtZW5jb2RlZCB2ZXJzaW9uIG9mIHRoZSByZXBsaWNhIHJvb3Qga2V5XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdEtleSA9IHZhbHVlLnJvb3Rfa2V5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb290S2V5O1xuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIC8vIGNsZWFyIHJvb3RrZXkgcHJvbWlzZSBhbmQgcmV0dXJuIHJlc3VsdFxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jcm9vdEtleVByb21pc2UuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNyb290S2V5UHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyAjYXN5bmNHdWFyZChjYW5pc3RlcklkT3ZlcnJpZGUpIHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMuI3Jvb3RLZXlHdWFyZCgpLCB0aGlzLiNzeW5jVGltZUd1YXJkKGNhbmlzdGVySWRPdmVycmlkZSldKTtcbiAgICB9XG4gICAgYXN5bmMgI3Jvb3RLZXlHdWFyZCgpIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdEtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucm9vdEtleSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5ob3N0LnRvU3RyaW5nKCkgIT09ICdodHRwczovL2ljcC1hcGkuaW8nICYmXG4gICAgICAgICAgICB0aGlzLiNzaG91bGRGZXRjaFJvb3RLZXkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hSb290S2V5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFeHRlcm5hbEVycm9yLmZyb21Db2RlKG5ldyBNaXNzaW5nUm9vdEtleUVycm9yQ29kZSh0aGlzLiNzaG91bGRGZXRjaFJvb3RLZXkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyAjc3luY1RpbWVHdWFyZChjYW5pc3RlcklkT3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuI3Nob3VsZFN5bmNUaW1lICYmICF0aGlzLmhhc1N5bmNlZFRpbWUoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jVGltZShjYW5pc3RlcklkT3ZlcnJpZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGludmFsaWRhdGVJZGVudGl0eSgpIHtcbiAgICAgICAgdGhpcy4jaWRlbnRpdHkgPSBudWxsO1xuICAgIH1cbiAgICByZXBsYWNlSWRlbnRpdHkoaWRlbnRpdHkpIHtcbiAgICAgICAgdGhpcy4jaWRlbnRpdHkgPSBQcm9taXNlLnJlc29sdmUoaWRlbnRpdHkpO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaFN1Ym5ldEtleXMoY2FuaXN0ZXJJZCkge1xuICAgICAgICBjb25zdCBlZmZlY3RpdmVDYW5pc3RlcklkID0gUHJpbmNpcGFsLmZyb20oY2FuaXN0ZXJJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI2FzeW5jR3VhcmQoZWZmZWN0aXZlQ2FuaXN0ZXJJZCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FuaXN0ZXJTdGF0dXNSZXF1ZXN0KHtcbiAgICAgICAgICAgIGNhbmlzdGVySWQ6IGVmZmVjdGl2ZUNhbmlzdGVySWQsXG4gICAgICAgICAgICBwYXRoczogWydzdWJuZXQnXSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VibmV0UmVzcG9uc2UgPSByZXNwb25zZS5nZXQoJ3N1Ym5ldCcpO1xuICAgICAgICBpZiAoc3VibmV0UmVzcG9uc2UgJiYgdHlwZW9mIHN1Ym5ldFJlc3BvbnNlID09PSAnb2JqZWN0JyAmJiAnbm9kZUtleXMnIGluIHN1Ym5ldFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLiNzdWJuZXRLZXlzLnNldChlZmZlY3RpdmVDYW5pc3RlcklkLnRvVGV4dCgpLCBzdWJuZXRSZXNwb25zZSk7XG4gICAgICAgICAgICByZXR1cm4gc3VibmV0UmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIHN1Ym5ldCBzdGF0dXMgaXMgbm90IHJldHVybmVkLCByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIF90cmFuc2Zvcm0ocmVxdWVzdCkge1xuICAgICAgICBsZXQgcCA9IFByb21pc2UucmVzb2x2ZShyZXF1ZXN0KTtcbiAgICAgICAgaWYgKHJlcXVlc3QuZW5kcG9pbnQgPT09IEVuZHBvaW50LkNhbGwpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZm4gb2YgdGhpcy4jdXBkYXRlUGlwZWxpbmUpIHtcbiAgICAgICAgICAgICAgICBwID0gcC50aGVuKHIgPT4gZm4ocikudGhlbihyMiA9PiByMiB8fCByKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZuIG9mIHRoaXMuI3F1ZXJ5UGlwZWxpbmUpIHtcbiAgICAgICAgICAgICAgICBwID0gcC50aGVuKHIgPT4gZm4ocikudGhlbihyMiA9PiByMiB8fCByKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRpbWUgZGlmZmVyZW5jZSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgSUMgbmV0d29yayBjbG9jayBhbmQgdGhlIGNsaWVudCdzIGNsb2NrLFxuICAgICAqIGFmdGVyIHRoZSBjbG9jayBoYXMgYmVlbiBzeW5jZWQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgdGltZSBoYXMgbm90IGJlZW4gc3luY2VkLCByZXR1cm5zIGAwYC5cbiAgICAgKi9cbiAgICBnZXRUaW1lRGlmZk1zZWNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdGltZURpZmZNc2VjcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRpbWUgaGFzIGJlZW4gc3luY2VkIGF0IGxlYXN0IG9uY2Ugd2l0aCB0aGUgSUMgbmV0d29yaywgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaGFzU3luY2VkVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2hhc1N5bmNlZFRpbWU7XG4gICAgfVxufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbmdyZXNzIGV4cGlyeSB0aW1lIGJhc2VkIG9uIHRoZSBtYXhpbXVtIGFsbG93ZWQgZXhwaXJ5IGluIG1pbnV0ZXMgYW5kIHRoZSB0aW1lIGRpZmZlcmVuY2UgaW4gbWlsbGlzZWNvbmRzLlxuICogVGhlIGV4cGlyeSBpcyByb3VuZGVkIGRvd24gYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgRXhwaXJ5LmZyb21EZWx0YUluTWlsbGlzZWNvbmRzfSBtZXRob2QuXG4gKiBAcGFyYW0gbWF4SW5ncmVzc0V4cGlyeUluTWludXRlcyAtIFRoZSBtYXhpbXVtIGluZ3Jlc3MgZXhwaXJ5IHRpbWUgaW4gbWludXRlcy5cbiAqIEBwYXJhbSB0aW1lRGlmZk1zZWNzIC0gVGhlIHRpbWUgZGlmZmVyZW5jZSBpbiBtaWxsaXNlY29uZHMgdG8gYWRqdXN0IHRoZSBleHBpcnkuXG4gKiBAcmV0dXJucyBUaGUgY2FsY3VsYXRlZCBpbmdyZXNzIGV4cGlyeSBhcyBhbiBFeHBpcnkgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlSW5ncmVzc0V4cGlyeShtYXhJbmdyZXNzRXhwaXJ5SW5NaW51dGVzLCB0aW1lRGlmZk1zZWNzKSB7XG4gICAgY29uc3QgaW5ncmVzc0V4cGlyeU1zID0gbWF4SW5ncmVzc0V4cGlyeUluTWludXRlcyAqIE1JTlVURV9UT19NU0VDUztcbiAgICByZXR1cm4gRXhwaXJ5LmZyb21EZWx0YUluTWlsbGlzZWNvbmRzKGluZ3Jlc3NFeHBpcnlNcywgdGltZURpZmZNc2Vjcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js":
/*!******************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expiry: () => (/* binding */ Expiry),\n/* harmony export */   JSON_KEY_EXPIRY: () => (/* binding */ JSON_KEY_EXPIRY),\n/* harmony export */   httpHeadersTransform: () => (/* binding */ httpHeadersTransform),\n/* harmony export */   makeExpiryTransform: () => (/* binding */ makeExpiryTransform),\n/* harmony export */   makeNonceTransform: () => (/* binding */ makeNonceTransform)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n\n\n\nconst JSON_KEY_EXPIRY = '__expiry__';\nconst SECONDS_TO_MILLISECONDS = BigInt(1_000);\nconst MILLISECONDS_TO_NANOSECONDS = BigInt(1_000_000);\nconst MINUTES_TO_SECONDS = BigInt(60);\nconst EXPIRY_DELTA_THRESHOLD_MILLISECONDS = BigInt(90) * SECONDS_TO_MILLISECONDS;\nfunction roundMillisToSeconds(millis) {\n    return millis / SECONDS_TO_MILLISECONDS;\n}\nfunction roundMillisToMinutes(millis) {\n    return roundMillisToSeconds(millis) / MINUTES_TO_SECONDS;\n}\nclass Expiry {\n    constructor(__expiry__) {\n        this.__expiry__ = __expiry__;\n        this._isExpiry = true;\n    }\n    /**\n     * Creates an Expiry object from a delta in milliseconds.\n     * If the delta is less than 90 seconds, the expiry is rounded down to the nearest second.\n     * Otherwise, the expiry is rounded down to the nearest minute.\n     * @param deltaInMs The milliseconds to add to the current time.\n     * @param clockDriftMs The milliseconds to add to the current time, typically the clock drift between IC network clock and the client's clock. Defaults to `0` if not provided.\n     * @returns {Expiry} The constructed Expiry object.\n     */\n    static fromDeltaInMilliseconds(deltaInMs, clockDriftMs = 0) {\n        const deltaMs = BigInt(deltaInMs);\n        const expiryMs = BigInt(Date.now()) + deltaMs + BigInt(clockDriftMs);\n        let roundedExpirySeconds;\n        if (deltaMs < EXPIRY_DELTA_THRESHOLD_MILLISECONDS) {\n            roundedExpirySeconds = roundMillisToSeconds(expiryMs);\n        }\n        else {\n            const roundedExpiryMinutes = roundMillisToMinutes(expiryMs);\n            roundedExpirySeconds = roundedExpiryMinutes * MINUTES_TO_SECONDS;\n        }\n        return new Expiry(roundedExpirySeconds * SECONDS_TO_MILLISECONDS * MILLISECONDS_TO_NANOSECONDS);\n    }\n    toBigInt() {\n        return this.__expiry__;\n    }\n    toHash() {\n        return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this.__expiry__);\n    }\n    toString() {\n        return this.__expiry__.toString();\n    }\n    /**\n     * Serializes to JSON\n     * @returns {JsonnableExpiry} a JSON object with a single key, {@link JSON_KEY_EXPIRY}, whose value is the expiry as a string\n     */\n    toJSON() {\n        return { [JSON_KEY_EXPIRY]: this.toString() };\n    }\n    /**\n     * Deserializes a {@link JsonnableExpiry} object from a JSON string.\n     * @param input The JSON string to deserialize.\n     * @returns {Expiry} The deserialized Expiry object.\n     */\n    static fromJSON(input) {\n        const obj = JSON.parse(input);\n        if (obj[JSON_KEY_EXPIRY]) {\n            try {\n                const expiry = BigInt(obj[JSON_KEY_EXPIRY]);\n                return new Expiry(expiry);\n            }\n            catch (error) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InputError(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.ExpiryJsonDeserializeErrorCode(`Not a valid BigInt: ${error}`));\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InputError(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.ExpiryJsonDeserializeErrorCode(`The input does not contain the key ${JSON_KEY_EXPIRY}`));\n    }\n    static isExpiry(other) {\n        return (other instanceof Expiry ||\n            (typeof other === 'object' &&\n                other !== null &&\n                '_isExpiry' in other &&\n                other['_isExpiry'] === true &&\n                '__expiry__' in other &&\n                typeof other['__expiry__'] === 'bigint'));\n    }\n}\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nfunction makeNonceTransform(nonceFn = _types_js__WEBPACK_IMPORTED_MODULE_2__.makeNonce) {\n    return async (request) => {\n        // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n        const headers = request.request.headers;\n        // TODO: uncomment this when the http proxy supports it.\n        // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n        request.request.headers = headers;\n        // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n        if (request.endpoint === _types_js__WEBPACK_IMPORTED_MODULE_2__.Endpoint.Call) {\n            request.body.nonce = nonceFn();\n        }\n    };\n}\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nfunction makeExpiryTransform(delayInMilliseconds) {\n    return async (request) => {\n        request.body.ingress_expiry = Expiry.fromDeltaInMilliseconds(delayInMilliseconds);\n    };\n}\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nfunction httpHeadersTransform(headers) {\n    const headerFields = [];\n    headers.forEach((value, key) => {\n        headerFields.push([key, value]);\n    });\n    return headerFields;\n}\n//# sourceMappingURL=transforms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js":
/*!*************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Endpoint: () => (/* binding */ Endpoint),\n/* harmony export */   ReadRequestType: () => (/* binding */ ReadRequestType),\n/* harmony export */   SubmitRequestType: () => (/* binding */ SubmitRequestType),\n/* harmony export */   makeNonce: () => (/* binding */ makeNonce)\n/* harmony export */ });\n/* harmony import */ var _utils_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/random.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/random.js\");\n\n/**\n * @internal\n */\nvar Endpoint;\n(function (Endpoint) {\n    Endpoint[\"Query\"] = \"read\";\n    Endpoint[\"ReadState\"] = \"read_state\";\n    Endpoint[\"Call\"] = \"call\";\n})(Endpoint || (Endpoint = {}));\n// The types of values allowed in the `request_type` field for submit requests.\nvar SubmitRequestType;\n(function (SubmitRequestType) {\n    SubmitRequestType[\"Call\"] = \"call\";\n})(SubmitRequestType || (SubmitRequestType = {}));\n// The types of values allowed in the `request_type` field for read requests.\nvar ReadRequestType;\n(function (ReadRequestType) {\n    ReadRequestType[\"Query\"] = \"query\";\n    ReadRequestType[\"ReadState\"] = \"read_state\";\n})(ReadRequestType || (ReadRequestType = {}));\n/**\n * Create a random Nonce, based on random values\n */\nfunction makeNonce() {\n    // Encode 128 bits.\n    const buffer = new ArrayBuffer(16);\n    const view = new DataView(buffer);\n    const rand1 = (0,_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand2 = (0,_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand3 = (0,_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    const rand4 = (0,_utils_random_js__WEBPACK_IMPORTED_MODULE_0__.randomNumber)();\n    view.setUint32(0, rand1);\n    view.setUint32(4, rand2);\n    view.setUint32(8, rand3);\n    view.setUint32(12, rand4);\n    return Object.assign(new Uint8Array(buffer), { __nonce__: undefined });\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2FnZW50L2h0dHAvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ087QUFDUDtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDO0FBQzNDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhEQUFZO0FBQzlCLGtCQUFrQiw4REFBWTtBQUM5QixrQkFBa0IsOERBQVk7QUFDOUIsa0JBQWtCLDhEQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHNCQUFzQjtBQUN6RTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9hZ2VudC9odHRwL3R5cGVzLmpzPzNiZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmFuZG9tTnVtYmVyIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3JhbmRvbS5qc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBFbmRwb2ludDtcbihmdW5jdGlvbiAoRW5kcG9pbnQpIHtcbiAgICBFbmRwb2ludFtcIlF1ZXJ5XCJdID0gXCJyZWFkXCI7XG4gICAgRW5kcG9pbnRbXCJSZWFkU3RhdGVcIl0gPSBcInJlYWRfc3RhdGVcIjtcbiAgICBFbmRwb2ludFtcIkNhbGxcIl0gPSBcImNhbGxcIjtcbn0pKEVuZHBvaW50IHx8IChFbmRwb2ludCA9IHt9KSk7XG4vLyBUaGUgdHlwZXMgb2YgdmFsdWVzIGFsbG93ZWQgaW4gdGhlIGByZXF1ZXN0X3R5cGVgIGZpZWxkIGZvciBzdWJtaXQgcmVxdWVzdHMuXG5leHBvcnQgdmFyIFN1Ym1pdFJlcXVlc3RUeXBlO1xuKGZ1bmN0aW9uIChTdWJtaXRSZXF1ZXN0VHlwZSkge1xuICAgIFN1Ym1pdFJlcXVlc3RUeXBlW1wiQ2FsbFwiXSA9IFwiY2FsbFwiO1xufSkoU3VibWl0UmVxdWVzdFR5cGUgfHwgKFN1Ym1pdFJlcXVlc3RUeXBlID0ge30pKTtcbi8vIFRoZSB0eXBlcyBvZiB2YWx1ZXMgYWxsb3dlZCBpbiB0aGUgYHJlcXVlc3RfdHlwZWAgZmllbGQgZm9yIHJlYWQgcmVxdWVzdHMuXG5leHBvcnQgdmFyIFJlYWRSZXF1ZXN0VHlwZTtcbihmdW5jdGlvbiAoUmVhZFJlcXVlc3RUeXBlKSB7XG4gICAgUmVhZFJlcXVlc3RUeXBlW1wiUXVlcnlcIl0gPSBcInF1ZXJ5XCI7XG4gICAgUmVhZFJlcXVlc3RUeXBlW1wiUmVhZFN0YXRlXCJdID0gXCJyZWFkX3N0YXRlXCI7XG59KShSZWFkUmVxdWVzdFR5cGUgfHwgKFJlYWRSZXF1ZXN0VHlwZSA9IHt9KSk7XG4vKipcbiAqIENyZWF0ZSBhIHJhbmRvbSBOb25jZSwgYmFzZWQgb24gcmFuZG9tIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZU5vbmNlKCkge1xuICAgIC8vIEVuY29kZSAxMjggYml0cy5cbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMTYpO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICBjb25zdCByYW5kMSA9IHJhbmRvbU51bWJlcigpO1xuICAgIGNvbnN0IHJhbmQyID0gcmFuZG9tTnVtYmVyKCk7XG4gICAgY29uc3QgcmFuZDMgPSByYW5kb21OdW1iZXIoKTtcbiAgICBjb25zdCByYW5kNCA9IHJhbmRvbU51bWJlcigpO1xuICAgIHZpZXcuc2V0VWludDMyKDAsIHJhbmQxKTtcbiAgICB2aWV3LnNldFVpbnQzMig0LCByYW5kMik7XG4gICAgdmlldy5zZXRVaW50MzIoOCwgcmFuZDMpO1xuICAgIHZpZXcuc2V0VWludDMyKDEyLCByYW5kNCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgeyBfX25vbmNlX186IHVuZGVmaW5lZCB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/auth.js":
/*!*************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/auth.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousIdentity: () => (/* binding */ AnonymousIdentity),\n/* harmony export */   SignIdentity: () => (/* binding */ SignIdentity),\n/* harmony export */   createIdentityDescriptor: () => (/* binding */ createIdentityDescriptor)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _request_id_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request_id.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/request_id.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/constants.js\");\n\n\n\n\n/**\n * An Identity that can sign blobs.\n */\nclass SignIdentity {\n    /**\n     * Get the principal represented by this identity. Normally should be a\n     * `Principal.selfAuthenticating()`.\n     */\n    getPrincipal() {\n        if (!this._principal) {\n            this._principal = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n        }\n        return this._principal;\n    }\n    /**\n     * Transform a request into a signed version of the request. This is done last\n     * after the transforms on the body of a request. The returned object can be\n     * anything, but must be serializable to CBOR.\n     * @param request - internet computer request to transform\n     */\n    async transformRequest(request) {\n        const { body, ...fields } = request;\n        const requestId = (0,_request_id_js__WEBPACK_IMPORTED_MODULE_1__.requestIdOf)(body);\n        return {\n            ...fields,\n            body: {\n                content: body,\n                sender_pubkey: this.getPublicKey().toDer(),\n                sender_sig: await this.sign((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(_constants_js__WEBPACK_IMPORTED_MODULE_3__.IC_REQUEST_DOMAIN_SEPARATOR, requestId)),\n            },\n        };\n    }\n}\nclass AnonymousIdentity {\n    getPrincipal() {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.anonymous();\n    }\n    async transformRequest(request) {\n        return {\n            ...request,\n            body: { content: request.body },\n        };\n    }\n}\n/**\n * Create an IdentityDescriptor from a @dfinity/identity Identity\n * @param identity - identity describe in returned descriptor\n */\nfunction createIdentityDescriptor(identity) {\n    const identityIndicator = 'getPublicKey' in identity\n        ? { type: 'PublicKeyIdentity', publicKey: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(identity.getPublicKey().toDer()) }\n        : { type: 'AnonymousIdentity' };\n    return identityIndicator;\n}\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2F1dGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ2dCO0FBQ0Q7QUFDN0Q7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIseURBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDLDBCQUEwQiwyREFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdFQUFXLENBQUMsc0VBQTJCO0FBQ25GLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSx5REFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsWUFBWSxzQ0FBc0MsK0RBQVU7QUFDNUQsWUFBWTtBQUNaO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BpcXViZS9vcHMtY29uc29sZS8uLi8uLi9wYWNrYWdlcy9zZGstanMvbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vYXV0aC5qcz84ZjY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW5jaXBhbCB9IGZyb20gJ0BkZmluaXR5L3ByaW5jaXBhbCc7XG5pbXBvcnQgeyByZXF1ZXN0SWRPZiB9IGZyb20gXCIuL3JlcXVlc3RfaWQuanNcIjtcbmltcG9ydCB7IGJ5dGVzVG9IZXgsIGNvbmNhdEJ5dGVzIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgeyBJQ19SRVFVRVNUX0RPTUFJTl9TRVBBUkFUT1IgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogQW4gSWRlbnRpdHkgdGhhdCBjYW4gc2lnbiBibG9icy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ25JZGVudGl0eSB7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwcmluY2lwYWwgcmVwcmVzZW50ZWQgYnkgdGhpcyBpZGVudGl0eS4gTm9ybWFsbHkgc2hvdWxkIGJlIGFcbiAgICAgKiBgUHJpbmNpcGFsLnNlbGZBdXRoZW50aWNhdGluZygpYC5cbiAgICAgKi9cbiAgICBnZXRQcmluY2lwYWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcHJpbmNpcGFsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmluY2lwYWwgPSBQcmluY2lwYWwuc2VsZkF1dGhlbnRpY2F0aW5nKG5ldyBVaW50OEFycmF5KHRoaXMuZ2V0UHVibGljS2V5KCkudG9EZXIoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmluY2lwYWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHJlcXVlc3QgaW50byBhIHNpZ25lZCB2ZXJzaW9uIG9mIHRoZSByZXF1ZXN0LiBUaGlzIGlzIGRvbmUgbGFzdFxuICAgICAqIGFmdGVyIHRoZSB0cmFuc2Zvcm1zIG9uIHRoZSBib2R5IG9mIGEgcmVxdWVzdC4gVGhlIHJldHVybmVkIG9iamVjdCBjYW4gYmVcbiAgICAgKiBhbnl0aGluZywgYnV0IG11c3QgYmUgc2VyaWFsaXphYmxlIHRvIENCT1IuXG4gICAgICogQHBhcmFtIHJlcXVlc3QgLSBpbnRlcm5ldCBjb21wdXRlciByZXF1ZXN0IHRvIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIGFzeW5jIHRyYW5zZm9ybVJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICBjb25zdCB7IGJvZHksIC4uLmZpZWxkcyB9ID0gcmVxdWVzdDtcbiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gcmVxdWVzdElkT2YoYm9keSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29udGVudDogYm9keSxcbiAgICAgICAgICAgICAgICBzZW5kZXJfcHVia2V5OiB0aGlzLmdldFB1YmxpY0tleSgpLnRvRGVyKCksXG4gICAgICAgICAgICAgICAgc2VuZGVyX3NpZzogYXdhaXQgdGhpcy5zaWduKGNvbmNhdEJ5dGVzKElDX1JFUVVFU1RfRE9NQUlOX1NFUEFSQVRPUiwgcmVxdWVzdElkKSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBbm9ueW1vdXNJZGVudGl0eSB7XG4gICAgZ2V0UHJpbmNpcGFsKCkge1xuICAgICAgICByZXR1cm4gUHJpbmNpcGFsLmFub255bW91cygpO1xuICAgIH1cbiAgICBhc3luYyB0cmFuc2Zvcm1SZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgICAgICBib2R5OiB7IGNvbnRlbnQ6IHJlcXVlc3QuYm9keSB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlIGFuIElkZW50aXR5RGVzY3JpcHRvciBmcm9tIGEgQGRmaW5pdHkvaWRlbnRpdHkgSWRlbnRpdHlcbiAqIEBwYXJhbSBpZGVudGl0eSAtIGlkZW50aXR5IGRlc2NyaWJlIGluIHJldHVybmVkIGRlc2NyaXB0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlkZW50aXR5RGVzY3JpcHRvcihpZGVudGl0eSkge1xuICAgIGNvbnN0IGlkZW50aXR5SW5kaWNhdG9yID0gJ2dldFB1YmxpY0tleScgaW4gaWRlbnRpdHlcbiAgICAgICAgPyB7IHR5cGU6ICdQdWJsaWNLZXlJZGVudGl0eScsIHB1YmxpY0tleTogYnl0ZXNUb0hleChpZGVudGl0eS5nZXRQdWJsaWNLZXkoKS50b0RlcigpKSB9XG4gICAgICAgIDogeyB0eXBlOiAnQW5vbnltb3VzSWRlbnRpdHknIH07XG4gICAgcmV0dXJuIGlkZW50aXR5SW5kaWNhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/auth.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js":
/*!*****************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomPath: () => (/* binding */ CustomPath),\n/* harmony export */   encodePath: () => (/* binding */ encodePath),\n/* harmony export */   fetchNodeKeys: () => (/* binding */ fetchNodeKeys),\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _certificate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../certificate.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _cbor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cbor.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _utils_leb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/leb.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {Uint8Array[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nclass CustomPath {\n    constructor(key, path, decodeStrategy) {\n        this.key = key;\n        this.path = path;\n        this.decodeStrategy = decodeStrategy;\n    }\n}\n/**\n * Requests information from a canister's `read_state` endpoint.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options The configuration for the canister status request.\n * @see {@link CanisterStatusOptions} for detailed options.\n * @returns {Promise<StatusMap>} A map populated with data from the requested paths. Each path is a key in the map, and the value is the data obtained from the certificate for that path.\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nconst request = async (options) => {\n    const { agent, paths, disableCertificateTimeVerification = false } = options;\n    const canisterId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(options.canisterId);\n    const uniquePaths = [...new Set(paths)];\n    const status = new Map();\n    const promises = uniquePaths.map((path, index) => {\n        const encodedPath = encodePath(path, canisterId);\n        return (async () => {\n            try {\n                if (agent.rootKey === null) {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.MissingRootKeyErrorCode());\n                }\n                const rootKey = agent.rootKey;\n                const response = await agent.readState(canisterId, {\n                    paths: [encodedPath],\n                });\n                const certificate = await _certificate_js__WEBPACK_IMPORTED_MODULE_2__.Certificate.create({\n                    certificate: response.certificate,\n                    rootKey,\n                    canisterId,\n                    disableTimeVerification: disableCertificateTimeVerification,\n                    agent,\n                });\n                const lookup = (cert, path) => {\n                    if (path === 'subnet') {\n                        const data = fetchNodeKeys(response.certificate, canisterId, rootKey);\n                        return {\n                            path,\n                            data,\n                        };\n                    }\n                    else {\n                        return {\n                            path,\n                            data: (0,_certificate_js__WEBPACK_IMPORTED_MODULE_2__.lookupResultToBuffer)(cert.lookup_path(encodedPath)),\n                        };\n                    }\n                };\n                // must pass in the rootKey if we have no delegation\n                const { path, data } = lookup(certificate, uniquePaths[index]);\n                if (!data) {\n                    // Typically, the cert lookup will throw\n                    console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n                    if (typeof path === 'string') {\n                        status.set(path, null);\n                    }\n                    else {\n                        status.set(path.key, null);\n                    }\n                }\n                else {\n                    switch (path) {\n                        case 'time': {\n                            status.set(path, (0,_utils_leb_js__WEBPACK_IMPORTED_MODULE_3__.decodeTime)(data));\n                            break;\n                        }\n                        case 'controllers': {\n                            status.set(path, decodeControllers(data));\n                            break;\n                        }\n                        case 'module_hash': {\n                            status.set(path, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(data));\n                            break;\n                        }\n                        case 'subnet': {\n                            status.set(path, data);\n                            break;\n                        }\n                        case 'candid': {\n                            status.set(path, new TextDecoder().decode(data));\n                            break;\n                        }\n                        default: {\n                            // Check for CustomPath signature\n                            if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                                switch (path.decodeStrategy) {\n                                    case 'raw':\n                                        status.set(path.key, data);\n                                        break;\n                                    case 'leb128': {\n                                        status.set(path.key, (0,_utils_leb_js__WEBPACK_IMPORTED_MODULE_3__.decodeLeb128)(data));\n                                        break;\n                                    }\n                                    case 'cbor': {\n                                        status.set(path.key, _cbor_js__WEBPACK_IMPORTED_MODULE_5__.decode(data));\n                                        break;\n                                    }\n                                    case 'hex': {\n                                        status.set(path.key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(data));\n                                        break;\n                                    }\n                                    case 'utf-8': {\n                                        status.set(path.key, new TextDecoder().decode(data));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Throw on certificate errors\n                if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_1__.AgentError &&\n                    (error.hasCode(_errors_js__WEBPACK_IMPORTED_MODULE_1__.CertificateVerificationErrorCode) ||\n                        error.hasCode(_errors_js__WEBPACK_IMPORTED_MODULE_1__.CertificateTimeErrorCode))) {\n                    throw error;\n                }\n                if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                    status.set(path.key, null);\n                }\n                else {\n                    status.set(path, null);\n                }\n                console.group();\n                console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n                console.warn(error);\n                console.groupEnd();\n            }\n        })();\n    });\n    // Fetch all values separately, as each option can fail\n    await Promise.all(promises);\n    return status;\n};\nconst fetchNodeKeys = (certificate, canisterId, root_key) => {\n    if (!canisterId._isPrincipal) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.UnexpectedErrorCode('Invalid canisterId'));\n    }\n    const cert = _cbor_js__WEBPACK_IMPORTED_MODULE_5__.decode(certificate);\n    const tree = cert.tree;\n    let delegation = cert.delegation;\n    let subnetId;\n    if (delegation && delegation.subnet_id) {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n    }\n    // On local replica, with System type subnet, there is no delegation\n    else if (!delegation && typeof root_key !== 'undefined') {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(new Uint8Array(root_key));\n        delegation = {\n            subnet_id: subnetId.toUint8Array(),\n            certificate: new Uint8Array(0),\n        };\n    }\n    // otherwise use default NNS subnet id\n    else {\n        subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.selfAuthenticating(_dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromText('tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe').toUint8Array());\n        delegation = {\n            subnet_id: subnetId.toUint8Array(),\n            certificate: new Uint8Array(0),\n        };\n    }\n    const canisterInRange = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_2__.check_canister_ranges)({ canisterId, subnetId, tree });\n    if (!canisterInRange) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CertificateNotAuthorizedErrorCode(canisterId, subnetId));\n    }\n    const subnetLookupResult = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_2__.lookup_subtree)(['subnet', delegation.subnet_id, 'node'], tree);\n    if (subnetLookupResult.status !== _certificate_js__WEBPACK_IMPORTED_MODULE_2__.LookupSubtreeStatus.Found) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.LookupErrorCode('Node not found', subnetLookupResult.status));\n    }\n    if (subnetLookupResult.value instanceof Uint8Array) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.HashTreeDecodeErrorCode('Invalid node tree'));\n    }\n    // The forks are all labeled trees with the <node_id> label\n    const nodeForks = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_2__.flatten_forks)(subnetLookupResult.value);\n    const nodeKeys = new Map();\n    nodeForks.forEach(fork => {\n        const node_id = _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.from(fork[1]).toText();\n        const publicKeyLookupResult = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_2__.lookup_path)(['public_key'], fork[2]);\n        if (publicKeyLookupResult.status !== _certificate_js__WEBPACK_IMPORTED_MODULE_2__.LookupPathStatus.Found) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.LookupErrorCode('Public key not found', publicKeyLookupResult.status));\n        }\n        const derEncodedPublicKey = publicKeyLookupResult.value;\n        if (derEncodedPublicKey.byteLength !== 44) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DerKeyLengthMismatchErrorCode(44, derEncodedPublicKey.byteLength));\n        }\n        else {\n            nodeKeys.set(node_id, derEncodedPublicKey);\n        }\n    });\n    return {\n        subnetId: _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n        nodeKeys,\n    };\n};\nconst encodePath = (path, canisterId) => {\n    const canisterUint8Array = canisterId.toUint8Array();\n    switch (path) {\n        case 'time':\n            return [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('time')];\n        case 'controllers':\n            return [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('canister'), canisterUint8Array, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('controllers')];\n        case 'module_hash':\n            return [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('canister'), canisterUint8Array, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('module_hash')];\n        case 'subnet':\n            return [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('subnet')];\n        case 'candid':\n            return [\n                (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('canister'),\n                canisterUint8Array,\n                (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('metadata'),\n                (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('candid:service'),\n            ];\n        default: {\n            // Check for CustomPath signature\n            if ('key' in path && 'path' in path) {\n                // For simplified metadata queries\n                if (typeof path['path'] === 'string' || path['path'] instanceof Uint8Array) {\n                    const metaPath = path.path;\n                    const encoded = typeof metaPath === 'string' ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)(metaPath) : metaPath;\n                    return [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('canister'), canisterUint8Array, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToBytes)('metadata'), encoded];\n                    // For non-metadata, return the provided custompath\n                }\n                else {\n                    return path['path'];\n                }\n            }\n        }\n    }\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.UnexpectedErrorCode(`Error while encoding your path for canister status. Please ensure that your path ${path} was formatted correctly.`));\n};\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = (buf) => {\n    const controllersRaw = _cbor_js__WEBPACK_IMPORTED_MODULE_5__.decode(buf);\n    return controllersRaw.map(buf => {\n        return _dfinity_principal__WEBPACK_IMPORTED_MODULE_0__.Principal.fromUint8Array(buf);\n    });\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/canisterStatus/index.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js":
/*!*************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cbor: () => (/* binding */ Cbor),\n/* harmony export */   ToCborValue: () => (/* binding */ ToCborValue),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _dfinity_cbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/cbor */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/cbor/dist/cbor.mjs\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _agent_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./agent/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/transforms.js\");\n\n\n\n\n/**\n * Used to extend classes that need to provide a custom value for the CBOR encoding process.\n */\nclass ToCborValue {\n}\nfunction hasCborValueMethod(value) {\n    return typeof value === 'object' && value !== null && 'toCborValue' in value;\n}\n/**\n * Encode a JavaScript value into CBOR. If the value is an instance of {@link ToCborValue},\n * the {@link ToCborValue.toCborValue} method will be called to get the value to encode.\n * @param value The value to encode\n */\nfunction encode(value) {\n    try {\n        return _dfinity_cbor__WEBPACK_IMPORTED_MODULE_0__.encodeWithSelfDescribedTag(value, value => {\n            if (_dfinity_principal__WEBPACK_IMPORTED_MODULE_1__.Principal.isPrincipal(value)) {\n                return value.toUint8Array();\n            }\n            if (_agent_index_js__WEBPACK_IMPORTED_MODULE_2__.Expiry.isExpiry(value)) {\n                return value.toBigInt();\n            }\n            if (hasCborValueMethod(value)) {\n                return value.toCborValue();\n            }\n            return value;\n        });\n    }\n    catch (error) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.CborEncodeErrorCode(error, value));\n    }\n}\n/**\n * Decode a CBOR encoded value into a JavaScript value.\n * @param input The CBOR encoded value\n */\nfunction decode(input) {\n    try {\n        return _dfinity_cbor__WEBPACK_IMPORTED_MODULE_0__.decode(input);\n    }\n    catch (error) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.CborDecodeErrorCode(error, input));\n    }\n}\n// Not strictly necessary, we're just keeping it for backwards compatibility.\nconst Cbor = {\n    encode,\n    decode,\n};\n//# sourceMappingURL=cbor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2Nib3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0M7QUFDVDtBQUM2QztBQUN6QztBQUMxQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0Usa0JBQWtCO0FBQzFGLFFBQVEsK0JBQStCO0FBQ3ZDO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSxxRUFBK0I7QUFDOUMsZ0JBQWdCLHlEQUFTO0FBQ3pCO0FBQ0E7QUFDQSxnQkFBZ0IsbURBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxjQUFjLGtEQUFVLGNBQWMsMkRBQW1CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxlQUFlLGlEQUFXO0FBQzFCO0FBQ0E7QUFDQSxjQUFjLGtEQUFVLGNBQWMsMkRBQW1CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2Nib3IuanM/YzNkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmluY2lwYWwgfSBmcm9tICdAZGZpbml0eS9wcmluY2lwYWwnO1xuaW1wb3J0ICogYXMgY2JvciBmcm9tICdAZGZpbml0eS9jYm9yJztcbmltcG9ydCB7IENib3JEZWNvZGVFcnJvckNvZGUsIENib3JFbmNvZGVFcnJvckNvZGUsIElucHV0RXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IEV4cGlyeSB9IGZyb20gXCIuL2FnZW50L2luZGV4LmpzXCI7XG4vKipcbiAqIFVzZWQgdG8gZXh0ZW5kIGNsYXNzZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgYSBjdXN0b20gdmFsdWUgZm9yIHRoZSBDQk9SIGVuY29kaW5nIHByb2Nlc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb0Nib3JWYWx1ZSB7XG59XG5mdW5jdGlvbiBoYXNDYm9yVmFsdWVNZXRob2QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAndG9DYm9yVmFsdWUnIGluIHZhbHVlO1xufVxuLyoqXG4gKiBFbmNvZGUgYSBKYXZhU2NyaXB0IHZhbHVlIGludG8gQ0JPUi4gSWYgdGhlIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIHtAbGluayBUb0Nib3JWYWx1ZX0sXG4gKiB0aGUge0BsaW5rIFRvQ2JvclZhbHVlLnRvQ2JvclZhbHVlfSBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgdG8gZ2V0IHRoZSB2YWx1ZSB0byBlbmNvZGUuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGVuY29kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNib3IuZW5jb2RlV2l0aFNlbGZEZXNjcmliZWRUYWcodmFsdWUsIHZhbHVlID0+IHtcbiAgICAgICAgICAgIGlmIChQcmluY2lwYWwuaXNQcmluY2lwYWwodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvVWludDhBcnJheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEV4cGlyeS5pc0V4cGlyeSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9CaWdJbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNDYm9yVmFsdWVNZXRob2QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvQ2JvclZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgSW5wdXRFcnJvci5mcm9tQ29kZShuZXcgQ2JvckVuY29kZUVycm9yQ29kZShlcnJvciwgdmFsdWUpKTtcbiAgICB9XG59XG4vKipcbiAqIERlY29kZSBhIENCT1IgZW5jb2RlZCB2YWx1ZSBpbnRvIGEgSmF2YVNjcmlwdCB2YWx1ZS5cbiAqIEBwYXJhbSBpbnB1dCBUaGUgQ0JPUiBlbmNvZGVkIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gY2Jvci5kZWNvZGUoaW5wdXQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgSW5wdXRFcnJvci5mcm9tQ29kZShuZXcgQ2JvckRlY29kZUVycm9yQ29kZShlcnJvciwgaW5wdXQpKTtcbiAgICB9XG59XG4vLyBOb3Qgc3RyaWN0bHkgbmVjZXNzYXJ5LCB3ZSdyZSBqdXN0IGtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuZXhwb3J0IGNvbnN0IENib3IgPSB7XG4gICAgZW5jb2RlLFxuICAgIGRlY29kZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js":
/*!********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Certificate: () => (/* binding */ Certificate),\n/* harmony export */   LookupLabelStatus: () => (/* binding */ LookupLabelStatus),\n/* harmony export */   LookupPathStatus: () => (/* binding */ LookupPathStatus),\n/* harmony export */   LookupSubtreeStatus: () => (/* binding */ LookupSubtreeStatus),\n/* harmony export */   NodeType: () => (/* binding */ NodeType),\n/* harmony export */   check_canister_ranges: () => (/* binding */ check_canister_ranges),\n/* harmony export */   domain_sep: () => (/* binding */ domain_sep),\n/* harmony export */   find_label: () => (/* binding */ find_label),\n/* harmony export */   flatten_forks: () => (/* binding */ flatten_forks),\n/* harmony export */   hashTreeToString: () => (/* binding */ hashTreeToString),\n/* harmony export */   lookupResultToBuffer: () => (/* binding */ lookupResultToBuffer),\n/* harmony export */   lookup_path: () => (/* binding */ lookup_path),\n/* harmony export */   lookup_subtree: () => (/* binding */ lookup_subtree),\n/* harmony export */   reconstruct: () => (/* binding */ reconstruct)\n/* harmony export */ });\n/* harmony import */ var _cbor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cbor.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/cbor.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _utils_bls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/bls.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/bls.js\");\n/* harmony import */ var _utils_leb_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/leb.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _utils_buffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/sha2.js\");\n\n\n\n\n\n\n\n\nconst MINUTES_TO_MSEC = 60 * 1000;\nconst HOURS_TO_MINUTES = 60;\nconst DAYS_TO_HOURS = 24;\nconst DAYS_TO_MINUTES = DAYS_TO_HOURS * HOURS_TO_MINUTES;\nconst DEFAULT_CERTIFICATE_MAX_AGE_IN_MINUTES = 5;\nconst DEFAULT_CERTIFICATE_MAX_MINUTES_IN_FUTURE = 5;\n// For now, we don't want to set a strict timeout on the certificate delegation freshness,\n// so we set the max age really far in the past.\nconst DEFAULT_CERTIFICATE_DELEGATION_MAX_AGE_IN_MINUTES = 30 * DAYS_TO_MINUTES;\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Empty\"] = 0] = \"Empty\";\n    NodeType[NodeType[\"Fork\"] = 1] = \"Fork\";\n    NodeType[NodeType[\"Labeled\"] = 2] = \"Labeled\";\n    NodeType[NodeType[\"Leaf\"] = 3] = \"Leaf\";\n    NodeType[NodeType[\"Pruned\"] = 4] = \"Pruned\";\n})(NodeType || (NodeType = {}));\n/**\n * Make a human readable string out of a hash tree.\n * @param tree The hash tree to convert to a string\n */\nfunction hashTreeToString(tree) {\n    const indent = (s) => s\n        .split('\\n')\n        .map(x => '  ' + x)\n        .join('\\n');\n    function labelToString(label) {\n        const decoder = new TextDecoder(undefined, { fatal: true });\n        try {\n            return JSON.stringify(decoder.decode(label));\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        }\n        catch (e) {\n            return `data(...${label.byteLength} bytes)`;\n        }\n    }\n    switch (tree[0]) {\n        case NodeType.Empty:\n            return '()';\n        case NodeType.Fork: {\n            if (tree[1] instanceof Array && tree[2] instanceof Uint8Array) {\n                const left = hashTreeToString(tree[1]);\n                const right = hashTreeToString(tree[2]);\n                return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n            }\n            else {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.HashTreeDecodeErrorCode('Invalid tree structure for fork'));\n            }\n        }\n        case NodeType.Labeled: {\n            if (tree[1] instanceof Uint8Array && tree[2] instanceof Uint8Array) {\n                const label = labelToString(tree[1]);\n                const sub = hashTreeToString(tree[2]);\n                return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n            }\n            else {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.HashTreeDecodeErrorCode('Invalid tree structure for labeled'));\n            }\n        }\n        case NodeType.Leaf: {\n            if (!tree[1]) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.HashTreeDecodeErrorCode('Invalid tree structure for leaf'));\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `leaf(...${tree[1].byteLength} bytes)`;\n        }\n        case NodeType.Pruned: {\n            if (!tree[1]) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.HashTreeDecodeErrorCode('Invalid tree structure for pruned'));\n            }\n            else if (Array.isArray(tree[1])) {\n                return JSON.stringify(tree[1]);\n            }\n            return `pruned(${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(new Uint8Array(tree[1]))}`;\n        }\n        default: {\n            return `unknown(${JSON.stringify(tree[0])})`;\n        }\n    }\n}\nfunction isBufferGreaterThan(a, b) {\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] > b[i]) {\n            return true;\n        }\n    }\n    return false;\n}\nclass Certificate {\n    #disableTimeVerification = false;\n    #agent = undefined;\n    /**\n     * Create a new instance of a certificate, automatically verifying it.\n     * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n     * @throws if the verification of the certificate fails\n     */\n    static async create(options) {\n        const cert = Certificate.createUnverified(options);\n        await cert.verify();\n        return cert;\n    }\n    static createUnverified(options) {\n        return new Certificate(options.certificate, options.rootKey, options.canisterId, options.blsVerify ?? _utils_bls_js__WEBPACK_IMPORTED_MODULE_2__.blsVerify, options.maxAgeInMinutes, options.disableTimeVerification, options.agent);\n    }\n    constructor(certificate, _rootKey, _canisterId, _blsVerify, _maxAgeInMinutes = DEFAULT_CERTIFICATE_MAX_AGE_IN_MINUTES, disableTimeVerification = false, agent) {\n        this._rootKey = _rootKey;\n        this._canisterId = _canisterId;\n        this._blsVerify = _blsVerify;\n        this._maxAgeInMinutes = _maxAgeInMinutes;\n        this.#disableTimeVerification = disableTimeVerification;\n        this.cert = _cbor_js__WEBPACK_IMPORTED_MODULE_3__.decode(certificate);\n        if (agent && 'getTimeDiffMsecs' in agent && 'hasSyncedTime' in agent && 'syncTime' in agent) {\n            this.#agent = agent;\n        }\n    }\n    /**\n     * Lookup a path in the certificate tree, using {@link lookup_path}.\n     * @param path The path to lookup.\n     * @returns The result of the lookup.\n     */\n    lookup_path(path) {\n        return lookup_path(path, this.cert.tree);\n    }\n    /**\n     * Lookup a subtree in the certificate tree, using {@link lookup_subtree}.\n     * @param path The path to lookup.\n     * @returns The result of the lookup.\n     */\n    lookup_subtree(path) {\n        return lookup_subtree(path, this.cert.tree);\n    }\n    async verify() {\n        const rootHash = await reconstruct(this.cert.tree);\n        const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n        const sig = this.cert.signature;\n        const key = extractDER(derKey);\n        const msg = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(domain_sep('ic-state-root'), rootHash);\n        const lookupTime = lookupResultToBuffer(this.lookup_path(['time']));\n        if (!lookupTime) {\n            // Should never happen - time is always present in IC certificates\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateVerificationErrorCode('Certificate does not contain a time'));\n        }\n        // Certificate time verification checks\n        if (!this.#disableTimeVerification) {\n            const timeDiffMsecs = this.#agent?.getTimeDiffMsecs() ?? 0;\n            const maxAgeInMsec = this._maxAgeInMinutes * MINUTES_TO_MSEC;\n            const now = new Date();\n            const adjustedNow = now.getTime() + timeDiffMsecs;\n            const earliestCertificateTime = adjustedNow - maxAgeInMsec;\n            const latestCertificateTime = adjustedNow + DEFAULT_CERTIFICATE_MAX_MINUTES_IN_FUTURE * MINUTES_TO_MSEC;\n            const certTime = (0,_utils_leb_js__WEBPACK_IMPORTED_MODULE_4__.decodeTime)(lookupTime);\n            const isCertificateTimePast = certTime.getTime() < earliestCertificateTime;\n            const isCertificateTimeFuture = certTime.getTime() > latestCertificateTime;\n            if ((isCertificateTimePast || isCertificateTimeFuture) &&\n                this.#agent &&\n                !this.#agent.hasSyncedTime()) {\n                await this.#agent.syncTime(this._canisterId);\n                return await this.verify();\n            }\n            if (isCertificateTimePast) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateTimeErrorCode(this._maxAgeInMinutes, certTime, now, timeDiffMsecs, 'past'));\n            }\n            else if (isCertificateTimeFuture) {\n                if (this.#agent?.hasSyncedTime()) {\n                    // This case should never happen, and it signals a bug in either the replica or the local system.\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedErrorCode('System time has been synced with the IC network, but certificate is still too far in the future.'));\n                }\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateTimeErrorCode(5, certTime, now, timeDiffMsecs, 'future'));\n            }\n        }\n        try {\n            const sigVer = await this._blsVerify(key, sig, msg);\n            if (!sigVer) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateVerificationErrorCode('Invalid signature'));\n            }\n        }\n        catch (err) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateVerificationErrorCode('Signature verification failed', err));\n        }\n    }\n    async _checkDelegationAndGetKey(d) {\n        if (!d) {\n            return this._rootKey;\n        }\n        const cert = Certificate.createUnverified({\n            certificate: d.certificate,\n            rootKey: this._rootKey,\n            canisterId: this._canisterId,\n            blsVerify: this._blsVerify,\n            disableTimeVerification: this.#disableTimeVerification,\n            maxAgeInMinutes: DEFAULT_CERTIFICATE_DELEGATION_MAX_AGE_IN_MINUTES,\n            agent: this.#agent,\n        });\n        if (cert.cert.delegation) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateHasTooManyDelegationsErrorCode());\n        }\n        await cert.verify();\n        const subnetIdBytes = d.subnet_id;\n        const subnetId = _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromUint8Array(subnetIdBytes);\n        const canisterInRange = check_canister_ranges({\n            canisterId: this._canisterId,\n            subnetId,\n            tree: cert.cert.tree,\n        });\n        if (!canisterInRange) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.CertificateNotAuthorizedErrorCode(this._canisterId, subnetId));\n        }\n        const publicKeyLookup = lookupResultToBuffer(cert.lookup_path(['subnet', subnetIdBytes, 'public_key']));\n        if (!publicKeyLookup) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.TrustError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.MissingLookupValueErrorCode(`Could not find subnet key for subnet ID ${subnetId.toText()}`));\n        }\n        return publicKeyLookup;\n    }\n}\nconst DER_PREFIX = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)('308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100');\nconst KEY_LENGTH = 96;\nfunction extractDER(buf) {\n    const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n    if (buf.byteLength !== expectedLength) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerKeyLengthMismatchErrorCode(expectedLength, buf.byteLength));\n    }\n    const prefix = buf.slice(0, DER_PREFIX.byteLength);\n    if (!(0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_6__.uint8Equals)(prefix, DER_PREFIX)) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerPrefixMismatchErrorCode(DER_PREFIX, prefix));\n    }\n    return buf.slice(DER_PREFIX.byteLength);\n}\n/**\n * Utility function to constrain the type of a lookup result\n * @param result the result of a lookup\n * @returns {Uint8Array | undefined} the value if the lookup was found, `undefined` otherwise\n */\nfunction lookupResultToBuffer(result) {\n    if (result.status !== LookupPathStatus.Found) {\n        return undefined;\n    }\n    if (result.value instanceof Uint8Array) {\n        return result.value;\n    }\n    return undefined;\n}\n/**\n * @param t The hash tree to reconstruct\n */\nasync function reconstruct(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_7__.sha256)(domain_sep('ic-hashtree-empty'));\n        case NodeType.Pruned:\n            return t[1];\n        case NodeType.Leaf:\n            return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_7__.sha256)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(domain_sep('ic-hashtree-leaf'), t[1]));\n        case NodeType.Labeled:\n            return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_7__.sha256)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(domain_sep('ic-hashtree-labeled'), t[1], await reconstruct(t[2])));\n        case NodeType.Fork:\n            return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_7__.sha256)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(domain_sep('ic-hashtree-fork'), await reconstruct(t[1]), await reconstruct(t[2])));\n        default:\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UNREACHABLE_ERROR;\n    }\n}\n/**\n * Creates a domain separator for hashing by encoding the input string\n * with its length as a prefix.\n * @param s - The input string to encode.\n * @returns A Uint8Array containing the encoded domain separator.\n */\nfunction domain_sep(s) {\n    const len = new Uint8Array([s.length]);\n    const str = new TextEncoder().encode(s);\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(len, str);\n}\nfunction pathToLabel(path) {\n    return (typeof path[0] === 'string' ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(path[0]) : path[0]);\n}\nvar LookupPathStatus;\n(function (LookupPathStatus) {\n    LookupPathStatus[\"Unknown\"] = \"Unknown\";\n    LookupPathStatus[\"Absent\"] = \"Absent\";\n    LookupPathStatus[\"Found\"] = \"Found\";\n    LookupPathStatus[\"Error\"] = \"Error\";\n})(LookupPathStatus || (LookupPathStatus = {}));\nvar LookupSubtreeStatus;\n(function (LookupSubtreeStatus) {\n    LookupSubtreeStatus[\"Absent\"] = \"Absent\";\n    LookupSubtreeStatus[\"Unknown\"] = \"Unknown\";\n    LookupSubtreeStatus[\"Found\"] = \"Found\";\n})(LookupSubtreeStatus || (LookupSubtreeStatus = {}));\nvar LookupLabelStatus;\n(function (LookupLabelStatus) {\n    LookupLabelStatus[\"Absent\"] = \"Absent\";\n    LookupLabelStatus[\"Unknown\"] = \"Unknown\";\n    LookupLabelStatus[\"Found\"] = \"Found\";\n    LookupLabelStatus[\"Less\"] = \"Less\";\n    LookupLabelStatus[\"Greater\"] = \"Greater\";\n})(LookupLabelStatus || (LookupLabelStatus = {}));\n/**\n * Lookup a path in a tree. If the path is a subtree, use {@link lookup_subtree} instead.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {LookupResult} the result of the lookup\n */\nfunction lookup_path(path, tree) {\n    if (path.length === 0) {\n        switch (tree[0]) {\n            case NodeType.Empty: {\n                return {\n                    status: LookupPathStatus.Absent,\n                };\n            }\n            case NodeType.Leaf: {\n                if (!tree[1]) {\n                    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.HashTreeDecodeErrorCode('Invalid tree structure for leaf'));\n                }\n                if (tree[1] instanceof Uint8Array) {\n                    return {\n                        status: LookupPathStatus.Found,\n                        value: tree[1].slice(tree[1].byteOffset, tree[1].byteLength + tree[1].byteOffset),\n                    };\n                }\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UNREACHABLE_ERROR;\n            }\n            case NodeType.Pruned: {\n                return {\n                    status: LookupPathStatus.Unknown,\n                };\n            }\n            case NodeType.Labeled:\n            case NodeType.Fork: {\n                return {\n                    status: LookupPathStatus.Error,\n                };\n            }\n            default: {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UNREACHABLE_ERROR;\n            }\n        }\n    }\n    const label = pathToLabel(path);\n    const lookupResult = find_label(label, tree);\n    switch (lookupResult.status) {\n        case LookupLabelStatus.Found: {\n            return lookup_path(path.slice(1), lookupResult.value);\n        }\n        case LookupLabelStatus.Absent:\n        case LookupLabelStatus.Greater:\n        case LookupLabelStatus.Less: {\n            return {\n                status: LookupPathStatus.Absent,\n            };\n        }\n        case LookupLabelStatus.Unknown: {\n            return {\n                status: LookupPathStatus.Unknown,\n            };\n        }\n        default: {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UNREACHABLE_ERROR;\n        }\n    }\n}\n/**\n * Lookup a subtree in a tree.\n * @param path the path to look up\n * @param tree the tree to search\n * @returns {SubtreeLookupResult} the result of the lookup\n */\nfunction lookup_subtree(path, tree) {\n    if (path.length === 0) {\n        return {\n            status: LookupSubtreeStatus.Found,\n            value: tree,\n        };\n    }\n    const label = pathToLabel(path);\n    const lookupResult = find_label(label, tree);\n    switch (lookupResult.status) {\n        case LookupLabelStatus.Found: {\n            return lookup_subtree(path.slice(1), lookupResult.value);\n        }\n        case LookupLabelStatus.Unknown: {\n            return {\n                status: LookupSubtreeStatus.Unknown,\n            };\n        }\n        case LookupLabelStatus.Absent:\n        case LookupLabelStatus.Greater:\n        case LookupLabelStatus.Less: {\n            return {\n                status: LookupSubtreeStatus.Absent,\n            };\n        }\n        default: {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.UNREACHABLE_ERROR;\n        }\n    }\n}\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param {HashTree} t the tree to flatten\n * @returns {HashTree[]} the flattened tree\n */\nfunction flatten_forks(t) {\n    switch (t[0]) {\n        case NodeType.Empty:\n            return [];\n        case NodeType.Fork:\n            return flatten_forks(t[1]).concat(flatten_forks(t[2]));\n        default:\n            return [t];\n    }\n}\n/**\n * Find a label in a tree\n * @param label the label to find\n * @param tree the tree to search\n * @returns {LabelLookupResult} the result of the label lookup\n */\nfunction find_label(label, tree) {\n    switch (tree[0]) {\n        // if we have a labelled node, compare the node's label to the one we are\n        // looking for\n        case NodeType.Labeled:\n            // if the label we're searching for is greater than this node's label,\n            // we need to keep searching\n            if (isBufferGreaterThan(label, tree[1])) {\n                return {\n                    status: LookupLabelStatus.Greater,\n                };\n            }\n            // if the label we're searching for is equal this node's label, we can\n            // stop searching and return the found node\n            if ((0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_6__.uint8Equals)(label, tree[1])) {\n                return {\n                    status: LookupLabelStatus.Found,\n                    value: tree[2],\n                };\n            }\n            // if the label we're searching for is not greater than or equal to this\n            // node's label, then it's less than this node's label, and we can stop\n            // searching because we've looked too far\n            return {\n                status: LookupLabelStatus.Less,\n            };\n        // if we have a fork node, we need to search both sides, starting with the left\n        case NodeType.Fork: {\n            // search in the left node\n            const leftLookupResult = find_label(label, tree[1]);\n            switch (leftLookupResult.status) {\n                // if the label we're searching for is greater than the left node lookup,\n                // we need to search the right node\n                case LookupLabelStatus.Greater: {\n                    const rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we can stop searching and say that the label is provably Absent\n                    if (rightLookupResult.status === LookupLabelStatus.Less) {\n                        return {\n                            status: LookupLabelStatus.Absent,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the left node returns an uncertain result, we need to search the\n                // right node\n                case LookupLabelStatus.Unknown: {\n                    const rightLookupResult = find_label(label, tree[2]);\n                    // if the label we're searching for is less than the right node lookup,\n                    // then we also need to return an uncertain result\n                    if (rightLookupResult.status === LookupLabelStatus.Less) {\n                        return {\n                            status: LookupLabelStatus.Unknown,\n                        };\n                    }\n                    // if the label we're searching for is less than or equal to the right\n                    // node lookup, then we let the caller handle it\n                    return rightLookupResult;\n                }\n                // if the label we're searching for is not greater than the left node\n                // lookup, or the result is not uncertain, we stop searching and return\n                // whatever the result of the left node lookup was, which can be either\n                // Found or Absent\n                default: {\n                    return leftLookupResult;\n                }\n            }\n        }\n        // if we encounter a Pruned node, we can't know for certain if the label\n        // we're searching for is present or not\n        case NodeType.Pruned:\n            return {\n                status: LookupLabelStatus.Unknown,\n            };\n        // if the current node is Empty, or a Leaf, we can stop searching because\n        // we know for sure that the label we're searching for is not present\n        default:\n            return {\n                status: LookupLabelStatus.Absent,\n            };\n    }\n}\n/**\n * Check if a canister ID falls within the canister ranges of a given subnet\n * @param params the parameters with which to check the canister ranges\n * @param params.canisterId the canister ID to check\n * @param params.subnetId the subnet ID from which to check the canister ranges\n * @param params.tree the hash tree in which to lookup the subnet's canister ranges\n * @returns {boolean} `true` if the canister is in the range, `false` otherwise\n */\nfunction check_canister_ranges(params) {\n    const { canisterId, subnetId, tree } = params;\n    const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n    if (rangeLookup.status !== LookupPathStatus.Found) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.LookupErrorCode(`Could not find canister ranges for subnet ${subnetId.toText()}`, rangeLookup.status));\n    }\n    if (!(rangeLookup.value instanceof Uint8Array)) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.MalformedLookupFoundValueErrorCode(`Could not find canister ranges for subnet ${subnetId.toText()}`));\n    }\n    const ranges_arr = _cbor_js__WEBPACK_IMPORTED_MODULE_3__.decode(rangeLookup.value);\n    const ranges = ranges_arr.map(v => [\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromUint8Array(v[0]),\n        _dfinity_principal__WEBPACK_IMPORTED_MODULE_5__.Principal.fromUint8Array(v[1]),\n    ]);\n    const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n    return canisterInRange;\n}\n//# sourceMappingURL=certificate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/constants.js":
/*!******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/constants.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS: () => (/* binding */ DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n/* harmony export */   IC_REQUEST_AUTH_DELEGATION_DOMAIN_SEPARATOR: () => (/* binding */ IC_REQUEST_AUTH_DELEGATION_DOMAIN_SEPARATOR),\n/* harmony export */   IC_REQUEST_DOMAIN_SEPARATOR: () => (/* binding */ IC_REQUEST_DOMAIN_SEPARATOR),\n/* harmony export */   IC_RESPONSE_DOMAIN_SEPARATOR: () => (/* binding */ IC_RESPONSE_DOMAIN_SEPARATOR)\n/* harmony export */ });\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n/**\n * The `\\x0Aic-request` domain separator used in the signature of IC requests.\n */\nconst IC_REQUEST_DOMAIN_SEPARATOR = new TextEncoder().encode('\\x0Aic-request');\n/**\n * The `\\x0Bic-response` domain separator used in the signature of IC responses.\n */\nconst IC_RESPONSE_DOMAIN_SEPARATOR = new TextEncoder().encode('\\x0Bic-response');\n/**\n * The `\\x1Aic-request-auth-delegation` domain separator used in the signature of delegations.\n */\nconst IC_REQUEST_AUTH_DELEGATION_DOMAIN_SEPARATOR = new TextEncoder().encode('\\x1Aic-request-auth-delegation');\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9jb25zdGFudHMuanM/YzdkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWZhdWx0IGRlbHRhIGZvciBpbmdyZXNzIGV4cGlyeSBpcyA1IG1pbnV0ZXMuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JTkdSRVNTX0VYUElSWV9ERUxUQV9JTl9NU0VDUyA9IDUgKiA2MCAqIDEwMDA7XG4vKipcbiAqIFRoZSBgXFx4MEFpYy1yZXF1ZXN0YCBkb21haW4gc2VwYXJhdG9yIHVzZWQgaW4gdGhlIHNpZ25hdHVyZSBvZiBJQyByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IElDX1JFUVVFU1RfRE9NQUlOX1NFUEFSQVRPUiA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnXFx4MEFpYy1yZXF1ZXN0Jyk7XG4vKipcbiAqIFRoZSBgXFx4MEJpYy1yZXNwb25zZWAgZG9tYWluIHNlcGFyYXRvciB1c2VkIGluIHRoZSBzaWduYXR1cmUgb2YgSUMgcmVzcG9uc2VzLlxuICovXG5leHBvcnQgY29uc3QgSUNfUkVTUE9OU0VfRE9NQUlOX1NFUEFSQVRPUiA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnXFx4MEJpYy1yZXNwb25zZScpO1xuLyoqXG4gKiBUaGUgYFxceDFBaWMtcmVxdWVzdC1hdXRoLWRlbGVnYXRpb25gIGRvbWFpbiBzZXBhcmF0b3IgdXNlZCBpbiB0aGUgc2lnbmF0dXJlIG9mIGRlbGVnYXRpb25zLlxuICovXG5leHBvcnQgY29uc3QgSUNfUkVRVUVTVF9BVVRIX0RFTEVHQVRJT05fRE9NQUlOX1NFUEFSQVRPUiA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSgnXFx4MUFpYy1yZXF1ZXN0LWF1dGgtZGVsZWdhdGlvbicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/der.js":
/*!************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/der.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLS12_381_G2_OID: () => (/* binding */ BLS12_381_G2_OID),\n/* harmony export */   DER_COSE_OID: () => (/* binding */ DER_COSE_OID),\n/* harmony export */   ED25519_OID: () => (/* binding */ ED25519_OID),\n/* harmony export */   SECP256K1_OID: () => (/* binding */ SECP256K1_OID),\n/* harmony export */   decodeLen: () => (/* binding */ decodeLen),\n/* harmony export */   decodeLenBytes: () => (/* binding */ decodeLenBytes),\n/* harmony export */   encodeLen: () => (/* binding */ encodeLen),\n/* harmony export */   encodeLenBytes: () => (/* binding */ encodeLenBytes),\n/* harmony export */   unwrapDER: () => (/* binding */ unwrapDER),\n/* harmony export */   wrapDER: () => (/* binding */ wrapDER)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n\n\nconst encodeLenBytes = (len) => {\n    if (len <= 0x7f) {\n        return 1;\n    }\n    else if (len <= 0xff) {\n        return 2;\n    }\n    else if (len <= 0xffff) {\n        return 3;\n    }\n    else if (len <= 0xffffff) {\n        return 4;\n    }\n    else {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerEncodeErrorCode('Length too long (> 4 bytes)'));\n    }\n};\nconst encodeLen = (buf, offset, len) => {\n    if (len <= 0x7f) {\n        buf[offset] = len;\n        return 1;\n    }\n    else if (len <= 0xff) {\n        buf[offset] = 0x81;\n        buf[offset + 1] = len;\n        return 2;\n    }\n    else if (len <= 0xffff) {\n        buf[offset] = 0x82;\n        buf[offset + 1] = len >> 8;\n        buf[offset + 2] = len;\n        return 3;\n    }\n    else if (len <= 0xffffff) {\n        buf[offset] = 0x83;\n        buf[offset + 1] = len >> 16;\n        buf[offset + 2] = len >> 8;\n        buf[offset + 3] = len;\n        return 4;\n    }\n    else {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerEncodeErrorCode('Length too long (> 4 bytes)'));\n    }\n};\nconst decodeLenBytes = (buf, offset) => {\n    if (buf[offset] < 0x80)\n        return 1;\n    if (buf[offset] === 0x80)\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeErrorCode('Invalid length 0'));\n    if (buf[offset] === 0x81)\n        return 2;\n    if (buf[offset] === 0x82)\n        return 3;\n    if (buf[offset] === 0x83)\n        return 4;\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeErrorCode('Length too long (> 4 bytes)'));\n};\nconst decodeLen = (buf, offset) => {\n    const lenBytes = decodeLenBytes(buf, offset);\n    if (lenBytes === 1)\n        return buf[offset];\n    else if (lenBytes === 2)\n        return buf[offset + 1];\n    else if (lenBytes === 3)\n        return (buf[offset + 1] << 8) + buf[offset + 2];\n    else if (lenBytes === 4)\n        return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeErrorCode('Length too long (> 4 bytes)'));\n};\n/**\n * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE\n */\nconst DER_COSE_OID = Uint8Array.from([\n    ...[0x30, 0x0c], // SEQUENCE\n    ...[0x06, 0x0a], // OID with 10 bytes\n    ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01], // DER encoded COSE\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm\n */\nconst ED25519_OID = Uint8Array.from([\n    ...[0x30, 0x05], // SEQUENCE\n    ...[0x06, 0x03], // OID with 3 bytes\n    ...[0x2b, 0x65, 0x70], // id-Ed25519 OID\n]);\n/**\n * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm\n */\nconst SECP256K1_OID = Uint8Array.from([\n    ...[0x30, 0x10], // SEQUENCE\n    ...[0x06, 0x07], // OID with 7 bytes\n    ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01], // OID ECDSA\n    ...[0x06, 0x05], // OID with 5 bytes\n    ...[0x2b, 0x81, 0x04, 0x00, 0x0a], // OID secp256k1\n]);\nconst BLS12_381_G2_OID = Uint8Array.from([\n    ...[0x30, 0x1d], // SEQUENCE, length 29 bytes\n    // Algorithm OID\n    ...[0x06, 0x0d],\n    ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xdc, 0x7c, 0x05, 0x03, 0x01, 0x02, 0x01],\n    // Curve OID\n    ...[0x06, 0x0c],\n    ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0xdc, 0x7c, 0x05, 0x03, 0x02, 0x01],\n]);\n/**\n * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:\n * `SEQUENCE(oid, BITSTRING(payload))`\n * @param payload The payload to encode as the bit string\n * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with\n */\nfunction wrapDER(payload, oid) {\n    // The Bit String header needs to include the unused bit count byte in its length\n    const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);\n    const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;\n    let offset = 0;\n    const buf = new Uint8Array(1 + encodeLenBytes(len) + len);\n    // Sequence\n    buf[offset++] = 0x30;\n    // Sequence Length\n    offset += encodeLen(buf, offset, len);\n    // OID\n    buf.set(oid, offset);\n    offset += oid.byteLength;\n    // Bit String Header\n    buf[offset++] = 0x03;\n    offset += encodeLen(buf, offset, payload.byteLength + 1);\n    // 0 padding\n    buf[offset++] = 0x00;\n    buf.set(new Uint8Array(payload), offset);\n    return buf;\n}\n/**\n * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.\n *\n * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`\n * @param derEncoded The DER encoded and tagged data\n * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID\n * @returns The unwrapped payload\n */\nconst unwrapDER = (derEncoded, oid) => {\n    let offset = 0;\n    const expect = (n, msg) => {\n        if (buf[offset++] !== n) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeErrorCode(`Expected ${msg} at offset ${offset}`));\n        }\n    };\n    const buf = new Uint8Array(derEncoded);\n    expect(0x30, 'sequence');\n    offset += decodeLenBytes(buf, offset);\n    if (!(0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.uint8Equals)(buf.slice(offset, offset + oid.byteLength), oid)) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeErrorCode('Not the expected OID.'));\n    }\n    offset += oid.byteLength;\n    expect(0x03, 'bit string');\n    const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding\n    offset += decodeLenBytes(buf, offset);\n    expect(0x00, '0 padding');\n    const result = buf.slice(offset);\n    if (payloadLen !== result.length) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.DerDecodeLengthMismatchErrorCode(payloadLen, result.length));\n    }\n    return result;\n};\n//# sourceMappingURL=der.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/der.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js":
/*!***************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentError: () => (/* binding */ AgentError),\n/* harmony export */   CborDecodeErrorCode: () => (/* binding */ CborDecodeErrorCode),\n/* harmony export */   CborEncodeErrorCode: () => (/* binding */ CborEncodeErrorCode),\n/* harmony export */   CertificateHasTooManyDelegationsErrorCode: () => (/* binding */ CertificateHasTooManyDelegationsErrorCode),\n/* harmony export */   CertificateNotAuthorizedErrorCode: () => (/* binding */ CertificateNotAuthorizedErrorCode),\n/* harmony export */   CertificateOutdatedErrorCode: () => (/* binding */ CertificateOutdatedErrorCode),\n/* harmony export */   CertificateTimeErrorCode: () => (/* binding */ CertificateTimeErrorCode),\n/* harmony export */   CertificateVerificationErrorCode: () => (/* binding */ CertificateVerificationErrorCode),\n/* harmony export */   CertifiedRejectErrorCode: () => (/* binding */ CertifiedRejectErrorCode),\n/* harmony export */   CreateHttpAgentErrorCode: () => (/* binding */ CreateHttpAgentErrorCode),\n/* harmony export */   DerDecodeErrorCode: () => (/* binding */ DerDecodeErrorCode),\n/* harmony export */   DerDecodeLengthMismatchErrorCode: () => (/* binding */ DerDecodeLengthMismatchErrorCode),\n/* harmony export */   DerEncodeErrorCode: () => (/* binding */ DerEncodeErrorCode),\n/* harmony export */   DerKeyLengthMismatchErrorCode: () => (/* binding */ DerKeyLengthMismatchErrorCode),\n/* harmony export */   DerPrefixMismatchErrorCode: () => (/* binding */ DerPrefixMismatchErrorCode),\n/* harmony export */   ErrorKindEnum: () => (/* binding */ ErrorKindEnum),\n/* harmony export */   ExpiryJsonDeserializeErrorCode: () => (/* binding */ ExpiryJsonDeserializeErrorCode),\n/* harmony export */   ExternalError: () => (/* binding */ ExternalError),\n/* harmony export */   HashTreeDecodeErrorCode: () => (/* binding */ HashTreeDecodeErrorCode),\n/* harmony export */   HashValueErrorCode: () => (/* binding */ HashValueErrorCode),\n/* harmony export */   HexDecodeErrorCode: () => (/* binding */ HexDecodeErrorCode),\n/* harmony export */   HttpDefaultFetchErrorCode: () => (/* binding */ HttpDefaultFetchErrorCode),\n/* harmony export */   HttpErrorCode: () => (/* binding */ HttpErrorCode),\n/* harmony export */   HttpFetchErrorCode: () => (/* binding */ HttpFetchErrorCode),\n/* harmony export */   HttpV3ApiNotSupportedErrorCode: () => (/* binding */ HttpV3ApiNotSupportedErrorCode),\n/* harmony export */   IdentityInvalidErrorCode: () => (/* binding */ IdentityInvalidErrorCode),\n/* harmony export */   IngressExpiryInvalidErrorCode: () => (/* binding */ IngressExpiryInvalidErrorCode),\n/* harmony export */   InputError: () => (/* binding */ InputError),\n/* harmony export */   InvalidReadStateRequestErrorCode: () => (/* binding */ InvalidReadStateRequestErrorCode),\n/* harmony export */   LimitError: () => (/* binding */ LimitError),\n/* harmony export */   LookupErrorCode: () => (/* binding */ LookupErrorCode),\n/* harmony export */   MalformedLookupFoundValueErrorCode: () => (/* binding */ MalformedLookupFoundValueErrorCode),\n/* harmony export */   MalformedPublicKeyErrorCode: () => (/* binding */ MalformedPublicKeyErrorCode),\n/* harmony export */   MalformedSignatureErrorCode: () => (/* binding */ MalformedSignatureErrorCode),\n/* harmony export */   MissingCanisterIdErrorCode: () => (/* binding */ MissingCanisterIdErrorCode),\n/* harmony export */   MissingLookupValueErrorCode: () => (/* binding */ MissingLookupValueErrorCode),\n/* harmony export */   MissingRootKeyErrorCode: () => (/* binding */ MissingRootKeyErrorCode),\n/* harmony export */   MissingSignatureErrorCode: () => (/* binding */ MissingSignatureErrorCode),\n/* harmony export */   ProtocolError: () => (/* binding */ ProtocolError),\n/* harmony export */   QuerySignatureVerificationFailedErrorCode: () => (/* binding */ QuerySignatureVerificationFailedErrorCode),\n/* harmony export */   RejectError: () => (/* binding */ RejectError),\n/* harmony export */   RequestStatusDoneNoReplyErrorCode: () => (/* binding */ RequestStatusDoneNoReplyErrorCode),\n/* harmony export */   TimeoutWaitingForResponseErrorCode: () => (/* binding */ TimeoutWaitingForResponseErrorCode),\n/* harmony export */   TransportError: () => (/* binding */ TransportError),\n/* harmony export */   TrustError: () => (/* binding */ TrustError),\n/* harmony export */   UNREACHABLE_ERROR: () => (/* binding */ UNREACHABLE_ERROR),\n/* harmony export */   UncertifiedRejectErrorCode: () => (/* binding */ UncertifiedRejectErrorCode),\n/* harmony export */   UncertifiedRejectUpdateErrorCode: () => (/* binding */ UncertifiedRejectUpdateErrorCode),\n/* harmony export */   UnexpectedErrorCode: () => (/* binding */ UnexpectedErrorCode),\n/* harmony export */   UnknownError: () => (/* binding */ UnknownError)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\nvar ErrorKindEnum;\n(function (ErrorKindEnum) {\n    ErrorKindEnum[\"Trust\"] = \"Trust\";\n    ErrorKindEnum[\"Protocol\"] = \"Protocol\";\n    ErrorKindEnum[\"Reject\"] = \"Reject\";\n    ErrorKindEnum[\"Transport\"] = \"Transport\";\n    ErrorKindEnum[\"External\"] = \"External\";\n    ErrorKindEnum[\"Limit\"] = \"Limit\";\n    ErrorKindEnum[\"Input\"] = \"Input\";\n    ErrorKindEnum[\"Unknown\"] = \"Unknown\";\n})(ErrorKindEnum || (ErrorKindEnum = {}));\nclass ErrorCode {\n    constructor(isCertified = false) {\n        this.isCertified = isCertified;\n    }\n    toString() {\n        let errorMessage = this.toErrorMessage();\n        if (this.requestContext) {\n            errorMessage +=\n                `\\nRequest context:\\n` +\n                    `  Request ID (hex): ${this.requestContext.requestId ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestContext.requestId) : 'undefined'}\\n` +\n                    `  Sender pubkey (hex): ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestContext.senderPubKey)}\\n` +\n                    `  Sender signature (hex): ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestContext.senderSignature)}\\n` +\n                    `  Ingress expiry: ${this.requestContext.ingressExpiry.toString()}`;\n        }\n        if (this.callContext) {\n            errorMessage +=\n                `\\nCall context:\\n` +\n                    `  Canister ID: ${this.callContext.canisterId.toText()}\\n` +\n                    `  Method name: ${this.callContext.methodName}\\n` +\n                    `  HTTP details: ${JSON.stringify(this.callContext.httpDetails, null, 2)}`;\n        }\n        return errorMessage;\n    }\n}\n/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * To know if the error is certified, use the `isCertified` getter.\n */\nclass AgentError extends Error {\n    get code() {\n        return this.cause.code;\n    }\n    set code(code) {\n        this.cause.code = code;\n    }\n    get kind() {\n        return this.cause.kind;\n    }\n    set kind(kind) {\n        this.cause.kind = kind;\n    }\n    /**\n     * Reads the `isCertified` property of the underlying error code.\n     * @returns `true` if the error is certified, `false` otherwise.\n     */\n    get isCertified() {\n        return this.code.isCertified;\n    }\n    constructor(code, kind) {\n        super(code.toString());\n        this.name = 'AgentError';\n        this.cause = { code, kind };\n        Object.setPrototypeOf(this, AgentError.prototype);\n    }\n    hasCode(code) {\n        return this.code instanceof code;\n    }\n    toString() {\n        return `${this.name} (${this.kind}): ${this.message}`;\n    }\n}\nclass ErrorKind extends AgentError {\n    static fromCode(code) {\n        return new this(code);\n    }\n}\nclass TrustError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Trust);\n        this.name = 'TrustError';\n        Object.setPrototypeOf(this, TrustError.prototype);\n    }\n}\nclass ProtocolError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Protocol);\n        this.name = 'ProtocolError';\n        Object.setPrototypeOf(this, ProtocolError.prototype);\n    }\n}\nclass RejectError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Reject);\n        this.name = 'RejectError';\n        Object.setPrototypeOf(this, RejectError.prototype);\n    }\n}\nclass TransportError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Transport);\n        this.name = 'TransportError';\n        Object.setPrototypeOf(this, TransportError.prototype);\n    }\n}\nclass ExternalError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.External);\n        this.name = 'ExternalError';\n        Object.setPrototypeOf(this, ExternalError.prototype);\n    }\n}\nclass LimitError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Limit);\n        this.name = 'LimitError';\n        Object.setPrototypeOf(this, LimitError.prototype);\n    }\n}\nclass InputError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Input);\n        this.name = 'InputError';\n        Object.setPrototypeOf(this, InputError.prototype);\n    }\n}\nclass UnknownError extends ErrorKind {\n    constructor(code) {\n        super(code, ErrorKindEnum.Unknown);\n        this.name = 'UnknownError';\n        Object.setPrototypeOf(this, UnknownError.prototype);\n    }\n}\nclass CertificateVerificationErrorCode extends ErrorCode {\n    constructor(reason, error) {\n        super();\n        this.reason = reason;\n        this.error = error;\n        this.name = 'CertificateVerificationErrorCode';\n        Object.setPrototypeOf(this, CertificateVerificationErrorCode.prototype);\n    }\n    toErrorMessage() {\n        let errorMessage = this.reason;\n        if (this.error) {\n            errorMessage += `: ${formatUnknownError(this.error)}`;\n        }\n        return `Certificate verification error: \"${errorMessage}\"`;\n    }\n}\nclass CertificateTimeErrorCode extends ErrorCode {\n    constructor(maxAgeInMinutes, certificateTime, currentTime, timeDiffMsecs, ageType) {\n        super();\n        this.maxAgeInMinutes = maxAgeInMinutes;\n        this.certificateTime = certificateTime;\n        this.currentTime = currentTime;\n        this.timeDiffMsecs = timeDiffMsecs;\n        this.ageType = ageType;\n        this.name = 'CertificateTimeErrorCode';\n        Object.setPrototypeOf(this, CertificateTimeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Certificate is signed more than ${this.maxAgeInMinutes} minutes in the ${this.ageType}. Certificate time: ${this.certificateTime.toISOString()} Current time: ${this.currentTime.toISOString()} Clock drift: ${this.timeDiffMsecs}ms`;\n    }\n}\nclass CertificateHasTooManyDelegationsErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'CertificateHasTooManyDelegationsErrorCode';\n        Object.setPrototypeOf(this, CertificateHasTooManyDelegationsErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return 'Certificate has too many delegations';\n    }\n}\nclass CertificateNotAuthorizedErrorCode extends ErrorCode {\n    constructor(canisterId, subnetId) {\n        super();\n        this.canisterId = canisterId;\n        this.subnetId = subnetId;\n        this.name = 'CertificateNotAuthorizedErrorCode';\n        Object.setPrototypeOf(this, CertificateNotAuthorizedErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `The certificate contains a delegation that does not include the canister ${this.canisterId.toText()} in the canister_ranges field. Subnet ID: ${this.subnetId.toText()}`;\n    }\n}\nclass LookupErrorCode extends ErrorCode {\n    constructor(message, lookupStatus) {\n        super();\n        this.message = message;\n        this.lookupStatus = lookupStatus;\n        this.name = 'LookupErrorCode';\n        Object.setPrototypeOf(this, LookupErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `${this.message}. Lookup status: ${this.lookupStatus}`;\n    }\n}\nclass MalformedLookupFoundValueErrorCode extends ErrorCode {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'MalformedLookupFoundValueErrorCode';\n        Object.setPrototypeOf(this, MalformedLookupFoundValueErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return this.message;\n    }\n}\nclass MissingLookupValueErrorCode extends ErrorCode {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'MissingLookupValueErrorCode';\n        Object.setPrototypeOf(this, MissingLookupValueErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return this.message;\n    }\n}\nclass DerKeyLengthMismatchErrorCode extends ErrorCode {\n    constructor(expectedLength, actualLength) {\n        super();\n        this.expectedLength = expectedLength;\n        this.actualLength = actualLength;\n        this.name = 'DerKeyLengthMismatchErrorCode';\n        Object.setPrototypeOf(this, DerKeyLengthMismatchErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `BLS DER-encoded public key must be ${this.expectedLength} bytes long, but is ${this.actualLength} bytes long`;\n    }\n}\nclass DerPrefixMismatchErrorCode extends ErrorCode {\n    constructor(expectedPrefix, actualPrefix) {\n        super();\n        this.expectedPrefix = expectedPrefix;\n        this.actualPrefix = actualPrefix;\n        this.name = 'DerPrefixMismatchErrorCode';\n        Object.setPrototypeOf(this, DerPrefixMismatchErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `BLS DER-encoded public key is invalid. Expected the following prefix: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.expectedPrefix)}, but got ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.actualPrefix)}`;\n    }\n}\nclass DerDecodeLengthMismatchErrorCode extends ErrorCode {\n    constructor(expectedLength, actualLength) {\n        super();\n        this.expectedLength = expectedLength;\n        this.actualLength = actualLength;\n        this.name = 'DerDecodeLengthMismatchErrorCode';\n        Object.setPrototypeOf(this, DerDecodeLengthMismatchErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `DER payload mismatch: Expected length ${this.expectedLength}, actual length: ${this.actualLength}`;\n    }\n}\nclass DerDecodeErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'DerDecodeErrorCode';\n        Object.setPrototypeOf(this, DerDecodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to decode DER: ${this.error}`;\n    }\n}\nclass DerEncodeErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'DerEncodeErrorCode';\n        Object.setPrototypeOf(this, DerEncodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to encode DER: ${this.error}`;\n    }\n}\nclass CborDecodeErrorCode extends ErrorCode {\n    constructor(error, input) {\n        super();\n        this.error = error;\n        this.input = input;\n        this.name = 'CborDecodeErrorCode';\n        Object.setPrototypeOf(this, CborDecodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to decode CBOR: ${formatUnknownError(this.error)}, input: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.input)}`;\n    }\n}\nclass CborEncodeErrorCode extends ErrorCode {\n    constructor(error, value) {\n        super();\n        this.error = error;\n        this.value = value;\n        this.name = 'CborEncodeErrorCode';\n        Object.setPrototypeOf(this, CborEncodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to encode CBOR: ${formatUnknownError(this.error)}, input: ${this.value}`;\n    }\n}\nclass HexDecodeErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'HexDecodeErrorCode';\n        Object.setPrototypeOf(this, HexDecodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to decode hex: ${this.error}`;\n    }\n}\nclass TimeoutWaitingForResponseErrorCode extends ErrorCode {\n    constructor(message, requestId, status) {\n        super();\n        this.message = message;\n        this.requestId = requestId;\n        this.status = status;\n        this.name = 'TimeoutWaitingForResponseErrorCode';\n        Object.setPrototypeOf(this, TimeoutWaitingForResponseErrorCode.prototype);\n    }\n    toErrorMessage() {\n        let errorMessage = `${this.message}\\n`;\n        if (this.requestId) {\n            errorMessage += `  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n`;\n        }\n        if (this.status) {\n            errorMessage += `  Request status: ${this.status}\\n`;\n        }\n        return errorMessage;\n    }\n}\nclass CertificateOutdatedErrorCode extends ErrorCode {\n    constructor(maxIngressExpiryInMinutes, requestId, retryTimes) {\n        super();\n        this.maxIngressExpiryInMinutes = maxIngressExpiryInMinutes;\n        this.requestId = requestId;\n        this.retryTimes = retryTimes;\n        this.name = 'CertificateOutdatedErrorCode';\n        Object.setPrototypeOf(this, CertificateOutdatedErrorCode.prototype);\n    }\n    toErrorMessage() {\n        let errorMessage = `Certificate is stale (over ${this.maxIngressExpiryInMinutes} minutes). Is the computer's clock synchronized?\\n  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n`;\n        if (this.retryTimes !== undefined) {\n            errorMessage += `  Retried ${this.retryTimes} times.`;\n        }\n        return errorMessage;\n    }\n}\nclass CertifiedRejectErrorCode extends ErrorCode {\n    constructor(requestId, rejectCode, rejectMessage, rejectErrorCode) {\n        super(true);\n        this.requestId = requestId;\n        this.rejectCode = rejectCode;\n        this.rejectMessage = rejectMessage;\n        this.rejectErrorCode = rejectErrorCode;\n        this.name = 'CertifiedRejectErrorCode';\n        Object.setPrototypeOf(this, CertifiedRejectErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return (`The replica returned a rejection error:\\n` +\n            `  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n` +\n            `  Reject code: ${this.rejectCode}\\n` +\n            `  Reject text: ${this.rejectMessage}\\n` +\n            `  Error code: ${this.rejectErrorCode}\\n`);\n    }\n}\nclass UncertifiedRejectErrorCode extends ErrorCode {\n    constructor(requestId, rejectCode, rejectMessage, rejectErrorCode, signatures) {\n        super();\n        this.requestId = requestId;\n        this.rejectCode = rejectCode;\n        this.rejectMessage = rejectMessage;\n        this.rejectErrorCode = rejectErrorCode;\n        this.signatures = signatures;\n        this.name = 'UncertifiedRejectErrorCode';\n        Object.setPrototypeOf(this, UncertifiedRejectErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return (`The replica returned a rejection error:\\n` +\n            `  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n` +\n            `  Reject code: ${this.rejectCode}\\n` +\n            `  Reject text: ${this.rejectMessage}\\n` +\n            `  Error code: ${this.rejectErrorCode}\\n`);\n    }\n}\nclass UncertifiedRejectUpdateErrorCode extends ErrorCode {\n    constructor(requestId, rejectCode, rejectMessage, rejectErrorCode) {\n        super();\n        this.requestId = requestId;\n        this.rejectCode = rejectCode;\n        this.rejectMessage = rejectMessage;\n        this.rejectErrorCode = rejectErrorCode;\n        this.name = 'UncertifiedRejectUpdateErrorCode';\n        Object.setPrototypeOf(this, UncertifiedRejectUpdateErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return (`The replica returned a rejection error:\\n` +\n            `  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n` +\n            `  Reject code: ${this.rejectCode}\\n` +\n            `  Reject text: ${this.rejectMessage}\\n` +\n            `  Error code: ${this.rejectErrorCode}\\n`);\n    }\n}\nclass RequestStatusDoneNoReplyErrorCode extends ErrorCode {\n    constructor(requestId) {\n        super();\n        this.requestId = requestId;\n        this.name = 'RequestStatusDoneNoReplyErrorCode';\n        Object.setPrototypeOf(this, RequestStatusDoneNoReplyErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return (`Call was marked as done but we never saw the reply:\\n` +\n            `  Request ID: ${(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.requestId)}\\n`);\n    }\n}\nclass MissingRootKeyErrorCode extends ErrorCode {\n    constructor(shouldFetchRootKey) {\n        super();\n        this.shouldFetchRootKey = shouldFetchRootKey;\n        this.name = 'MissingRootKeyErrorCode';\n        Object.setPrototypeOf(this, MissingRootKeyErrorCode.prototype);\n    }\n    toErrorMessage() {\n        if (this.shouldFetchRootKey === undefined) {\n            return 'Agent is missing root key';\n        }\n        return `Agent is missing root key and the shouldFetchRootKey value is set to ${this.shouldFetchRootKey}. The root key should only be unknown if you are in local development. Otherwise you should avoid fetching and use the default IC Root Key or the known root key of your environment.`;\n    }\n}\nclass HashValueErrorCode extends ErrorCode {\n    constructor(value) {\n        super();\n        this.value = value;\n        this.name = 'HashValueErrorCode';\n        Object.setPrototypeOf(this, HashValueErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Attempt to hash a value of unsupported type: ${this.value}`;\n    }\n}\nclass HttpDefaultFetchErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'HttpDefaultFetchErrorCode';\n        Object.setPrototypeOf(this, HttpDefaultFetchErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return this.error;\n    }\n}\nclass IdentityInvalidErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'IdentityInvalidErrorCode';\n        Object.setPrototypeOf(this, IdentityInvalidErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return \"This identity has expired due this application's security policy. Please refresh your authentication.\";\n    }\n}\nclass IngressExpiryInvalidErrorCode extends ErrorCode {\n    constructor(message, providedIngressExpiryInMinutes) {\n        super();\n        this.message = message;\n        this.providedIngressExpiryInMinutes = providedIngressExpiryInMinutes;\n        this.name = 'IngressExpiryInvalidErrorCode';\n        Object.setPrototypeOf(this, IngressExpiryInvalidErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `${this.message}. Provided ingress expiry time is ${this.providedIngressExpiryInMinutes} minutes.`;\n    }\n}\nclass CreateHttpAgentErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'CreateHttpAgentErrorCode';\n        Object.setPrototypeOf(this, CreateHttpAgentErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return 'Failed to create agent from provided agent';\n    }\n}\nclass MalformedSignatureErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'MalformedSignatureErrorCode';\n        Object.setPrototypeOf(this, MalformedSignatureErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Query response contained a malformed signature: ${this.error}`;\n    }\n}\nclass MissingSignatureErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'MissingSignatureErrorCode';\n        Object.setPrototypeOf(this, MissingSignatureErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return 'Query response did not contain any node signatures';\n    }\n}\nclass MalformedPublicKeyErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'MalformedPublicKeyErrorCode';\n        Object.setPrototypeOf(this, MalformedPublicKeyErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return 'Read state response contained a malformed public key';\n    }\n}\nclass QuerySignatureVerificationFailedErrorCode extends ErrorCode {\n    constructor(nodeId) {\n        super();\n        this.nodeId = nodeId;\n        this.name = 'QuerySignatureVerificationFailedErrorCode';\n        Object.setPrototypeOf(this, QuerySignatureVerificationFailedErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Query signature verification failed. Node ID: ${this.nodeId}`;\n    }\n}\nclass UnexpectedErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'UnexpectedErrorCode';\n        Object.setPrototypeOf(this, UnexpectedErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Unexpected error: ${formatUnknownError(this.error)}`;\n    }\n}\nclass HashTreeDecodeErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'HashTreeDecodeErrorCode';\n        Object.setPrototypeOf(this, HashTreeDecodeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to decode certificate: ${this.error}`;\n    }\n}\nclass HttpErrorCode extends ErrorCode {\n    constructor(status, statusText, headers, bodyText) {\n        super();\n        this.status = status;\n        this.statusText = statusText;\n        this.headers = headers;\n        this.bodyText = bodyText;\n        this.name = 'HttpErrorCode';\n        Object.setPrototypeOf(this, HttpErrorCode.prototype);\n    }\n    toErrorMessage() {\n        let errorMessage = 'HTTP request failed:\\n' +\n            `  Status: ${this.status} (${this.statusText})\\n` +\n            `  Headers: ${JSON.stringify(this.headers)}\\n`;\n        if (this.bodyText) {\n            errorMessage += `  Body: ${this.bodyText}\\n`;\n        }\n        return errorMessage;\n    }\n}\nclass HttpV3ApiNotSupportedErrorCode extends ErrorCode {\n    constructor() {\n        super();\n        this.name = 'HttpV3ApiNotSupportedErrorCode';\n        Object.setPrototypeOf(this, HttpV3ApiNotSupportedErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return 'HTTP request failed: v3 API is not supported';\n    }\n}\nclass HttpFetchErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'HttpFetchErrorCode';\n        Object.setPrototypeOf(this, HttpFetchErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to fetch HTTP request: ${formatUnknownError(this.error)}`;\n    }\n}\nclass MissingCanisterIdErrorCode extends ErrorCode {\n    constructor(receivedCanisterId) {\n        super();\n        this.receivedCanisterId = receivedCanisterId;\n        this.name = 'MissingCanisterIdErrorCode';\n        Object.setPrototypeOf(this, MissingCanisterIdErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Canister ID is required, but received ${typeof this.receivedCanisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`;\n    }\n}\nclass InvalidReadStateRequestErrorCode extends ErrorCode {\n    constructor(request) {\n        super();\n        this.request = request;\n        this.name = 'InvalidReadStateRequestErrorCode';\n        Object.setPrototypeOf(this, InvalidReadStateRequestErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Invalid read state request: ${this.request}`;\n    }\n}\nclass ExpiryJsonDeserializeErrorCode extends ErrorCode {\n    constructor(error) {\n        super();\n        this.error = error;\n        this.name = 'ExpiryJsonDeserializeErrorCode';\n        Object.setPrototypeOf(this, ExpiryJsonDeserializeErrorCode.prototype);\n    }\n    toErrorMessage() {\n        return `Failed to deserialize expiry: ${this.error}`;\n    }\n}\nfunction formatUnknownError(error) {\n    if (error instanceof Error) {\n        return error.stack ?? error.message;\n    }\n    try {\n        return JSON.stringify(error);\n    }\n    catch {\n        return String(error);\n    }\n}\n/**\n * Special error used to indicate that a code path is unreachable.\n *\n * For internal use only.\n */\nconst UNREACHABLE_ERROR = new Error('unreachable');\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/observable.js":
/*!*******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/observable.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Observable: () => (/* binding */ Observable),\n/* harmony export */   ObservableLog: () => (/* binding */ ObservableLog)\n/* harmony export */ });\nclass Observable {\n    constructor() {\n        this.observers = [];\n    }\n    subscribe(func) {\n        this.observers.push(func);\n    }\n    unsubscribe(func) {\n        this.observers = this.observers.filter(observer => observer !== func);\n    }\n    notify(data, ...rest) {\n        this.observers.forEach(observer => observer(data, ...rest));\n    }\n}\nclass ObservableLog extends Observable {\n    constructor() {\n        super();\n    }\n    print(message, ...rest) {\n        this.notify({ message, level: 'info' }, ...rest);\n    }\n    warn(message, ...rest) {\n        this.notify({ message, level: 'warn' }, ...rest);\n    }\n    error(message, error, ...rest) {\n        this.notify({ message, level: 'error', error }, ...rest);\n    }\n}\n//# sourceMappingURL=observable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL29ic2VydmFibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBLHNCQUFzQixnQ0FBZ0M7QUFDdEQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS9vYnNlcnZhYmxlLmpzP2I3ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE9ic2VydmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgIH1cbiAgICBzdWJzY3JpYmUoZnVuYykge1xuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKGZ1bmMpO1xuICAgIH1cbiAgICB1bnN1YnNjcmliZShmdW5jKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnMuZmlsdGVyKG9ic2VydmVyID0+IG9ic2VydmVyICE9PSBmdW5jKTtcbiAgICB9XG4gICAgbm90aWZ5KGRhdGEsIC4uLnJlc3QpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiBvYnNlcnZlcihkYXRhLCAuLi5yZXN0KSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVMb2cgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgcHJpbnQobWVzc2FnZSwgLi4ucmVzdCkge1xuICAgICAgICB0aGlzLm5vdGlmeSh7IG1lc3NhZ2UsIGxldmVsOiAnaW5mbycgfSwgLi4ucmVzdCk7XG4gICAgfVxuICAgIHdhcm4obWVzc2FnZSwgLi4ucmVzdCkge1xuICAgICAgICB0aGlzLm5vdGlmeSh7IG1lc3NhZ2UsIGxldmVsOiAnd2FybicgfSwgLi4ucmVzdCk7XG4gICAgfVxuICAgIGVycm9yKG1lc3NhZ2UsIGVycm9yLCAuLi5yZXN0KSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHsgbWVzc2FnZSwgbGV2ZWw6ICdlcnJvcicsIGVycm9yIH0sIC4uLnJlc3QpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/observable.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/backoff.js":
/*!************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/backoff.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExponentialBackoff: () => (/* binding */ ExponentialBackoff),\n/* harmony export */   exponentialBackoff: () => (/* binding */ exponentialBackoff)\n/* harmony export */ });\nconst RANDOMIZATION_FACTOR = 0.5;\nconst MULTIPLIER = 1.5;\nconst INITIAL_INTERVAL_MSEC = 500;\nconst MAX_INTERVAL_MSEC = 60_000;\nconst MAX_ELAPSED_TIME_MSEC = 900_000;\nconst MAX_ITERATIONS = 10;\n/**\n * Exponential backoff strategy.\n */\nclass ExponentialBackoff {\n    #currentInterval;\n    #randomizationFactor;\n    #multiplier;\n    #maxInterval;\n    #startTime;\n    #maxElapsedTime;\n    #maxIterations;\n    #date;\n    #count = 0;\n    static { this.default = {\n        initialInterval: INITIAL_INTERVAL_MSEC,\n        randomizationFactor: RANDOMIZATION_FACTOR,\n        multiplier: MULTIPLIER,\n        maxInterval: MAX_INTERVAL_MSEC,\n        // 1 minute\n        maxElapsedTime: MAX_ELAPSED_TIME_MSEC,\n        maxIterations: MAX_ITERATIONS,\n        date: Date,\n    }; }\n    constructor(options = ExponentialBackoff.default) {\n        const { initialInterval = INITIAL_INTERVAL_MSEC, randomizationFactor = RANDOMIZATION_FACTOR, multiplier = MULTIPLIER, maxInterval = MAX_INTERVAL_MSEC, maxElapsedTime = MAX_ELAPSED_TIME_MSEC, maxIterations = MAX_ITERATIONS, date = Date, } = options;\n        this.#currentInterval = initialInterval;\n        this.#randomizationFactor = randomizationFactor;\n        this.#multiplier = multiplier;\n        this.#maxInterval = maxInterval;\n        this.#date = date;\n        this.#startTime = date.now();\n        this.#maxElapsedTime = maxElapsedTime;\n        this.#maxIterations = maxIterations;\n    }\n    get ellapsedTimeInMsec() {\n        return this.#date.now() - this.#startTime;\n    }\n    get currentInterval() {\n        return this.#currentInterval;\n    }\n    get count() {\n        return this.#count;\n    }\n    get randomValueFromInterval() {\n        const delta = this.#randomizationFactor * this.#currentInterval;\n        const min = this.#currentInterval - delta;\n        const max = this.#currentInterval + delta;\n        return Math.random() * (max - min) + min;\n    }\n    incrementCurrentInterval() {\n        this.#currentInterval = Math.min(this.#currentInterval * this.#multiplier, this.#maxInterval);\n        this.#count++;\n        return this.#currentInterval;\n    }\n    next() {\n        if (this.ellapsedTimeInMsec >= this.#maxElapsedTime || this.#count >= this.#maxIterations) {\n            return null;\n        }\n        else {\n            this.incrementCurrentInterval();\n            return this.randomValueFromInterval;\n        }\n    }\n}\n/**\n * Utility function to create an exponential backoff iterator.\n * @param options - for the exponential backoff\n * @returns an iterator that yields the next delay in the exponential backoff\n * @yields the next delay in the exponential backoff\n */\nfunction* exponentialBackoff(options = ExponentialBackoff.default) {\n    const backoff = new ExponentialBackoff(options);\n    let next = backoff.next();\n    while (next) {\n        yield next;\n        next = backoff.next();\n    }\n}\n//# sourceMappingURL=backoff.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3BvbGxpbmcvYmFja29mZi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNPQUFzTztBQUN0UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3BvbGxpbmcvYmFja29mZi5qcz83ZWFkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJBTkRPTUlaQVRJT05fRkFDVE9SID0gMC41O1xuY29uc3QgTVVMVElQTElFUiA9IDEuNTtcbmNvbnN0IElOSVRJQUxfSU5URVJWQUxfTVNFQyA9IDUwMDtcbmNvbnN0IE1BWF9JTlRFUlZBTF9NU0VDID0gNjBfMDAwO1xuY29uc3QgTUFYX0VMQVBTRURfVElNRV9NU0VDID0gOTAwXzAwMDtcbmNvbnN0IE1BWF9JVEVSQVRJT05TID0gMTA7XG4vKipcbiAqIEV4cG9uZW50aWFsIGJhY2tvZmYgc3RyYXRlZ3kuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBvbmVudGlhbEJhY2tvZmYge1xuICAgICNjdXJyZW50SW50ZXJ2YWw7XG4gICAgI3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gICAgI211bHRpcGxpZXI7XG4gICAgI21heEludGVydmFsO1xuICAgICNzdGFydFRpbWU7XG4gICAgI21heEVsYXBzZWRUaW1lO1xuICAgICNtYXhJdGVyYXRpb25zO1xuICAgICNkYXRlO1xuICAgICNjb3VudCA9IDA7XG4gICAgc3RhdGljIHsgdGhpcy5kZWZhdWx0ID0ge1xuICAgICAgICBpbml0aWFsSW50ZXJ2YWw6IElOSVRJQUxfSU5URVJWQUxfTVNFQyxcbiAgICAgICAgcmFuZG9taXphdGlvbkZhY3RvcjogUkFORE9NSVpBVElPTl9GQUNUT1IsXG4gICAgICAgIG11bHRpcGxpZXI6IE1VTFRJUExJRVIsXG4gICAgICAgIG1heEludGVydmFsOiBNQVhfSU5URVJWQUxfTVNFQyxcbiAgICAgICAgLy8gMSBtaW51dGVcbiAgICAgICAgbWF4RWxhcHNlZFRpbWU6IE1BWF9FTEFQU0VEX1RJTUVfTVNFQyxcbiAgICAgICAgbWF4SXRlcmF0aW9uczogTUFYX0lURVJBVElPTlMsXG4gICAgICAgIGRhdGU6IERhdGUsXG4gICAgfTsgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSBFeHBvbmVudGlhbEJhY2tvZmYuZGVmYXVsdCkge1xuICAgICAgICBjb25zdCB7IGluaXRpYWxJbnRlcnZhbCA9IElOSVRJQUxfSU5URVJWQUxfTVNFQywgcmFuZG9taXphdGlvbkZhY3RvciA9IFJBTkRPTUlaQVRJT05fRkFDVE9SLCBtdWx0aXBsaWVyID0gTVVMVElQTElFUiwgbWF4SW50ZXJ2YWwgPSBNQVhfSU5URVJWQUxfTVNFQywgbWF4RWxhcHNlZFRpbWUgPSBNQVhfRUxBUFNFRF9USU1FX01TRUMsIG1heEl0ZXJhdGlvbnMgPSBNQVhfSVRFUkFUSU9OUywgZGF0ZSA9IERhdGUsIH0gPSBvcHRpb25zO1xuICAgICAgICB0aGlzLiNjdXJyZW50SW50ZXJ2YWwgPSBpbml0aWFsSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuI3JhbmRvbWl6YXRpb25GYWN0b3IgPSByYW5kb21pemF0aW9uRmFjdG9yO1xuICAgICAgICB0aGlzLiNtdWx0aXBsaWVyID0gbXVsdGlwbGllcjtcbiAgICAgICAgdGhpcy4jbWF4SW50ZXJ2YWwgPSBtYXhJbnRlcnZhbDtcbiAgICAgICAgdGhpcy4jZGF0ZSA9IGRhdGU7XG4gICAgICAgIHRoaXMuI3N0YXJ0VGltZSA9IGRhdGUubm93KCk7XG4gICAgICAgIHRoaXMuI21heEVsYXBzZWRUaW1lID0gbWF4RWxhcHNlZFRpbWU7XG4gICAgICAgIHRoaXMuI21heEl0ZXJhdGlvbnMgPSBtYXhJdGVyYXRpb25zO1xuICAgIH1cbiAgICBnZXQgZWxsYXBzZWRUaW1lSW5Nc2VjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGF0ZS5ub3coKSAtIHRoaXMuI3N0YXJ0VGltZTtcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRJbnRlcnZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRJbnRlcnZhbDtcbiAgICB9XG4gICAgZ2V0IGNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY291bnQ7XG4gICAgfVxuICAgIGdldCByYW5kb21WYWx1ZUZyb21JbnRlcnZhbCgpIHtcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLiNyYW5kb21pemF0aW9uRmFjdG9yICogdGhpcy4jY3VycmVudEludGVydmFsO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLiNjdXJyZW50SW50ZXJ2YWwgLSBkZWx0YTtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy4jY3VycmVudEludGVydmFsICsgZGVsdGE7XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfVxuICAgIGluY3JlbWVudEN1cnJlbnRJbnRlcnZhbCgpIHtcbiAgICAgICAgdGhpcy4jY3VycmVudEludGVydmFsID0gTWF0aC5taW4odGhpcy4jY3VycmVudEludGVydmFsICogdGhpcy4jbXVsdGlwbGllciwgdGhpcy4jbWF4SW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLiNjb3VudCsrO1xuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudEludGVydmFsO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5lbGxhcHNlZFRpbWVJbk1zZWMgPj0gdGhpcy4jbWF4RWxhcHNlZFRpbWUgfHwgdGhpcy4jY291bnQgPj0gdGhpcy4jbWF4SXRlcmF0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluY3JlbWVudEN1cnJlbnRJbnRlcnZhbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFuZG9tVmFsdWVGcm9tSW50ZXJ2YWw7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgaXRlcmF0b3IuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIGZvciB0aGUgZXhwb25lbnRpYWwgYmFja29mZlxuICogQHJldHVybnMgYW4gaXRlcmF0b3IgdGhhdCB5aWVsZHMgdGhlIG5leHQgZGVsYXkgaW4gdGhlIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAqIEB5aWVsZHMgdGhlIG5leHQgZGVsYXkgaW4gdGhlIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uKiBleHBvbmVudGlhbEJhY2tvZmYob3B0aW9ucyA9IEV4cG9uZW50aWFsQmFja29mZi5kZWZhdWx0KSB7XG4gICAgY29uc3QgYmFja29mZiA9IG5ldyBFeHBvbmVudGlhbEJhY2tvZmYob3B0aW9ucyk7XG4gICAgbGV0IG5leHQgPSBiYWNrb2ZmLm5leHQoKTtcbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICB5aWVsZCBuZXh0O1xuICAgICAgICBuZXh0ID0gYmFja29mZi5uZXh0KCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja29mZi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/backoff.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/index.js":
/*!**********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_POLLING_OPTIONS: () => (/* binding */ DEFAULT_POLLING_OPTIONS),\n/* harmony export */   constructRequest: () => (/* binding */ constructRequest),\n/* harmony export */   defaultStrategy: () => (/* reexport safe */ _strategy_js__WEBPACK_IMPORTED_MODULE_0__.defaultStrategy),\n/* harmony export */   pollForResponse: () => (/* binding */ pollForResponse),\n/* harmony export */   strategy: () => (/* reexport module object */ _strategy_js__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _certificate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../certificate.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/certificate.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _strategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strategy.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/strategy.js\");\n/* harmony import */ var _agent_http_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../agent/http/types.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/types.js\");\n/* harmony import */ var _agent_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../agent/index.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\n\n\n\nconst DEFAULT_POLLING_OPTIONS = {\n    strategy: (0,_strategy_js__WEBPACK_IMPORTED_MODULE_0__.defaultStrategy)(),\n    preSignReadStateRequest: false,\n};\n/**\n * Check if an object has a property\n * @param value the object that might have the property\n * @param property the key of property we're looking for\n */\nfunction hasProperty(value, property) {\n    return Object.prototype.hasOwnProperty.call(value, property);\n}\nfunction isObjectWithProperty(value, property) {\n    return value !== null && typeof value === 'object' && hasProperty(value, property);\n}\nfunction hasFunction(value, property) {\n    return hasProperty(value, property) && typeof value[property] === 'function';\n}\n/**\n * Check if value is a signed read state request with expiry\n * @param value to check\n */\nfunction isSignedReadStateRequestWithExpiry(value) {\n    return (isObjectWithProperty(value, 'body') &&\n        isObjectWithProperty(value.body, 'content') &&\n        value.body.content.request_type ===\n            _agent_http_types_js__WEBPACK_IMPORTED_MODULE_1__.ReadRequestType.ReadState &&\n        isObjectWithProperty(value.body.content, 'ingress_expiry') &&\n        typeof value.body.content.ingress_expiry === 'object' &&\n        value.body.content.ingress_expiry !== null &&\n        hasFunction(value.body.content.ingress_expiry, 'toHash'));\n}\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param options polling options to control behavior\n */\nasync function pollForResponse(agent, canisterId, requestId, options = {}) {\n    const path = [(0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)('request_status'), requestId];\n    let state;\n    let currentRequest;\n    const preSignReadStateRequest = options.preSignReadStateRequest ?? false;\n    if (preSignReadStateRequest) {\n        // If preSignReadStateRequest is true, we need to create a new request\n        currentRequest = await constructRequest({\n            paths: [path],\n            agent,\n            pollingOptions: options,\n        });\n        state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n    }\n    else {\n        // If preSignReadStateRequest is false, we use the default strategy and sign the request each time\n        state = await agent.readState(canisterId, { paths: [path] });\n    }\n    if (agent.rootKey == null) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.ExternalError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.MissingRootKeyErrorCode());\n    }\n    const cert = await _certificate_js__WEBPACK_IMPORTED_MODULE_4__.Certificate.create({\n        certificate: state.certificate,\n        rootKey: agent.rootKey,\n        canisterId: canisterId,\n        blsVerify: options.blsVerify,\n        agent,\n    });\n    const maybeBuf = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_4__.lookupResultToBuffer)(cert.lookup_path([...path, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)('status')]));\n    let status;\n    if (typeof maybeBuf === 'undefined') {\n        // Missing requestId means we need to wait\n        status = _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Unknown;\n    }\n    else {\n        status = new TextDecoder().decode(maybeBuf);\n    }\n    switch (status) {\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Replied: {\n            return {\n                reply: (0,_certificate_js__WEBPACK_IMPORTED_MODULE_4__.lookupResultToBuffer)(cert.lookup_path([...path, 'reply'])),\n                certificate: cert,\n            };\n        }\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Received:\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Unknown:\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Processing: {\n            // Execute the polling strategy, then retry.\n            const strategy = options.strategy ?? (0,_strategy_js__WEBPACK_IMPORTED_MODULE_0__.defaultStrategy)();\n            await strategy(canisterId, requestId, status);\n            return pollForResponse(agent, canisterId, requestId, {\n                ...options,\n                request: currentRequest,\n            });\n        }\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Rejected: {\n            const rejectCode = new Uint8Array((0,_certificate_js__WEBPACK_IMPORTED_MODULE_4__.lookupResultToBuffer)(cert.lookup_path([...path, 'reject_code'])))[0];\n            const rejectMessage = new TextDecoder().decode((0,_certificate_js__WEBPACK_IMPORTED_MODULE_4__.lookupResultToBuffer)(cert.lookup_path([...path, 'reject_message'])));\n            const errorCodeBuf = (0,_certificate_js__WEBPACK_IMPORTED_MODULE_4__.lookupResultToBuffer)(cert.lookup_path([...path, 'error_code']));\n            const errorCode = errorCodeBuf ? new TextDecoder().decode(errorCodeBuf) : undefined;\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.RejectError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.CertifiedRejectErrorCode(requestId, rejectCode, rejectMessage, errorCode));\n        }\n        case _agent_index_js__WEBPACK_IMPORTED_MODULE_5__.RequestStatusResponseStatus.Done:\n            // This is _technically_ not an error, but we still didn't see the `Replied` status so\n            // we don't know the result and cannot decode it.\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.UnknownError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.RequestStatusDoneNoReplyErrorCode(requestId));\n    }\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.UNREACHABLE_ERROR;\n}\n// Determine if we should reuse the read state request or create a new one\n// based on the options provided.\n/**\n * Constructs a read state request for the given paths.\n * If the request is already signed and has an expiry, it will be returned as is.\n * Otherwise, a new request will be created.\n * @param options The options to use for creating the request.\n * @param options.paths The paths to read from.\n * @param options.agent The agent to use to create the request.\n * @param options.pollingOptions The options to use for creating the request.\n * @returns The read state request.\n */\nasync function constructRequest(options) {\n    const { paths, agent, pollingOptions } = options;\n    if (pollingOptions.request && isSignedReadStateRequestWithExpiry(pollingOptions.request)) {\n        return pollingOptions.request;\n    }\n    const request = await agent.createReadStateRequest?.({\n        paths,\n    }, undefined);\n    if (!isSignedReadStateRequestWithExpiry(request)) {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_3__.InvalidReadStateRequestErrorCode(request));\n    }\n    return request;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/index.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/strategy.js":
/*!*************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/strategy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   backoff: () => (/* binding */ backoff),\n/* harmony export */   chain: () => (/* binding */ chain),\n/* harmony export */   conditionalDelay: () => (/* binding */ conditionalDelay),\n/* harmony export */   defaultStrategy: () => (/* binding */ defaultStrategy),\n/* harmony export */   maxAttempts: () => (/* binding */ maxAttempts),\n/* harmony export */   once: () => (/* binding */ once),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   timeout: () => (/* binding */ timeout)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n\nconst FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n/**\n * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second\n * with an exponential backoff factor of 1.2. Timeout after 5 minutes.\n */\nfunction defaultStrategy() {\n    return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));\n}\n/**\n * Predicate that returns true once.\n */\nfunction once() {\n    let first = true;\n    return async () => {\n        if (first) {\n            first = false;\n            return true;\n        }\n        return false;\n    };\n}\n/**\n * Delay the polling once.\n * @param condition A predicate that indicates when to delay.\n * @param timeInMsec The amount of time to delay.\n */\nfunction conditionalDelay(condition, timeInMsec) {\n    return async (canisterId, requestId, status) => {\n        if (await condition(canisterId, requestId, status)) {\n            return new Promise(resolve => setTimeout(resolve, timeInMsec));\n        }\n    };\n}\n/**\n * Error out after a maximum number of polling has been done.\n * @param count The maximum attempts to poll.\n */\nfunction maxAttempts(count) {\n    let attempts = count;\n    return async (_canisterId, requestId, status) => {\n        if (--attempts <= 0) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.TimeoutWaitingForResponseErrorCode(`Failed to retrieve a reply for request after ${count} attempts`, requestId, status));\n        }\n    };\n}\n/**\n * Throttle polling.\n * @param throttleInMsec Amount in millisecond to wait between each polling.\n */\nfunction throttle(throttleInMsec) {\n    return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));\n}\n/**\n * Reject a call after a certain amount of time.\n * @param timeInMsec Time in milliseconds before the polling should be rejected.\n */\nfunction timeout(timeInMsec) {\n    const end = Date.now() + timeInMsec;\n    return async (_canisterId, requestId, status) => {\n        if (Date.now() > end) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ProtocolError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.TimeoutWaitingForResponseErrorCode(`Request timed out after ${timeInMsec} msec`, requestId, status));\n        }\n    };\n}\n/**\n * A strategy that throttle, but using an exponential backoff strategy.\n * @param startingThrottleInMsec The throttle in milliseconds to start with.\n * @param backoffFactor The factor to multiple the throttle time between every poll. For\n *   example if using 2, the throttle will double between every run.\n */\nfunction backoff(startingThrottleInMsec, backoffFactor) {\n    let currentThrottling = startingThrottleInMsec;\n    return () => new Promise(resolve => setTimeout(() => {\n        currentThrottling *= backoffFactor;\n        resolve();\n    }, currentThrottling));\n}\n/**\n * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,\n * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.\n * @param strategies A strategy list to chain.\n */\nfunction chain(...strategies) {\n    return async (canisterId, requestId, status) => {\n        for (const a of strategies) {\n            await a(canisterId, requestId, status);\n        }\n    };\n}\n//# sourceMappingURL=strategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3BvbGxpbmcvc3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQWEsY0FBYywwRUFBa0MsaURBQWlELE9BQU87QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFEQUFhLGNBQWMsMEVBQWtDLDRCQUE0QixZQUFZO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BpcXViZS9vcHMtY29uc29sZS8uLi8uLi9wYWNrYWdlcy9zZGstanMvbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vcG9sbGluZy9zdHJhdGVneS5qcz8zZTM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sRXJyb3IsIFRpbWVvdXRXYWl0aW5nRm9yUmVzcG9uc2VFcnJvckNvZGUgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5jb25zdCBGSVZFX01JTlVURVNfSU5fTVNFQyA9IDUgKiA2MCAqIDEwMDA7XG4vKipcbiAqIEEgYmVzdCBwcmFjdGljZXMgcG9sbGluZyBzdHJhdGVneTogd2FpdCAyIHNlY29uZHMgYmVmb3JlIHRoZSBmaXJzdCBwb2xsLCB0aGVuIDEgc2Vjb25kXG4gKiB3aXRoIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgZmFjdG9yIG9mIDEuMi4gVGltZW91dCBhZnRlciA1IG1pbnV0ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U3RyYXRlZ3koKSB7XG4gICAgcmV0dXJuIGNoYWluKGNvbmRpdGlvbmFsRGVsYXkob25jZSgpLCAxMDAwKSwgYmFja29mZigxMDAwLCAxLjIpLCB0aW1lb3V0KEZJVkVfTUlOVVRFU19JTl9NU0VDKSk7XG59XG4vKipcbiAqIFByZWRpY2F0ZSB0aGF0IHJldHVybnMgdHJ1ZSBvbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25jZSgpIHtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuLyoqXG4gKiBEZWxheSB0aGUgcG9sbGluZyBvbmNlLlxuICogQHBhcmFtIGNvbmRpdGlvbiBBIHByZWRpY2F0ZSB0aGF0IGluZGljYXRlcyB3aGVuIHRvIGRlbGF5LlxuICogQHBhcmFtIHRpbWVJbk1zZWMgVGhlIGFtb3VudCBvZiB0aW1lIHRvIGRlbGF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxEZWxheShjb25kaXRpb24sIHRpbWVJbk1zZWMpIHtcbiAgICByZXR1cm4gYXN5bmMgKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChhd2FpdCBjb25kaXRpb24oY2FuaXN0ZXJJZCwgcmVxdWVzdElkLCBzdGF0dXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVJbk1zZWMpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEVycm9yIG91dCBhZnRlciBhIG1heGltdW0gbnVtYmVyIG9mIHBvbGxpbmcgaGFzIGJlZW4gZG9uZS5cbiAqIEBwYXJhbSBjb3VudCBUaGUgbWF4aW11bSBhdHRlbXB0cyB0byBwb2xsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF4QXR0ZW1wdHMoY291bnQpIHtcbiAgICBsZXQgYXR0ZW1wdHMgPSBjb3VudDtcbiAgICByZXR1cm4gYXN5bmMgKF9jYW5pc3RlcklkLCByZXF1ZXN0SWQsIHN0YXR1cykgPT4ge1xuICAgICAgICBpZiAoLS1hdHRlbXB0cyA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBQcm90b2NvbEVycm9yLmZyb21Db2RlKG5ldyBUaW1lb3V0V2FpdGluZ0ZvclJlc3BvbnNlRXJyb3JDb2RlKGBGYWlsZWQgdG8gcmV0cmlldmUgYSByZXBseSBmb3IgcmVxdWVzdCBhZnRlciAke2NvdW50fSBhdHRlbXB0c2AsIHJlcXVlc3RJZCwgc3RhdHVzKSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBUaHJvdHRsZSBwb2xsaW5nLlxuICogQHBhcmFtIHRocm90dGxlSW5Nc2VjIEFtb3VudCBpbiBtaWxsaXNlY29uZCB0byB3YWl0IGJldHdlZW4gZWFjaCBwb2xsaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUodGhyb3R0bGVJbk1zZWMpIHtcbiAgICByZXR1cm4gKCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHRocm90dGxlSW5Nc2VjKSk7XG59XG4vKipcbiAqIFJlamVjdCBhIGNhbGwgYWZ0ZXIgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lLlxuICogQHBhcmFtIHRpbWVJbk1zZWMgVGltZSBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBwb2xsaW5nIHNob3VsZCBiZSByZWplY3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQodGltZUluTXNlYykge1xuICAgIGNvbnN0IGVuZCA9IERhdGUubm93KCkgKyB0aW1lSW5Nc2VjO1xuICAgIHJldHVybiBhc3luYyAoX2NhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpID4gZW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBQcm90b2NvbEVycm9yLmZyb21Db2RlKG5ldyBUaW1lb3V0V2FpdGluZ0ZvclJlc3BvbnNlRXJyb3JDb2RlKGBSZXF1ZXN0IHRpbWVkIG91dCBhZnRlciAke3RpbWVJbk1zZWN9IG1zZWNgLCByZXF1ZXN0SWQsIHN0YXR1cykpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQSBzdHJhdGVneSB0aGF0IHRocm90dGxlLCBidXQgdXNpbmcgYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdHJhdGVneS5cbiAqIEBwYXJhbSBzdGFydGluZ1Rocm90dGxlSW5Nc2VjIFRoZSB0aHJvdHRsZSBpbiBtaWxsaXNlY29uZHMgdG8gc3RhcnQgd2l0aC5cbiAqIEBwYXJhbSBiYWNrb2ZmRmFjdG9yIFRoZSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIHRocm90dGxlIHRpbWUgYmV0d2VlbiBldmVyeSBwb2xsLiBGb3JcbiAqICAgZXhhbXBsZSBpZiB1c2luZyAyLCB0aGUgdGhyb3R0bGUgd2lsbCBkb3VibGUgYmV0d2VlbiBldmVyeSBydW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYWNrb2ZmKHN0YXJ0aW5nVGhyb3R0bGVJbk1zZWMsIGJhY2tvZmZGYWN0b3IpIHtcbiAgICBsZXQgY3VycmVudFRocm90dGxpbmcgPSBzdGFydGluZ1Rocm90dGxlSW5Nc2VjO1xuICAgIHJldHVybiAoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjdXJyZW50VGhyb3R0bGluZyAqPSBiYWNrb2ZmRmFjdG9yO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSwgY3VycmVudFRocm90dGxpbmcpKTtcbn1cbi8qKlxuICogQ2hhaW4gbXVsdGlwbGUgcG9sbGluZyBzdHJhdGVneS4gVGhpcyBfY2hhaW5zXyB0aGUgc3RyYXRlZ2llcywgc28gaWYgeW91IHBhc3MgaW4sXG4gKiBzYXksIHR3byB0aHJvdHRsaW5nIHN0cmF0ZWd5IG9mIDEgc2Vjb25kLCBpdCB3aWxsIHJlc3VsdCBpbiBhIHRocm90dGxlIG9mIDIgc2Vjb25kcy5cbiAqIEBwYXJhbSBzdHJhdGVnaWVzIEEgc3RyYXRlZ3kgbGlzdCB0byBjaGFpbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYWluKC4uLnN0cmF0ZWdpZXMpIHtcbiAgICByZXR1cm4gYXN5bmMgKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgYSBvZiBzdHJhdGVnaWVzKSB7XG4gICAgICAgICAgICBhd2FpdCBhKGNhbmlzdGVySWQsIHJlcXVlc3RJZCwgc3RhdHVzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJhdGVneS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/polling/strategy.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/public_key.js":
/*!*******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/public_key.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519PublicKey: () => (/* binding */ Ed25519PublicKey)\n/* harmony export */ });\n/* harmony import */ var _der_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./der.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/der.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n\n\nclass Ed25519PublicKey {\n    static from(key) {\n        return this.fromDer(key.toDer());\n    }\n    static fromRaw(rawKey) {\n        return new Ed25519PublicKey(rawKey);\n    }\n    static fromDer(derKey) {\n        return new Ed25519PublicKey(this.derDecode(derKey));\n    }\n    // The length of Ed25519 public keys is always 32 bytes.\n    static { this.RAW_KEY_LENGTH = 32; }\n    static derEncode(publicKey) {\n        return (0,_der_js__WEBPACK_IMPORTED_MODULE_0__.wrapDER)(publicKey, _der_js__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID);\n    }\n    static derDecode(key) {\n        const unwrapped = (0,_der_js__WEBPACK_IMPORTED_MODULE_0__.unwrapDER)(key, _der_js__WEBPACK_IMPORTED_MODULE_0__.ED25519_OID);\n        if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'));\n        }\n        return unwrapped;\n    }\n    #rawKey;\n    get rawKey() {\n        return this.#rawKey;\n    }\n    #derKey;\n    get derKey() {\n        return this.#derKey;\n    }\n    // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n    constructor(key) {\n        if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_1__.DerDecodeErrorCode('An Ed25519 public key must be exactly 32 bytes long'));\n        }\n        this.#rawKey = key;\n        this.#derKey = Ed25519PublicKey.derEncode(key);\n    }\n    toDer() {\n        return this.derKey;\n    }\n    toRaw() {\n        return this.rawKey;\n    }\n}\n//# sourceMappingURL=public_key.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3B1YmxpY19rZXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ0U7QUFDdEQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGVBQWUsZ0RBQU8sWUFBWSxnREFBVztBQUM3QztBQUNBO0FBQ0EsMEJBQTBCLGtEQUFTLE1BQU0sZ0RBQVc7QUFDcEQ7QUFDQSxrQkFBa0Isa0RBQVUsY0FBYywwREFBa0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrREFBVSxjQUFjLDBEQUFrQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3B1YmxpY19rZXkuanM/ZTMxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFRDI1NTE5X09JRCwgdW53cmFwREVSLCB3cmFwREVSIH0gZnJvbSBcIi4vZGVyLmpzXCI7XG5pbXBvcnQgeyBEZXJEZWNvZGVFcnJvckNvZGUsIElucHV0RXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmV4cG9ydCBjbGFzcyBFZDI1NTE5UHVibGljS2V5IHtcbiAgICBzdGF0aWMgZnJvbShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbURlcihrZXkudG9EZXIoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tUmF3KHJhd0tleSkge1xuICAgICAgICByZXR1cm4gbmV3IEVkMjU1MTlQdWJsaWNLZXkocmF3S2V5KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21EZXIoZGVyS2V5KSB7XG4gICAgICAgIHJldHVybiBuZXcgRWQyNTUxOVB1YmxpY0tleSh0aGlzLmRlckRlY29kZShkZXJLZXkpKTtcbiAgICB9XG4gICAgLy8gVGhlIGxlbmd0aCBvZiBFZDI1NTE5IHB1YmxpYyBrZXlzIGlzIGFsd2F5cyAzMiBieXRlcy5cbiAgICBzdGF0aWMgeyB0aGlzLlJBV19LRVlfTEVOR1RIID0gMzI7IH1cbiAgICBzdGF0aWMgZGVyRW5jb2RlKHB1YmxpY0tleSkge1xuICAgICAgICByZXR1cm4gd3JhcERFUihwdWJsaWNLZXksIEVEMjU1MTlfT0lEKTtcbiAgICB9XG4gICAgc3RhdGljIGRlckRlY29kZShrZXkpIHtcbiAgICAgICAgY29uc3QgdW53cmFwcGVkID0gdW53cmFwREVSKGtleSwgRUQyNTUxOV9PSUQpO1xuICAgICAgICBpZiAodW53cmFwcGVkLmxlbmd0aCAhPT0gdGhpcy5SQVdfS0VZX0xFTkdUSCkge1xuICAgICAgICAgICAgdGhyb3cgSW5wdXRFcnJvci5mcm9tQ29kZShuZXcgRGVyRGVjb2RlRXJyb3JDb2RlKCdBbiBFZDI1NTE5IHB1YmxpYyBrZXkgbXVzdCBiZSBleGFjdGx5IDMyIGJ5dGVzIGxvbmcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVud3JhcHBlZDtcbiAgICB9XG4gICAgI3Jhd0tleTtcbiAgICBnZXQgcmF3S2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcmF3S2V5O1xuICAgIH1cbiAgICAjZGVyS2V5O1xuICAgIGdldCBkZXJLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNkZXJLZXk7XG4gICAgfVxuICAgIC8vIGBmcm9tUmF3YCBhbmQgYGZyb21EZXJgIHNob3VsZCBiZSB1c2VkIGZvciBpbnN0YW50aWF0aW9uLCBub3QgdGhpcyBjb25zdHJ1Y3Rvci5cbiAgICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICAgICAgaWYgKGtleS5ieXRlTGVuZ3RoICE9PSBFZDI1NTE5UHVibGljS2V5LlJBV19LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBJbnB1dEVycm9yLmZyb21Db2RlKG5ldyBEZXJEZWNvZGVFcnJvckNvZGUoJ0FuIEVkMjU1MTkgcHVibGljIGtleSBtdXN0IGJlIGV4YWN0bHkgMzIgYnl0ZXMgbG9uZycpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNyYXdLZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuI2RlcktleSA9IEVkMjU1MTlQdWJsaWNLZXkuZGVyRW5jb2RlKGtleSk7XG4gICAgfVxuICAgIHRvRGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXJLZXk7XG4gICAgfVxuICAgIHRvUmF3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXdLZXk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGljX2tleS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/public_key.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/request_id.js":
/*!*******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/request_id.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashOfMap: () => (/* binding */ hashOfMap),\n/* harmony export */   hashValue: () => (/* binding */ hashValue),\n/* harmony export */   requestIdOf: () => (/* binding */ requestIdOf)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/errors.js\");\n/* harmony import */ var _utils_buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/sha2.js\");\n\n\n\n\n\n/**\n *\n * @param value unknown value\n * @returns Uint8Array\n */\nfunction hashValue(value) {\n    if (typeof value === 'string') {\n        return hashString(value);\n    }\n    else if (typeof value === 'number') {\n        return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)((0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.lebEncode)(value));\n    }\n    else if (value instanceof Uint8Array || ArrayBuffer.isView(value)) {\n        return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)((0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_2__.uint8FromBufLike)(value));\n    }\n    else if (Array.isArray(value)) {\n        const vals = value.map(hashValue);\n        return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(...vals));\n    }\n    else if (value && typeof value === 'object' && value._isPrincipal) {\n        return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)(value.toUint8Array());\n    }\n    else if (typeof value === 'object' &&\n        value !== null &&\n        typeof value.toHash === 'function') {\n        return hashValue(value.toHash());\n        // TODO This should be move to a specific async method as the webauthn flow required\n        // the flow to be synchronous to ensure Safari touch id works.\n        // } else if (value instanceof Promise) {\n        //   return value.then(x => hashValue(x));\n    }\n    else if (typeof value === 'object') {\n        return hashOfMap(value);\n    }\n    else if (typeof value === 'bigint') {\n        // Do this check much later than the other bigint check because this one is much less\n        // type-safe.\n        // So we want to try all the high-assurance type guards before this 'probable' one.\n        return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)((0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.lebEncode)(value));\n    }\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_4__.InputError.fromCode(new _errors_js__WEBPACK_IMPORTED_MODULE_4__.HashValueErrorCode(value));\n}\nconst hashString = (value) => {\n    const encoded = new TextEncoder().encode(value);\n    return (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)(encoded);\n};\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\nfunction requestIdOf(request) {\n    return hashOfMap(request);\n}\n/**\n * Hash a map into a Uint8Array using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns Uint8Array\n */\nfunction hashOfMap(map) {\n    const hashed = Object.entries(map)\n        .filter(([, value]) => value !== undefined)\n        .map(([key, value]) => {\n        const hashedKey = hashString(key);\n        const hashedValue = hashValue(value);\n        return [hashedKey, hashedValue];\n    });\n    const traversed = hashed;\n    const sorted = traversed.sort(([k1], [k2]) => {\n        return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_5__.compare)(k1, k2);\n    });\n    const concatenated = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(...sorted.map(x => (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(...x)));\n    const result = (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256)(concatenated);\n    return result;\n}\n//# sourceMappingURL=request_id.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3JlcXVlc3RfaWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXFEO0FBQ1E7QUFDUjtBQUNIO0FBQ047QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBEQUFNLENBQUMsMERBQVM7QUFDL0I7QUFDQTtBQUNBLGVBQWUsMERBQU0sQ0FBQyxrRUFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwREFBTSxDQUFDLGdFQUFXO0FBQ2pDO0FBQ0E7QUFDQSxlQUFlLDBEQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMERBQU0sQ0FBQywwREFBUztBQUMvQjtBQUNBLFVBQVUsa0RBQVUsY0FBYywwREFBa0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsV0FBVywwREFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxlQUFlLHdEQUFPO0FBQ3RCLEtBQUs7QUFDTCx5QkFBeUIsZ0VBQVcsb0JBQW9CLGdFQUFXO0FBQ25FLG1CQUFtQiwwREFBTTtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3JlcXVlc3RfaWQuanM/MGYyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsZWJFbmNvZGUsIGNvbXBhcmUgfSBmcm9tICdAZGZpbml0eS9jYW5kaWQnO1xuaW1wb3J0IHsgSGFzaFZhbHVlRXJyb3JDb2RlLCBJbnB1dEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyB1aW50OEZyb21CdWZMaWtlIH0gZnJvbSBcIi4vdXRpbHMvYnVmZmVyLmpzXCI7XG5pbXBvcnQgeyBjb25jYXRCeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyJztcbi8qKlxuICpcbiAqIEBwYXJhbSB2YWx1ZSB1bmtub3duIHZhbHVlXG4gKiBAcmV0dXJucyBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaGFzaFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHNoYTI1NihsZWJFbmNvZGUodmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHNoYTI1Nih1aW50OEZyb21CdWZMaWtlKHZhbHVlKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHZhbHMgPSB2YWx1ZS5tYXAoaGFzaFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHNoYTI1Nihjb25jYXRCeXRlcyguLi52YWxzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuX2lzUHJpbmNpcGFsKSB7XG4gICAgICAgIHJldHVybiBzaGEyNTYodmFsdWUudG9VaW50OEFycmF5KCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS50b0hhc2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGhhc2hWYWx1ZSh2YWx1ZS50b0hhc2goKSk7XG4gICAgICAgIC8vIFRPRE8gVGhpcyBzaG91bGQgYmUgbW92ZSB0byBhIHNwZWNpZmljIGFzeW5jIG1ldGhvZCBhcyB0aGUgd2ViYXV0aG4gZmxvdyByZXF1aXJlZFxuICAgICAgICAvLyB0aGUgZmxvdyB0byBiZSBzeW5jaHJvbm91cyB0byBlbnN1cmUgU2FmYXJpIHRvdWNoIGlkIHdvcmtzLlxuICAgICAgICAvLyB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAvLyAgIHJldHVybiB2YWx1ZS50aGVuKHggPT4gaGFzaFZhbHVlKHgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaGFzaE9mTWFwKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50Jykge1xuICAgICAgICAvLyBEbyB0aGlzIGNoZWNrIG11Y2ggbGF0ZXIgdGhhbiB0aGUgb3RoZXIgYmlnaW50IGNoZWNrIGJlY2F1c2UgdGhpcyBvbmUgaXMgbXVjaCBsZXNzXG4gICAgICAgIC8vIHR5cGUtc2FmZS5cbiAgICAgICAgLy8gU28gd2Ugd2FudCB0byB0cnkgYWxsIHRoZSBoaWdoLWFzc3VyYW5jZSB0eXBlIGd1YXJkcyBiZWZvcmUgdGhpcyAncHJvYmFibGUnIG9uZS5cbiAgICAgICAgcmV0dXJuIHNoYTI1NihsZWJFbmNvZGUodmFsdWUpKTtcbiAgICB9XG4gICAgdGhyb3cgSW5wdXRFcnJvci5mcm9tQ29kZShuZXcgSGFzaFZhbHVlRXJyb3JDb2RlKHZhbHVlKSk7XG59XG5jb25zdCBoYXNoU3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RlZCA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHNoYTI1NihlbmNvZGVkKTtcbn07XG4vKipcbiAqIEdldCB0aGUgUmVxdWVzdElkIG9mIHRoZSBwcm92aWRlZCBpYy1yZWYgcmVxdWVzdC5cbiAqIFJlcXVlc3RJZCBpcyB0aGUgcmVzdWx0IG9mIHRoZSByZXByZXNlbnRhdGlvbi1pbmRlcGVuZGVudC1oYXNoIGZ1bmN0aW9uLlxuICogaHR0cHM6Ly9zZGsuZGZpbml0eS5vcmcvZG9jcy9pbnRlcmZhY2Utc3BlYy9pbmRleC5odG1sI2hhc2gtb2YtbWFwXG4gKiBAcGFyYW0gcmVxdWVzdCAtIGljLXJlZiByZXF1ZXN0IHRvIGhhc2ggaW50byBSZXF1ZXN0SWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RJZE9mKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gaGFzaE9mTWFwKHJlcXVlc3QpO1xufVxuLyoqXG4gKiBIYXNoIGEgbWFwIGludG8gYSBVaW50OEFycmF5IHVzaW5nIHRoZSByZXByZXNlbnRhdGlvbi1pbmRlcGVuZGVudC1oYXNoIGZ1bmN0aW9uLlxuICogaHR0cHM6Ly9zZGsuZGZpbml0eS5vcmcvZG9jcy9pbnRlcmZhY2Utc3BlYy9pbmRleC5odG1sI2hhc2gtb2YtbWFwXG4gKiBAcGFyYW0gbWFwIC0gQW55IG5vbi1uZXN0ZWQgb2JqZWN0XG4gKiBAcmV0dXJucyBVaW50OEFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoT2ZNYXAobWFwKSB7XG4gICAgY29uc3QgaGFzaGVkID0gT2JqZWN0LmVudHJpZXMobWFwKVxuICAgICAgICAuZmlsdGVyKChbLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBoYXNoZWRLZXkgPSBoYXNoU3RyaW5nKGtleSk7XG4gICAgICAgIGNvbnN0IGhhc2hlZFZhbHVlID0gaGFzaFZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIFtoYXNoZWRLZXksIGhhc2hlZFZhbHVlXTtcbiAgICB9KTtcbiAgICBjb25zdCB0cmF2ZXJzZWQgPSBoYXNoZWQ7XG4gICAgY29uc3Qgc29ydGVkID0gdHJhdmVyc2VkLnNvcnQoKFtrMV0sIFtrMl0pID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmUoazEsIGsyKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb25jYXRlbmF0ZWQgPSBjb25jYXRCeXRlcyguLi5zb3J0ZWQubWFwKHggPT4gY29uY2F0Qnl0ZXMoLi4ueCkpKTtcbiAgICBjb25zdCByZXN1bHQgPSBzaGEyNTYoY29uY2F0ZW5hdGVkKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdF9pZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/request_id.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/bls.js":
/*!******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/bls.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blsVerify: () => (/* binding */ blsVerify),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/bls12-381 */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/curves/esm/bls12-381.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\nlet verify;\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns boolean\n */\nfunction blsVerify(pk, sig, msg) {\n    const primaryKey = typeof pk === 'string' ? pk : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(pk);\n    const signature = typeof sig === 'string' ? sig : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(sig);\n    const message = typeof msg === 'string' ? msg : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(msg);\n    return _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_1__.bls12_381.verifyShortSignature(signature, message, primaryKey);\n}\n//# sourceMappingURL=bls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL2Jscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ0g7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AscURBQXFELCtEQUFVO0FBQy9ELHNEQUFzRCwrREFBVTtBQUNoRSxvREFBb0QsK0RBQVU7QUFDOUQsV0FBVyw4REFBUztBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9ibHMuanM/NmYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibHMxMl8zODEgfSBmcm9tICdAbm9ibGUvY3VydmVzL2JsczEyLTM4MSc7XG5pbXBvcnQgeyBieXRlc1RvSGV4IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5leHBvcnQgbGV0IHZlcmlmeTtcbi8qKlxuICpcbiAqIEBwYXJhbSBwayBwcmltYXJ5IGtleTogVWludDhBcnJheVxuICogQHBhcmFtIHNpZyBzaWduYXR1cmU6IFVpbnQ4QXJyYXlcbiAqIEBwYXJhbSBtc2cgbWVzc2FnZTogVWludDhBcnJheVxuICogQHJldHVybnMgYm9vbGVhblxuICovXG5leHBvcnQgZnVuY3Rpb24gYmxzVmVyaWZ5KHBrLCBzaWcsIG1zZykge1xuICAgIGNvbnN0IHByaW1hcnlLZXkgPSB0eXBlb2YgcGsgPT09ICdzdHJpbmcnID8gcGsgOiBieXRlc1RvSGV4KHBrKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSB0eXBlb2Ygc2lnID09PSAnc3RyaW5nJyA/IHNpZyA6IGJ5dGVzVG9IZXgoc2lnKTtcbiAgICBjb25zdCBtZXNzYWdlID0gdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgPyBtc2cgOiBieXRlc1RvSGV4KG1zZyk7XG4gICAgcmV0dXJuIGJsczEyXzM4MS52ZXJpZnlTaG9ydFNpZ25hdHVyZShzaWduYXR1cmUsIG1lc3NhZ2UsIHByaW1hcnlLZXkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/bls.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js":
/*!*********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uint8Equals: () => (/* binding */ uint8Equals),\n/* harmony export */   uint8FromBufLike: () => (/* binding */ uint8FromBufLike),\n/* harmony export */   uint8ToBuf: () => (/* binding */ uint8ToBuf)\n/* harmony export */ });\n/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nfunction uint8FromBufLike(bufLike) {\n    if (!bufLike) {\n        throw new Error('Input cannot be null or undefined');\n    }\n    if (bufLike instanceof Uint8Array) {\n        return bufLike;\n    }\n    if (bufLike instanceof ArrayBuffer) {\n        return new Uint8Array(bufLike);\n    }\n    if (Array.isArray(bufLike)) {\n        return new Uint8Array(bufLike);\n    }\n    if ('buffer' in bufLike) {\n        return uint8FromBufLike(bufLike.buffer);\n    }\n    return new Uint8Array(bufLike);\n}\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nfunction uint8ToBuf(arr) {\n    const buf = new ArrayBuffer(arr.byteLength);\n    const view = new Uint8Array(buf);\n    view.set(arr);\n    return buf;\n}\n/**\n * Compares two Uint8Arrays for equality.\n * @param a The first Uint8Array.\n * @param b The second Uint8Array.\n * @returns True if the Uint8Arrays are equal, false otherwise.\n */\nfunction uint8Equals(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvYWdlbnQvbGliL2VzbS91dGlscy9idWZmZXIuanM/N2Q0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJldHVybnMgYSB0cnVlIFVpbnQ4QXJyYXkgZnJvbSBhbiBBcnJheUJ1ZmZlckxpa2Ugb2JqZWN0LlxuICogQHBhcmFtIGJ1Zkxpa2UgYSBidWZmZXItbGlrZSBvYmplY3RcbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVpbnQ4RnJvbUJ1Zkxpa2UoYnVmTGlrZSkge1xuICAgIGlmICghYnVmTGlrZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBpZiAoYnVmTGlrZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGJ1Zkxpa2U7XG4gICAgfVxuICAgIGlmIChidWZMaWtlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zkxpa2UpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShidWZMaWtlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmTGlrZSk7XG4gICAgfVxuICAgIGlmICgnYnVmZmVyJyBpbiBidWZMaWtlKSB7XG4gICAgICAgIHJldHVybiB1aW50OEZyb21CdWZMaWtlKGJ1Zkxpa2UuYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1Zkxpa2UpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgdHJ1ZSBBcnJheUJ1ZmZlciBmcm9tIGEgVWludDhBcnJheSwgYXMgVWludDhBcnJheS5idWZmZXIgaXMgdW5zYWZlLlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBhcnIgVWludDhBcnJheSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBcnJheUJ1ZmZlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdWludDhUb0J1ZihhcnIpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoYXJyLmJ5dGVMZW5ndGgpO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIHZpZXcuc2V0KGFycik7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbi8qKlxuICogQ29tcGFyZXMgdHdvIFVpbnQ4QXJyYXlzIGZvciBlcXVhbGl0eS5cbiAqIEBwYXJhbSBhIFRoZSBmaXJzdCBVaW50OEFycmF5LlxuICogQHBhcmFtIGIgVGhlIHNlY29uZCBVaW50OEFycmF5LlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgVWludDhBcnJheXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1aW50OEVxdWFscyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/buffer.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js":
/*!***************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpirableMap: () => (/* binding */ ExpirableMap)\n/* harmony export */ });\nvar _a, _b;\n/**\n * A map that expires entries after a given time.\n * Defaults to 10 minutes.\n */\nclass ExpirableMap {\n    static { _a = Symbol.iterator, _b = Symbol.toStringTag; }\n    // Internals\n    #inner;\n    #expirationTime;\n    /**\n     * Create a new ExpirableMap.\n     * @param {ExpirableMapOptions<any, any>} options - options for the map.\n     * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.\n     * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.\n     */\n    constructor(options = {}) {\n        this[_a] = this.entries.bind(this);\n        this[_b] = 'ExpirableMap';\n        const { source = [], expirationTime = 10 * 60 * 1000 } = options;\n        const currentTime = Date.now();\n        this.#inner = new Map([...source].map(([key, value]) => [key, { value, timestamp: currentTime }]));\n        this.#expirationTime = expirationTime;\n    }\n    /**\n     * Prune removes all expired entries.\n     */\n    prune() {\n        const currentTime = Date.now();\n        for (const [key, entry] of this.#inner.entries()) {\n            if (currentTime - entry.timestamp > this.#expirationTime) {\n                this.#inner.delete(key);\n            }\n        }\n        return this;\n    }\n    // Implementing the Map interface\n    /**\n     * Set the value for the given key. Prunes expired entries.\n     * @param key for the entry\n     * @param value of the entry\n     * @returns this\n     */\n    set(key, value) {\n        this.prune();\n        const entry = {\n            value,\n            timestamp: Date.now(),\n        };\n        this.#inner.set(key, entry);\n        return this;\n    }\n    /**\n     * Get the value associated with the key, if it exists and has not expired.\n     * @param key K\n     * @returns the value associated with the key, or undefined if the key is not present or has expired.\n     */\n    get(key) {\n        const entry = this.#inner.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n        if (Date.now() - entry.timestamp > this.#expirationTime) {\n            this.#inner.delete(key);\n            return undefined;\n        }\n        return entry.value;\n    }\n    /**\n     * Clear all entries.\n     */\n    clear() {\n        this.#inner.clear();\n    }\n    /**\n     * Entries returns the entries of the map, without the expiration time.\n     * @returns an iterator over the entries of the map.\n     */\n    entries() {\n        const iterator = this.#inner.entries();\n        const generator = function* () {\n            for (const [key, value] of iterator) {\n                yield [key, value.value];\n            }\n            return undefined;\n        };\n        return generator();\n    }\n    /**\n     * Values returns the values of the map, without the expiration time.\n     * @returns an iterator over the values of the map.\n     */\n    values() {\n        const iterator = this.#inner.values();\n        const generator = function* () {\n            for (const value of iterator) {\n                yield value.value;\n            }\n            return undefined;\n        };\n        return generator();\n    }\n    /**\n     * Keys returns the keys of the map\n     * @returns an iterator over the keys of the map.\n     */\n    keys() {\n        return this.#inner.keys();\n    }\n    /**\n     * forEach calls the callbackfn on each entry of the map.\n     * @param callbackfn to call on each entry\n     * @param thisArg to use as this when calling the callbackfn\n     */\n    forEach(callbackfn, thisArg) {\n        for (const [key, value] of this.#inner.entries()) {\n            callbackfn.call(thisArg, value.value, key, this);\n        }\n    }\n    /**\n     * has returns true if the key exists and has not expired.\n     * @param key K\n     * @returns true if the key exists and has not expired.\n     */\n    has(key) {\n        return this.#inner.has(key);\n    }\n    /**\n     * delete the entry for the given key.\n     * @param key K\n     * @returns true if the key existed and has been deleted.\n     */\n    delete(key) {\n        return this.#inner.delete(key);\n    }\n    /**\n     * get size of the map.\n     * @returns the size of the map.\n     */\n    get size() {\n        return this.#inner.size;\n    }\n}\n//# sourceMappingURL=expirableMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL2V4cGlyYWJsZU1hcC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtCQUErQjtBQUM5QyxlQUFlLHNCQUFzQjtBQUNyQyxlQUFlLFFBQVE7QUFDdkI7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGdCQUFnQiwrQ0FBK0M7QUFDL0Q7QUFDQSx3RUFBd0UsK0JBQStCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL2V4cGlyYWJsZU1hcC5qcz9hMGI4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfYSwgX2I7XG4vKipcbiAqIEEgbWFwIHRoYXQgZXhwaXJlcyBlbnRyaWVzIGFmdGVyIGEgZ2l2ZW4gdGltZS5cbiAqIERlZmF1bHRzIHRvIDEwIG1pbnV0ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBpcmFibGVNYXAge1xuICAgIHN0YXRpYyB7IF9hID0gU3ltYm9sLml0ZXJhdG9yLCBfYiA9IFN5bWJvbC50b1N0cmluZ1RhZzsgfVxuICAgIC8vIEludGVybmFsc1xuICAgICNpbm5lcjtcbiAgICAjZXhwaXJhdGlvblRpbWU7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEV4cGlyYWJsZU1hcC5cbiAgICAgKiBAcGFyYW0ge0V4cGlyYWJsZU1hcE9wdGlvbnM8YW55LCBhbnk+fSBvcHRpb25zIC0gb3B0aW9ucyBmb3IgdGhlIG1hcC5cbiAgICAgKiBAcGFyYW0ge0l0ZXJhYmxlPFthbnksIGFueV0+fSBvcHRpb25zLnNvdXJjZSAtIGFuIG9wdGlvbmFsIHNvdXJjZSBvZiBlbnRyaWVzIHRvIGluaXRpYWxpemUgdGhlIG1hcCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmV4cGlyYXRpb25UaW1lIC0gdGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGFmdGVyIHdoaWNoIGVudHJpZXMgd2lsbCBleHBpcmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXNbX2FdID0gdGhpcy5lbnRyaWVzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXNbX2JdID0gJ0V4cGlyYWJsZU1hcCc7XG4gICAgICAgIGNvbnN0IHsgc291cmNlID0gW10sIGV4cGlyYXRpb25UaW1lID0gMTAgKiA2MCAqIDEwMDAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy4jaW5uZXIgPSBuZXcgTWFwKFsuLi5zb3VyY2VdLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBba2V5LCB7IHZhbHVlLCB0aW1lc3RhbXA6IGN1cnJlbnRUaW1lIH1dKSk7XG4gICAgICAgIHRoaXMuI2V4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBydW5lIHJlbW92ZXMgYWxsIGV4cGlyZWQgZW50cmllcy5cbiAgICAgKi9cbiAgICBwcnVuZSgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiB0aGlzLiNpbm5lci5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSAtIGVudHJ5LnRpbWVzdGFtcCA+IHRoaXMuI2V4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jaW5uZXIuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIEltcGxlbWVudGluZyB0aGUgTWFwIGludGVyZmFjZVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBrZXkuIFBydW5lcyBleHBpcmVkIGVudHJpZXMuXG4gICAgICogQHBhcmFtIGtleSBmb3IgdGhlIGVudHJ5XG4gICAgICogQHBhcmFtIHZhbHVlIG9mIHRoZSBlbnRyeVxuICAgICAqIEByZXR1cm5zIHRoaXNcbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnBydW5lKCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuI2lubmVyLnNldChrZXksIGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXksIGlmIGl0IGV4aXN0cyBhbmQgaGFzIG5vdCBleHBpcmVkLlxuICAgICAqIEBwYXJhbSBrZXkgS1xuICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSwgb3IgdW5kZWZpbmVkIGlmIHRoZSBrZXkgaXMgbm90IHByZXNlbnQgb3IgaGFzIGV4cGlyZWQuXG4gICAgICovXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuI2lubmVyLmdldChrZXkpO1xuICAgICAgICBpZiAoZW50cnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGVudHJ5LnRpbWVzdGFtcCA+IHRoaXMuI2V4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgICB0aGlzLiNpbm5lci5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgZW50cmllcy5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy4jaW5uZXIuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW50cmllcyByZXR1cm5zIHRoZSBlbnRyaWVzIG9mIHRoZSBtYXAsIHdpdGhvdXQgdGhlIGV4cGlyYXRpb24gdGltZS5cbiAgICAgKiBAcmV0dXJucyBhbiBpdGVyYXRvciBvdmVyIHRoZSBlbnRyaWVzIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgZW50cmllcygpIHtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLiNpbm5lci5lbnRyaWVzKCk7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRvciA9IGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBpdGVyYXRvcikge1xuICAgICAgICAgICAgICAgIHlpZWxkIFtrZXksIHZhbHVlLnZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBnZW5lcmF0b3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsdWVzIHJldHVybnMgdGhlIHZhbHVlcyBvZiB0aGUgbWFwLCB3aXRob3V0IHRoZSBleHBpcmF0aW9uIHRpbWUuXG4gICAgICogQHJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgdmFsdWVzIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgdmFsdWVzKCkge1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuI2lubmVyLnZhbHVlcygpO1xuICAgICAgICBjb25zdCBnZW5lcmF0b3IgPSBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpdGVyYXRvcikge1xuICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRvcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBLZXlzIHJldHVybnMgdGhlIGtleXMgb2YgdGhlIG1hcFxuICAgICAqIEByZXR1cm5zIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIGtleXMgb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaW5uZXIua2V5cygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBmb3JFYWNoIGNhbGxzIHRoZSBjYWxsYmFja2ZuIG9uIGVhY2ggZW50cnkgb2YgdGhlIG1hcC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tmbiB0byBjYWxsIG9uIGVhY2ggZW50cnlcbiAgICAgKiBAcGFyYW0gdGhpc0FyZyB0byB1c2UgYXMgdGhpcyB3aGVuIGNhbGxpbmcgdGhlIGNhbGxiYWNrZm5cbiAgICAgKi9cbiAgICBmb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy4jaW5uZXIuZW50cmllcygpKSB7XG4gICAgICAgICAgICBjYWxsYmFja2ZuLmNhbGwodGhpc0FyZywgdmFsdWUudmFsdWUsIGtleSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogaGFzIHJldHVybnMgdHJ1ZSBpZiB0aGUga2V5IGV4aXN0cyBhbmQgaGFzIG5vdCBleHBpcmVkLlxuICAgICAqIEBwYXJhbSBrZXkgS1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGtleSBleGlzdHMgYW5kIGhhcyBub3QgZXhwaXJlZC5cbiAgICAgKi9cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNpbm5lci5oYXMoa2V5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZGVsZXRlIHRoZSBlbnRyeSBmb3IgdGhlIGdpdmVuIGtleS5cbiAgICAgKiBAcGFyYW0ga2V5IEtcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBrZXkgZXhpc3RlZCBhbmQgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNpbm5lci5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0IHNpemUgb2YgdGhlIG1hcC5cbiAgICAgKiBAcmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jaW5uZXIuc2l6ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBpcmFibGVNYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/expirableMap.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js":
/*!******************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeLeb128: () => (/* binding */ decodeLeb128),\n/* harmony export */   decodeTime: () => (/* binding */ decodeTime)\n/* harmony export */ });\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/candid */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n\nconst MILLISECOND_TO_NANOSECONDS = BigInt(1_000_000);\nconst decodeLeb128 = (buf) => {\n    return (0,_dfinity_candid__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(new _dfinity_candid__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(buf));\n};\n// time is a LEB128-encoded Nat\nconst decodeTime = (buf) => {\n    const timestampNs = decodeLeb128(buf);\n    const timestampMs = timestampNs / MILLISECOND_TO_NANOSECONDS;\n    return new Date(Number(timestampMs));\n};\n//# sourceMappingURL=leb.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL2xlYi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZEO0FBQzdEO0FBQ087QUFDUCxXQUFXLDBEQUFTLEtBQUssNERBQWU7QUFDeEM7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BpcXViZS9vcHMtY29uc29sZS8uLi8uLi9wYWNrYWdlcy9zZGstanMvbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvbGViLmpzP2JkZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZUFycmF5QnVmZmVyLCBsZWJEZWNvZGUgfSBmcm9tICdAZGZpbml0eS9jYW5kaWQnO1xuY29uc3QgTUlMTElTRUNPTkRfVE9fTkFOT1NFQ09ORFMgPSBCaWdJbnQoMV8wMDBfMDAwKTtcbmV4cG9ydCBjb25zdCBkZWNvZGVMZWIxMjggPSAoYnVmKSA9PiB7XG4gICAgcmV0dXJuIGxlYkRlY29kZShuZXcgUGlwZUFycmF5QnVmZmVyKGJ1ZikpO1xufTtcbi8vIHRpbWUgaXMgYSBMRUIxMjgtZW5jb2RlZCBOYXRcbmV4cG9ydCBjb25zdCBkZWNvZGVUaW1lID0gKGJ1ZikgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcE5zID0gZGVjb2RlTGViMTI4KGJ1Zik7XG4gICAgY29uc3QgdGltZXN0YW1wTXMgPSB0aW1lc3RhbXBOcyAvIE1JTExJU0VDT05EX1RPX05BTk9TRUNPTkRTO1xuICAgIHJldHVybiBuZXcgRGF0ZShOdW1iZXIodGltZXN0YW1wTXMpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZWIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/leb.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/random.js":
/*!*********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/random.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomNumber: () => (/* binding */ randomNumber)\n/* harmony export */ });\n/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nconst randomNumber = () => {\n    // determine whether browser crypto is available\n    if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n        const array = new Uint32Array(1);\n        window.crypto.getRandomValues(array);\n        return array[0];\n    }\n    // A second check for webcrypto, in case it is loaded under global instead of window\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        const array = new Uint32Array(1);\n        crypto.getRandomValues(array);\n        return array[0];\n    }\n    // determine whether node crypto is available\n    if (typeof crypto !== 'undefined' && crypto.randomInt) {\n        return crypto.randomInt(0, 0xffffffff);\n    }\n    // fall back to Math.random\n    return Math.floor(Math.random() * 0xffffffff);\n};\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9hZ2VudC9saWIvZXNtL3V0aWxzL3JhbmRvbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BpcXViZS9vcHMtY29uc29sZS8uLi8uLi9wYWNrYWdlcy9zZGstanMvbm9kZV9tb2R1bGVzL0BkZmluaXR5L2FnZW50L2xpYi9lc20vdXRpbHMvcmFuZG9tLmpzP2QxMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdW5zaWduZWQgMzItYml0IGludGVnZXIgYmV0d2VlbiAwIGFuZCAweGZmZmZmZmZmXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhIHJhbmRvbSBudW1iZXJcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbU51bWJlciA9ICgpID0+IHtcbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBicm93c2VyIGNyeXB0byBpcyBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgISF3aW5kb3cuY3J5cHRvICYmICEhd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgICAgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFycmF5WzBdO1xuICAgIH1cbiAgICAvLyBBIHNlY29uZCBjaGVjayBmb3Igd2ViY3J5cHRvLCBpbiBjYXNlIGl0IGlzIGxvYWRlZCB1bmRlciBnbG9iYWwgaW5zdGVhZCBvZiB3aW5kb3dcbiAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG4gICAgICAgIHJldHVybiBhcnJheVswXTtcbiAgICB9XG4gICAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgbm9kZSBjcnlwdG8gaXMgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21JbnQpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21JbnQoMCwgMHhmZmZmZmZmZik7XG4gICAgfVxuICAgIC8vIGZhbGwgYmFjayB0byBNYXRoLnJhbmRvbVxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5kb20uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/utils/random.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/idl.js":
/*!*************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/idl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bool: () => (/* binding */ Bool),\n/* harmony export */   BoolClass: () => (/* binding */ BoolClass),\n/* harmony export */   ConstructType: () => (/* binding */ ConstructType),\n/* harmony export */   Empty: () => (/* binding */ Empty),\n/* harmony export */   EmptyClass: () => (/* binding */ EmptyClass),\n/* harmony export */   FixedIntClass: () => (/* binding */ FixedIntClass),\n/* harmony export */   FixedNatClass: () => (/* binding */ FixedNatClass),\n/* harmony export */   Float32: () => (/* binding */ Float32),\n/* harmony export */   Float64: () => (/* binding */ Float64),\n/* harmony export */   FloatClass: () => (/* binding */ FloatClass),\n/* harmony export */   Func: () => (/* binding */ Func),\n/* harmony export */   FuncClass: () => (/* binding */ FuncClass),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   Int16: () => (/* binding */ Int16),\n/* harmony export */   Int32: () => (/* binding */ Int32),\n/* harmony export */   Int64: () => (/* binding */ Int64),\n/* harmony export */   Int8: () => (/* binding */ Int8),\n/* harmony export */   IntClass: () => (/* binding */ IntClass),\n/* harmony export */   Nat: () => (/* binding */ Nat),\n/* harmony export */   Nat16: () => (/* binding */ Nat16),\n/* harmony export */   Nat32: () => (/* binding */ Nat32),\n/* harmony export */   Nat64: () => (/* binding */ Nat64),\n/* harmony export */   Nat8: () => (/* binding */ Nat8),\n/* harmony export */   NatClass: () => (/* binding */ NatClass),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NullClass: () => (/* binding */ NullClass),\n/* harmony export */   Opt: () => (/* binding */ Opt),\n/* harmony export */   OptClass: () => (/* binding */ OptClass),\n/* harmony export */   PrimitiveType: () => (/* binding */ PrimitiveType),\n/* harmony export */   Principal: () => (/* binding */ Principal),\n/* harmony export */   PrincipalClass: () => (/* binding */ PrincipalClass),\n/* harmony export */   Rec: () => (/* binding */ Rec),\n/* harmony export */   RecClass: () => (/* binding */ RecClass),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   RecordClass: () => (/* binding */ RecordClass),\n/* harmony export */   Reserved: () => (/* binding */ Reserved),\n/* harmony export */   ReservedClass: () => (/* binding */ ReservedClass),\n/* harmony export */   Service: () => (/* binding */ Service),\n/* harmony export */   ServiceClass: () => (/* binding */ ServiceClass),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextClass: () => (/* binding */ TextClass),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   TupleClass: () => (/* binding */ TupleClass),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   Unknown: () => (/* binding */ Unknown),\n/* harmony export */   UnknownClass: () => (/* binding */ UnknownClass),\n/* harmony export */   Variant: () => (/* binding */ Variant),\n/* harmony export */   VariantClass: () => (/* binding */ VariantClass),\n/* harmony export */   Vec: () => (/* binding */ Vec),\n/* harmony export */   VecClass: () => (/* binding */ VecClass),\n/* harmony export */   Visitor: () => (/* binding */ Visitor),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   resetSubtypeCache: () => (/* binding */ resetSubtypeCache),\n/* harmony export */   subtype: () => (/* binding */ subtype)\n/* harmony export */ });\n/* harmony import */ var _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @dfinity/principal */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\");\n/* harmony import */ var _utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/hash.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/hash.js\");\n/* harmony import */ var _utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/leb128.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js\");\n/* harmony import */ var _utils_bigint_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/bigint-math.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n/**\n * This module provides a combinator library to create serializers/deserializers\n * between JavaScript values and IDL used by canisters on the Internet Computer,\n * as documented at https://github.com/dfinity/candid/blob/119703ba342d2fef6ab4972d2541b9fe36ae8e36/spec/Candid.md\n */\nvar IDLTypeIds;\n(function (IDLTypeIds) {\n    IDLTypeIds[IDLTypeIds[\"Null\"] = -1] = \"Null\";\n    IDLTypeIds[IDLTypeIds[\"Bool\"] = -2] = \"Bool\";\n    IDLTypeIds[IDLTypeIds[\"Nat\"] = -3] = \"Nat\";\n    IDLTypeIds[IDLTypeIds[\"Int\"] = -4] = \"Int\";\n    IDLTypeIds[IDLTypeIds[\"Float32\"] = -13] = \"Float32\";\n    IDLTypeIds[IDLTypeIds[\"Float64\"] = -14] = \"Float64\";\n    IDLTypeIds[IDLTypeIds[\"Text\"] = -15] = \"Text\";\n    IDLTypeIds[IDLTypeIds[\"Reserved\"] = -16] = \"Reserved\";\n    IDLTypeIds[IDLTypeIds[\"Empty\"] = -17] = \"Empty\";\n    IDLTypeIds[IDLTypeIds[\"Opt\"] = -18] = \"Opt\";\n    IDLTypeIds[IDLTypeIds[\"Vector\"] = -19] = \"Vector\";\n    IDLTypeIds[IDLTypeIds[\"Record\"] = -20] = \"Record\";\n    IDLTypeIds[IDLTypeIds[\"Variant\"] = -21] = \"Variant\";\n    IDLTypeIds[IDLTypeIds[\"Func\"] = -22] = \"Func\";\n    IDLTypeIds[IDLTypeIds[\"Service\"] = -23] = \"Service\";\n    IDLTypeIds[IDLTypeIds[\"Principal\"] = -24] = \"Principal\";\n})(IDLTypeIds || (IDLTypeIds = {}));\nconst magicNumber = 'DIDL';\nconst toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error\nfunction zipWith(xs, ys, f) {\n    return xs.map((x, i) => f(x, ys[i]));\n}\n/**\n * An IDL Type Table, which precedes the data in the stream.\n */\nclass TypeTable {\n    constructor() {\n        // List of types. Needs to be an array as the index needs to be stable.\n        this._typs = [];\n        this._idx = new Map();\n        this._idxRefCount = new Map();\n    }\n    has(obj) {\n        return this._idx.has(obj.name);\n    }\n    add(type, buf) {\n        const idx = this._typs.length;\n        this._idx.set(type.name, idx);\n        this._idxRefCount.set(idx, 1);\n        this._typs.push(buf);\n    }\n    merge(obj, knot) {\n        const idx = this._idx.get(obj.name);\n        const knotIdx = this._idx.get(knot);\n        if (idx === undefined) {\n            throw new Error('Missing type index for ' + obj);\n        }\n        if (knotIdx === undefined) {\n            throw new Error('Missing type index for ' + knot);\n        }\n        this._typs[idx] = this._typs[knotIdx];\n        // Decrement reference count since we're removing the knot name mapping\n        const knotRefCount = this._getIdxRefCount(knotIdx);\n        this._idxRefCount.set(knotIdx, knotRefCount - 1);\n        this._idx.delete(knot);\n        this._compactFromEnd();\n    }\n    _getIdxRefCount(idx) {\n        return this._idxRefCount.get(idx) || 0;\n    }\n    _compactFromEnd() {\n        // Remove unused entries from the end of the array\n        while (this._typs.length > 0) {\n            const lastIndex = this._typs.length - 1;\n            if (this._getIdxRefCount(lastIndex) > 0) {\n                break;\n            }\n            this._typs.pop();\n            this._idxRefCount.delete(lastIndex);\n        }\n    }\n    encode() {\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._typs.length);\n        const buf = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...this._typs);\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, buf);\n    }\n    indexOf(typeName) {\n        if (!this._idx.has(typeName)) {\n            throw new Error('Missing type index for ' + typeName);\n        }\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(this._idx.get(typeName) || 0);\n    }\n}\nclass Visitor {\n    visitType(_t, _data) {\n        throw new Error('Not implemented');\n    }\n    visitPrimitive(t, data) {\n        return this.visitType(t, data);\n    }\n    visitEmpty(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitBool(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitNull(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitReserved(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitText(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitNumber(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitInt(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitNat(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitFloat(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitFixedInt(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitFixedNat(t, data) {\n        return this.visitNumber(t, data);\n    }\n    visitPrincipal(t, data) {\n        return this.visitPrimitive(t, data);\n    }\n    visitConstruct(t, data) {\n        return this.visitType(t, data);\n    }\n    visitVec(t, _ty, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitOpt(t, _ty, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitRecord(t, _fields, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitTuple(t, components, data) {\n        const fields = components.map((ty, i) => [`_${i}_`, ty]);\n        return this.visitRecord(t, fields, data);\n    }\n    visitVariant(t, _fields, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitRec(_t, ty, data) {\n        return this.visitConstruct(ty, data);\n    }\n    visitFunc(t, data) {\n        return this.visitConstruct(t, data);\n    }\n    visitService(t, data) {\n        return this.visitConstruct(t, data);\n    }\n}\n// We try to use hard-to-accidentally-pick names to avoid potential collisions with other types.\nvar IdlTypeName;\n(function (IdlTypeName) {\n    IdlTypeName[\"EmptyClass\"] = \"__IDL_EmptyClass__\";\n    IdlTypeName[\"UnknownClass\"] = \"__IDL_UnknownClass__\";\n    IdlTypeName[\"BoolClass\"] = \"__IDL_BoolClass__\";\n    IdlTypeName[\"NullClass\"] = \"__IDL_NullClass__\";\n    IdlTypeName[\"ReservedClass\"] = \"__IDL_ReservedClass__\";\n    IdlTypeName[\"TextClass\"] = \"__IDL_TextClass__\";\n    IdlTypeName[\"IntClass\"] = \"__IDL_IntClass__\";\n    IdlTypeName[\"NatClass\"] = \"__IDL_NatClass__\";\n    IdlTypeName[\"FloatClass\"] = \"__IDL_FloatClass__\";\n    IdlTypeName[\"FixedIntClass\"] = \"__IDL_FixedIntClass__\";\n    IdlTypeName[\"FixedNatClass\"] = \"__IDL_FixedNatClass__\";\n    IdlTypeName[\"VecClass\"] = \"__IDL_VecClass__\";\n    IdlTypeName[\"OptClass\"] = \"__IDL_OptClass__\";\n    IdlTypeName[\"RecordClass\"] = \"__IDL_RecordClass__\";\n    IdlTypeName[\"TupleClass\"] = \"__IDL_TupleClass__\";\n    IdlTypeName[\"VariantClass\"] = \"__IDL_VariantClass__\";\n    IdlTypeName[\"RecClass\"] = \"__IDL_RecClass__\";\n    IdlTypeName[\"PrincipalClass\"] = \"__IDL_PrincipalClass__\";\n    IdlTypeName[\"FuncClass\"] = \"__IDL_FuncClass__\";\n    IdlTypeName[\"ServiceClass\"] = \"__IDL_ServiceClass__\";\n})(IdlTypeName || (IdlTypeName = {}));\n/**\n * Represents an IDL type.\n */\nclass Type {\n    /* Display type name */\n    display() {\n        return this.name;\n    }\n    valueToString(x) {\n        return toReadableString(x);\n    }\n    /* Implement `T` in the IDL spec, only needed for non-primitive types */\n    buildTypeTable(typeTable) {\n        if (!typeTable.has(this)) {\n            this._buildTypeTableImpl(typeTable);\n        }\n    }\n}\nclass PrimitiveType extends Type {\n    checkType(t) {\n        if (this.name !== t.name) {\n            throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n        }\n        return t;\n    }\n    _buildTypeTableImpl(_typeTable) {\n        // No type table encoding for Primitive types.\n        return;\n    }\n}\nclass ConstructType extends Type {\n    checkType(t) {\n        if (t instanceof RecClass) {\n            const ty = t.getType();\n            if (typeof ty === 'undefined') {\n                throw new Error('type mismatch with uninitialized type');\n            }\n            return ty;\n        }\n        throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n    }\n    encodeType(typeTable) {\n        return typeTable.indexOf(this.name);\n    }\n}\n/**\n * Represents an IDL Empty, a type which has no inhabitants.\n * Since no values exist for this type, it cannot be serialised or deserialised.\n * Result types like `Result<Text, Empty>` should always succeed.\n */\nclass EmptyClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.EmptyClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.EmptyClass;\n    }\n    accept(v, d) {\n        return v.visitEmpty(this, d);\n    }\n    covariant(x) {\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        throw new Error('Empty cannot appear as a function argument');\n    }\n    valueToString() {\n        throw new Error('Empty cannot appear as a value');\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Empty);\n    }\n    decodeValue() {\n        throw new Error('Empty cannot appear as an output');\n    }\n    get name() {\n        return 'empty';\n    }\n}\n/**\n * Represents an IDL Unknown, a placeholder type for deserialization only.\n * When decoding a value as Unknown, all fields will be retained but the names are only available in\n * hashed form.\n * A deserialized unknown will offer it's actual type by calling the `type()` function.\n * Unknown cannot be serialized and attempting to do so will throw an error.\n */\nclass UnknownClass extends Type {\n    get typeName() {\n        return IdlTypeName.UnknownClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.UnknownClass;\n    }\n    checkType(_t) {\n        throw new Error('Method not implemented for unknown.');\n    }\n    accept(v, d) {\n        throw v.visitType(this, d);\n    }\n    covariant(x) {\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        throw new Error('Unknown cannot appear as a function argument');\n    }\n    valueToString() {\n        throw new Error('Unknown cannot appear as a value');\n    }\n    encodeType() {\n        throw new Error('Unknown cannot be serialized');\n    }\n    decodeValue(b, t) {\n        let decodedValue = t.decodeValue(b, t);\n        if (Object(decodedValue) !== decodedValue) {\n            // decodedValue is primitive. Box it, otherwise we cannot add the type() function.\n            // The type() function is important for primitives because otherwise we cannot tell apart the\n            // different number types.\n            decodedValue = Object(decodedValue);\n        }\n        let typeFunc;\n        if (t instanceof RecClass) {\n            typeFunc = () => t.getType();\n        }\n        else {\n            typeFunc = () => t;\n        }\n        // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property\n        // 'type' which means it would be serialized if the value would be candid encoded again.\n        // This in turn leads to problems if the decoded value is a variant because these values are\n        // only allowed to have a single property.\n        Object.defineProperty(decodedValue, 'type', {\n            value: typeFunc,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        });\n        return decodedValue;\n    }\n    _buildTypeTableImpl() {\n        throw new Error('Unknown cannot be serialized');\n    }\n    get name() {\n        return 'Unknown';\n    }\n}\n/**\n * Represents an IDL Bool\n */\nclass BoolClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.BoolClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.BoolClass;\n    }\n    accept(v, d) {\n        return v.visitBool(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'boolean')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return new Uint8Array([x ? 1 : 0]);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Bool);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        switch ((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeReadUint8)(b)) {\n            case 0:\n                return false;\n            case 1:\n                return true;\n            default:\n                throw new Error('Boolean value out of range');\n        }\n    }\n    get name() {\n        return 'bool';\n    }\n}\n/**\n * Represents an IDL Null\n */\nclass NullClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.NullClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.NullClass;\n    }\n    accept(v, d) {\n        return v.visitNull(this, d);\n    }\n    covariant(x) {\n        if (x === null)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue() {\n        return new Uint8Array(0);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Null);\n    }\n    decodeValue(_b, t) {\n        this.checkType(t);\n        return null;\n    }\n    get name() {\n        return 'null';\n    }\n}\n/**\n * Represents an IDL Reserved\n */\nclass ReservedClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.ReservedClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.ReservedClass;\n    }\n    accept(v, d) {\n        return v.visitReserved(this, d);\n    }\n    covariant(_x) {\n        return true;\n    }\n    encodeValue() {\n        return new Uint8Array(0);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Reserved);\n    }\n    decodeValue(b, t) {\n        if (t.name !== this.name) {\n            t.decodeValue(b, t);\n        }\n        return null;\n    }\n    get name() {\n        return 'reserved';\n    }\n}\n/**\n * Represents an IDL Text\n */\nclass TextClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.TextClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.TextClass;\n    }\n    accept(v, d) {\n        return v.visitText(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'string')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = new TextEncoder().encode(x);\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(buf.byteLength);\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, buf);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Text);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b);\n        const buf = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(b, Number(len));\n        const decoder = new TextDecoder('utf8', { fatal: true });\n        return decoder.decode(buf);\n    }\n    get name() {\n        return 'text';\n    }\n    valueToString(x) {\n        return '\"' + x + '\"';\n    }\n}\n/**\n * Represents an IDL Int\n */\nclass IntClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.IntClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.IntClass;\n    }\n    accept(v, d) {\n        return v.visitInt(this, d);\n    }\n    covariant(x) {\n        // We allow encoding of JavaScript plain numbers.\n        // But we will always decode to bigint.\n        if (typeof x === 'bigint' || Number.isInteger(x))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(x);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Int);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(b);\n    }\n    get name() {\n        return 'int';\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Nat\n */\nclass NatClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.NatClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.NatClass;\n    }\n    accept(v, d) {\n        return v.visitNat(this, d);\n    }\n    covariant(x) {\n        // We allow encoding of JavaScript plain numbers.\n        // But we will always decode to bigint.\n        if ((typeof x === 'bigint' && x >= BigInt(0)) || (Number.isInteger(x) && x >= 0))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(x);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Nat);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b);\n    }\n    get name() {\n        return 'nat';\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Float\n */\nclass FloatClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.FloatClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.FloatClass;\n    }\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n        if (_bits !== 32 && _bits !== 64) {\n            throw new Error('not a valid float type');\n        }\n    }\n    accept(v, d) {\n        return v.visitFloat(this, d);\n    }\n    covariant(x) {\n        if (typeof x === 'number' || x instanceof Number)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = new ArrayBuffer(this._bits / 8);\n        const view = new DataView(buf);\n        if (this._bits === 32) {\n            view.setFloat32(0, x, true);\n        }\n        else {\n            view.setFloat64(0, x, true);\n        }\n        return new Uint8Array(buf);\n    }\n    encodeType() {\n        const opcode = this._bits === 32 ? IDLTypeIds.Float32 : IDLTypeIds.Float64;\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(opcode);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const bytes = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(b, this._bits / 8);\n        const view = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.uint8ToDataView)(bytes);\n        if (this._bits === 32) {\n            return view.getFloat32(0, true);\n        }\n        else {\n            return view.getFloat64(0, true);\n        }\n    }\n    get name() {\n        return 'float' + this._bits;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL fixed-width Int(n)\n */\nclass FixedIntClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.FixedIntClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.FixedIntClass;\n    }\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n    }\n    accept(v, d) {\n        return v.visitFixedInt(this, d);\n    }\n    covariant(x) {\n        const min = (0,_utils_bigint_math_js__WEBPACK_IMPORTED_MODULE_2__.iexp2)(this._bits - 1) * BigInt(-1);\n        const max = (0,_utils_bigint_math_js__WEBPACK_IMPORTED_MODULE_2__.iexp2)(this._bits - 1) - BigInt(1);\n        let ok = false;\n        if (typeof x === 'bigint') {\n            ok = x >= min && x <= max;\n        }\n        else if (Number.isInteger(x)) {\n            const v = BigInt(x);\n            ok = v >= min && v <= max;\n        }\n        else {\n            ok = false;\n        }\n        if (ok)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.writeIntLE)(x, this._bits / 8);\n    }\n    encodeType() {\n        const offset = Math.log2(this._bits) - 3;\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(-9 - offset);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const num = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.readIntLE)(b, this._bits / 8);\n        if (this._bits <= 32) {\n            return Number(num);\n        }\n        else {\n            return num;\n        }\n    }\n    get name() {\n        return `int${this._bits}`;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL fixed-width Nat(n)\n */\nclass FixedNatClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.FixedNatClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.FixedNatClass;\n    }\n    constructor(_bits) {\n        super();\n        this._bits = _bits;\n    }\n    accept(v, d) {\n        return v.visitFixedNat(this, d);\n    }\n    covariant(x) {\n        const max = (0,_utils_bigint_math_js__WEBPACK_IMPORTED_MODULE_2__.iexp2)(this._bits);\n        let ok = false;\n        if (typeof x === 'bigint' && x >= BigInt(0)) {\n            ok = x < max;\n        }\n        else if (Number.isInteger(x) && x >= 0) {\n            const v = BigInt(x);\n            ok = v < max;\n        }\n        else {\n            ok = false;\n        }\n        if (ok)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.writeUIntLE)(x, this._bits / 8);\n    }\n    encodeType() {\n        const offset = Math.log2(this._bits) - 3;\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(-5 - offset);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        const num = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.readUIntLE)(b, this._bits / 8);\n        if (this._bits <= 32) {\n            return Number(num);\n        }\n        else {\n            return num;\n        }\n    }\n    get name() {\n        return `nat${this._bits}`;\n    }\n    valueToString(x) {\n        return x.toString();\n    }\n}\n/**\n * Represents an IDL Array\n *\n * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).\n * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.\n * @param {Type} t\n */\nclass VecClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.VecClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.VecClass;\n    }\n    constructor(_type) {\n        super();\n        this._type = _type;\n        // If true, this vector is really a blob and we can just use memcpy.\n        //\n        // NOTE:\n        // With support of encoding/dencoding of TypedArrays, this optimization is\n        // only used when plain array of bytes are passed as encoding input in order\n        // to be backward compatible.\n        this._blobOptimization = false;\n        if (_type instanceof FixedNatClass && _type._bits === 8) {\n            this._blobOptimization = true;\n        }\n    }\n    accept(v, d) {\n        return v.visitVec(this, this._type, d);\n    }\n    covariant(x) {\n        // Special case for ArrayBuffer\n        const bits = this._type instanceof FixedNatClass\n            ? this._type._bits\n            : this._type instanceof FixedIntClass\n                ? this._type._bits\n                : 0;\n        if ((ArrayBuffer.isView(x) && bits == x.BYTES_PER_ELEMENT * 8) ||\n            (Array.isArray(x) &&\n                x.every((v, idx) => {\n                    try {\n                        return this._type.covariant(v);\n                    }\n                    catch (e) {\n                        throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${idx} -> ${e.message}`);\n                    }\n                })))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(x.length);\n        if (this._blobOptimization) {\n            return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(x));\n        }\n        if (ArrayBuffer.isView(x)) {\n            // Handle TypedArrays with endianness concerns\n            if (x instanceof Int16Array || x instanceof Uint16Array) {\n                const buffer = new DataView(new ArrayBuffer(x.length * 2));\n                for (let i = 0; i < x.length; i++) {\n                    if (x instanceof Int16Array) {\n                        buffer.setInt16(i * 2, x[i], true); // true = little-endian\n                    }\n                    else {\n                        buffer.setUint16(i * 2, x[i], true);\n                    }\n                }\n                return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(buffer.buffer));\n            }\n            else if (x instanceof Int32Array || x instanceof Uint32Array) {\n                const buffer = new DataView(new ArrayBuffer(x.length * 4));\n                for (let i = 0; i < x.length; i++) {\n                    if (x instanceof Int32Array) {\n                        buffer.setInt32(i * 4, x[i], true);\n                    }\n                    else {\n                        buffer.setUint32(i * 4, x[i], true);\n                    }\n                }\n                return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(buffer.buffer));\n            }\n            else if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n                const buffer = new DataView(new ArrayBuffer(x.length * 8));\n                for (let i = 0; i < x.length; i++) {\n                    if (x instanceof BigInt64Array) {\n                        buffer.setBigInt64(i * 8, x[i], true);\n                    }\n                    else {\n                        buffer.setBigUint64(i * 8, x[i], true);\n                    }\n                }\n                return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(buffer.buffer));\n            }\n            else {\n                // For Uint8Array, Int8Array, etc. that don't have endianness concerns\n                return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(len, new Uint8Array(x.buffer, x.byteOffset, x.byteLength));\n            }\n        }\n        const buf = new _utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(new Uint8Array(len.byteLength + x.length), 0);\n        buf.write(len);\n        for (const d of x) {\n            const encoded = this._type.encodeValue(d);\n            buf.write(new Uint8Array(encoded));\n        }\n        return buf.buffer;\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._type.buildTypeTable(typeTable);\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Vector);\n        const buffer = this._type.encodeType(typeTable);\n        typeTable.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, buffer));\n    }\n    decodeValue(b, t) {\n        const vec = this.checkType(t);\n        if (!(vec instanceof VecClass)) {\n            throw new Error('Not a vector type');\n        }\n        const len = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b));\n        if (this._type instanceof FixedNatClass) {\n            if (this._type._bits == 8) {\n                return new Uint8Array(b.read(len));\n            }\n            if (this._type._bits == 16) {\n                const bytes = b.read(len * 2);\n                // Check if we need to swap bytes for endianness\n                const u16 = new Uint16Array(bytes.buffer, bytes.byteOffset, len);\n                return u16;\n            }\n            if (this._type._bits == 32) {\n                const bytes = b.read(len * 4);\n                const u32 = new Uint32Array(bytes.buffer, bytes.byteOffset, len);\n                return u32;\n            }\n            if (this._type._bits == 64) {\n                return new BigUint64Array(b.read(len * 8).buffer);\n            }\n        }\n        if (this._type instanceof FixedIntClass) {\n            if (this._type._bits == 8) {\n                return new Int8Array(b.read(len));\n            }\n            if (this._type._bits == 16) {\n                const bytes = b.read(len * 2);\n                // Create a DataView to properly handle endianness\n                const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n                // Create result array with correct endianness\n                const result = new Int16Array(len);\n                for (let i = 0; i < len; i++) {\n                    // Read each value as little-endian (Candid wire format is little-endian)\n                    result[i] = view.getInt16(i * 2, true);\n                }\n                return result;\n            }\n            if (this._type._bits == 32) {\n                const bytes = b.read(len * 4);\n                const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n                const result = new Int32Array(len);\n                for (let i = 0; i < len; i++) {\n                    result[i] = view.getInt32(i * 4, true);\n                }\n                return result;\n            }\n            if (this._type._bits == 64) {\n                const bytes = b.read(len * 8);\n                const view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n                const result = new BigInt64Array(len);\n                for (let i = 0; i < len; i++) {\n                    result[i] = view.getBigInt64(i * 8, true);\n                }\n                return result;\n            }\n        }\n        const rets = [];\n        for (let i = 0; i < len; i++) {\n            rets.push(this._type.decodeValue(b, vec._type));\n        }\n        return rets;\n    }\n    get name() {\n        return `vec ${this._type.name}`;\n    }\n    display() {\n        return `vec ${this._type.display()}`;\n    }\n    valueToString(x) {\n        const elements = x.map(e => this._type.valueToString(e));\n        return 'vec {' + elements.join('; ') + '}';\n    }\n}\n/**\n * Represents an IDL Option\n * @param {Type} t\n */\nclass OptClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.OptClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.OptClass;\n    }\n    constructor(_type) {\n        super();\n        this._type = _type;\n    }\n    accept(v, d) {\n        return v.visitOpt(this, this._type, d);\n    }\n    covariant(x) {\n        try {\n            if (Array.isArray(x) && (x.length === 0 || (x.length === 1 && this._type.covariant(x[0]))))\n                return true;\n        }\n        catch (e) {\n            throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)} \\n\\n-> ${e.message}`);\n        }\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        if (x.length === 0) {\n            return new Uint8Array([0]);\n        }\n        else {\n            return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), this._type.encodeValue(x[0]));\n        }\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._type.buildTypeTable(typeTable);\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Opt);\n        const buffer = this._type.encodeType(typeTable);\n        typeTable.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, buffer));\n    }\n    decodeValue(b, t) {\n        if (t instanceof NullClass) {\n            return [];\n        }\n        if (t instanceof ReservedClass) {\n            return [];\n        }\n        let wireType = t;\n        // unfold wireType, if needed\n        if (t instanceof RecClass) {\n            const ty = t.getType();\n            if (typeof ty === 'undefined') {\n                throw new Error('type mismatch with uninitialized type');\n            }\n            else\n                wireType = ty;\n        }\n        if (wireType instanceof OptClass) {\n            switch ((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeReadUint8)(b)) {\n                case 0:\n                    return [];\n                case 1: {\n                    // Save the current state of the Pipe `b` to allow rollback in case of an error\n                    const checkpoint = b.save();\n                    try {\n                        // Attempt to decode a value using the `_type` of the current instance\n                        const v = this._type.decodeValue(b, wireType._type);\n                        return [v];\n                    }\n                    catch (e) {\n                        // If an error occurs during decoding, restore the Pipe `b` to its previous state\n                        b.restore(checkpoint);\n                        // Skip the value at the current wire type to advance the Pipe `b` position\n                        wireType._type.decodeValue(b, wireType._type);\n                        // Return an empty array to indicate a `none` value\n                        return [];\n                    }\n                }\n                default:\n                    throw new Error('Not an option value');\n            }\n        }\n        else if (\n        // this check corresponds to `not (null <: <t>)` in the spec\n        this._type instanceof NullClass ||\n            this._type instanceof OptClass ||\n            this._type instanceof ReservedClass) {\n            // null <: <t> :\n            // skip value at wire type (to advance b) and return \"null\", i.e. []\n            wireType.decodeValue(b, wireType);\n            return [];\n        }\n        else {\n            // not (null <: t) :\n            // try constituent type\n            const checkpoint = b.save();\n            try {\n                const v = this._type.decodeValue(b, t);\n                return [v];\n            }\n            catch (e) {\n                // decoding failed, but this is opt, so return \"null\", i.e. []\n                b.restore(checkpoint);\n                // skip value at wire type (to advance b)\n                wireType.decodeValue(b, t);\n                // return \"null\"\n                return [];\n            }\n        }\n    }\n    get name() {\n        return `opt ${this._type.name}`;\n    }\n    display() {\n        return `opt ${this._type.display()}`;\n    }\n    valueToString(x) {\n        if (x.length === 0) {\n            return 'null';\n        }\n        else {\n            return `opt ${this._type.valueToString(x[0])}`;\n        }\n    }\n}\n/**\n * Represents an IDL Record\n * @param {object} [fields] - mapping of function name to Type\n */\nclass RecordClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.RecordClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        // TupleClass extends RecordClass, so we need to check both here\n        return (instance.typeName === IdlTypeName.RecordClass || instance.typeName === IdlTypeName.TupleClass);\n    }\n    constructor(fields = {}) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(a[0]) - (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(b[0]));\n    }\n    accept(v, d) {\n        return v.visitRecord(this, this._fields, d);\n    }\n    tryAsTuple() {\n        const res = [];\n        for (let i = 0; i < this._fields.length; i++) {\n            const [key, type] = this._fields[i];\n            if (key !== `_${i}_`) {\n                return null;\n            }\n            res.push(type);\n        }\n        return res;\n    }\n    covariant(x) {\n        if (typeof x === 'object' &&\n            this._fields.every(([k, t]) => {\n                // eslint-disable-next-line\n                if (!x.hasOwnProperty(k)) {\n                    throw new Error(`Record is missing key \"${k}\".`);\n                }\n                try {\n                    return t.covariant(x[k]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nfield ${k} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const values = this._fields.map(([key]) => x[key]);\n        const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...bufs);\n    }\n    _buildTypeTableImpl(T) {\n        this._fields.forEach(([_, value]) => value.buildTypeTable(T));\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Record);\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._fields.length);\n        const fields = this._fields.map(([key, value]) => (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)((0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(key)), value.encodeType(T)));\n        T.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...fields)));\n    }\n    decodeValue(b, t) {\n        const record = this.checkType(t);\n        if (!(record instanceof RecordClass)) {\n            throw new Error('Not a record type');\n        }\n        const x = {};\n        let expectedRecordIdx = 0;\n        let actualRecordIdx = 0;\n        while (actualRecordIdx < record._fields.length) {\n            const [hash, type] = record._fields[actualRecordIdx];\n            if (expectedRecordIdx >= this._fields.length) {\n                // skip unexpected left over fields present on the wire\n                type.decodeValue(b, type);\n                actualRecordIdx++;\n                continue;\n            }\n            const [expectKey, expectType] = this._fields[expectedRecordIdx];\n            const expectedId = (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(this._fields[expectedRecordIdx][0]);\n            const actualId = (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(hash);\n            if (expectedId === actualId) {\n                // the current field on the wire matches the expected field\n                x[expectKey] = expectType.decodeValue(b, type);\n                expectedRecordIdx++;\n                actualRecordIdx++;\n            }\n            else if (actualId > expectedId) {\n                // The expected field does not exist on the wire\n                if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n                    x[expectKey] = [];\n                    expectedRecordIdx++;\n                }\n                else {\n                    throw new Error('Cannot find required field ' + expectKey);\n                }\n            }\n            else {\n                // The field on the wire does not exist in the output type, so we can skip it\n                type.decodeValue(b, type);\n                actualRecordIdx++;\n            }\n        }\n        // initialize left over expected optional fields\n        for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {\n            if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n                // TODO this assumes null value in opt is represented as []\n                x[expectKey] = [];\n            }\n            else {\n                throw new Error('Cannot find required field ' + expectKey);\n            }\n        }\n        return x;\n    }\n    get fieldsAsObject() {\n        const fields = {};\n        for (const [name, ty] of this._fields) {\n            fields[(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(name)] = ty;\n        }\n        return fields;\n    }\n    get name() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n        return `record {${fields.join('; ')}}`;\n    }\n    display() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.display());\n        return `record {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        const values = this._fields.map(([key]) => x[key]);\n        const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));\n        return `record {${fields.join('; ')}}`;\n    }\n}\n/**\n * Represents Tuple, a syntactic sugar for Record.\n * @param {Type} components\n */\nclass TupleClass extends RecordClass {\n    get typeName() {\n        return IdlTypeName.TupleClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.TupleClass;\n    }\n    constructor(_components) {\n        const x = {};\n        _components.forEach((e, i) => (x['_' + i + '_'] = e));\n        super(x);\n        this._components = _components;\n    }\n    accept(v, d) {\n        return v.visitTuple(this, this._components, d);\n    }\n    covariant(x) {\n        // `>=` because tuples can be covariant when encoded.\n        if (Array.isArray(x) &&\n            x.length >= this._fields.length &&\n            this._components.every((t, i) => {\n                try {\n                    return t.covariant(x[i]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${i} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...bufs);\n    }\n    decodeValue(b, t) {\n        const tuple = this.checkType(t);\n        if (!(tuple instanceof TupleClass)) {\n            throw new Error('not a tuple type');\n        }\n        if (tuple._components.length < this._components.length) {\n            throw new Error('tuple mismatch');\n        }\n        const res = [];\n        for (const [i, wireType] of tuple._components.entries()) {\n            if (i >= this._components.length) {\n                // skip value\n                wireType.decodeValue(b, wireType);\n            }\n            else {\n                res.push(this._components[i].decodeValue(b, wireType));\n            }\n        }\n        return res;\n    }\n    display() {\n        const fields = this._components.map(value => value.display());\n        return `record {${fields.join('; ')}}`;\n    }\n    valueToString(values) {\n        const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));\n        return `record {${fields.join('; ')}}`;\n    }\n}\n/**\n * Represents an IDL Variant\n * @param {object} [fields] - mapping of function name to Type\n */\nclass VariantClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.VariantClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.VariantClass;\n    }\n    constructor(fields = {}) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(a[0]) - (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(b[0]));\n    }\n    accept(v, d) {\n        return v.visitVariant(this, this._fields, d);\n    }\n    covariant(x) {\n        if (typeof x === 'object' &&\n            Object.entries(x).length === 1 &&\n            this._fields.every(([k, v]) => {\n                try {\n                    // eslint-disable-next-line\n                    return !x.hasOwnProperty(k) || v.covariant(x[k]);\n                }\n                catch (e) {\n                    throw new Error(`Invalid ${this.display()} argument: \\n\\nvariant ${k} -> ${e.message}`);\n                }\n            }))\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        for (let i = 0; i < this._fields.length; i++) {\n            const [name, type] = this._fields[i];\n            // eslint-disable-next-line\n            if (x.hasOwnProperty(name)) {\n                const idx = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(i);\n                const buf = type.encodeValue(x[name]);\n                return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(idx, buf);\n            }\n        }\n        throw Error('Variant has no data: ' + x);\n    }\n    _buildTypeTableImpl(typeTable) {\n        this._fields.forEach(([, type]) => {\n            type.buildTypeTable(typeTable);\n        });\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Variant);\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._fields.length);\n        const fields = this._fields.map(([key, value]) => (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)((0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(key)), value.encodeType(typeTable)));\n        typeTable.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, ...fields));\n    }\n    decodeValue(b, t) {\n        const variant = this.checkType(t);\n        if (!(variant instanceof VariantClass)) {\n            throw new Error('Not a variant type');\n        }\n        const idx = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b));\n        if (idx >= variant._fields.length) {\n            throw Error('Invalid variant index: ' + idx);\n        }\n        const [wireHash, wireType] = variant._fields[idx];\n        for (const [key, expectType] of this._fields) {\n            if ((0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(wireHash) === (0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(key)) {\n                const value = expectType.decodeValue(b, wireType);\n                return { [key]: value };\n            }\n        }\n        throw new Error('Cannot find field hash ' + wireHash);\n    }\n    get name() {\n        const fields = this._fields.map(([key, type]) => key + ':' + type.name);\n        return `variant {${fields.join('; ')}}`;\n    }\n    display() {\n        const fields = this._fields.map(([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`));\n        return `variant {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        for (const [name, type] of this._fields) {\n            // eslint-disable-next-line\n            if (x.hasOwnProperty(name)) {\n                const value = type.valueToString(x[name]);\n                if (value === 'null') {\n                    return `variant {${name}}`;\n                }\n                else {\n                    return `variant {${name}=${value}}`;\n                }\n            }\n        }\n        throw new Error('Variant has no data: ' + x);\n    }\n    get alternativesAsObject() {\n        const alternatives = {};\n        for (const [name, ty] of this._fields) {\n            alternatives[(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(name)] = ty;\n        }\n        return alternatives;\n    }\n}\n/**\n * Represents a reference to an IDL type, used for defining recursive data\n * types.\n */\nclass RecClass extends ConstructType {\n    constructor() {\n        super(...arguments);\n        this._id = RecClass._counter++;\n    }\n    get typeName() {\n        return IdlTypeName.RecClass;\n    }\n    static { this._counter = 0; }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.RecClass;\n    }\n    accept(v, d) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return v.visitRec(this, this._type, d);\n    }\n    fill(t) {\n        this._type = t;\n    }\n    getType() {\n        return this._type;\n    }\n    covariant(x) {\n        if (this._type ? this._type.covariant(x) : false)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.encodeValue(x);\n    }\n    _buildTypeTableImpl(typeTable) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        typeTable.add(this, new Uint8Array([]));\n        this._type.buildTypeTable(typeTable);\n        typeTable.merge(this, this._type.name);\n    }\n    decodeValue(b, t) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.decodeValue(b, t);\n    }\n    get name() {\n        return `rec_${this._id}`;\n    }\n    display() {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return `μ${this.name}.${this._type.name}`;\n    }\n    valueToString(x) {\n        if (!this._type) {\n            throw Error('Recursive type uninitialized.');\n        }\n        return this._type.valueToString(x);\n    }\n}\nfunction decodePrincipalId(b) {\n    const x = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeReadUint8)(b);\n    if (x !== 1) {\n        throw new Error('Cannot decode principal');\n    }\n    const len = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b));\n    return _dfinity_principal__WEBPACK_IMPORTED_MODULE_4__.Principal.fromUint8Array(new Uint8Array((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(b, len)));\n}\n/**\n * Represents an IDL principal reference\n */\nclass PrincipalClass extends PrimitiveType {\n    get typeName() {\n        return IdlTypeName.PrincipalClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.PrincipalClass;\n    }\n    accept(v, d) {\n        return v.visitPrincipal(this, d);\n    }\n    covariant(x) {\n        if (x && x._isPrincipal)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = x.toUint8Array();\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(buf.byteLength);\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n    }\n    encodeType() {\n        return (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Principal);\n    }\n    decodeValue(b, t) {\n        this.checkType(t);\n        return decodePrincipalId(b);\n    }\n    get name() {\n        return 'principal';\n    }\n    valueToString(x) {\n        return `${this.name} \"${x.toText()}\"`;\n    }\n}\n/**\n * Represents an IDL function reference.\n * @param argTypes Argument types.\n * @param retTypes Return types.\n * @param annotations Function annotations.\n */\nclass FuncClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.FuncClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.FuncClass;\n    }\n    static argsToString(types, v) {\n        if (types.length !== v.length) {\n            throw new Error('arity mismatch');\n        }\n        return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';\n    }\n    constructor(argTypes, retTypes, annotations = []) {\n        super();\n        this.argTypes = argTypes;\n        this.retTypes = retTypes;\n        this.annotations = annotations;\n    }\n    accept(v, d) {\n        return v.visitFunc(this, d);\n    }\n    covariant(x) {\n        if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string')\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue([principal, methodName]) {\n        const buf = principal.toUint8Array();\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(buf.byteLength);\n        const canister = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n        const method = new TextEncoder().encode(methodName);\n        const methodLen = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(method.byteLength);\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), canister, methodLen, method);\n    }\n    _buildTypeTableImpl(T) {\n        this.argTypes.forEach(arg => arg.buildTypeTable(T));\n        this.retTypes.forEach(arg => arg.buildTypeTable(T));\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Func);\n        const argLen = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this.argTypes.length);\n        const args = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.argTypes.map(arg => arg.encodeType(T)));\n        const retLen = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this.retTypes.length);\n        const rets = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.retTypes.map(arg => arg.encodeType(T)));\n        const annLen = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this.annotations.length);\n        const anns = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...this.annotations.map(a => this.encodeAnnotation(a)));\n        T.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, argLen, args, retLen, rets, annLen, anns));\n    }\n    decodeValue(b, t) {\n        const tt = t instanceof RecClass ? (t.getType() ?? t) : t;\n        if (!subtype(tt, this)) {\n            throw new Error(`Cannot decode function reference at type ${this.display()} from wire type ${tt.display()}`);\n        }\n        const x = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeReadUint8)(b);\n        if (x !== 1) {\n            throw new Error('Cannot decode function reference');\n        }\n        const canister = decodePrincipalId(b);\n        const mLen = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(b));\n        const buf = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(b, mLen);\n        const decoder = new TextDecoder('utf8', { fatal: true });\n        const method = decoder.decode(buf);\n        return [canister, method];\n    }\n    get name() {\n        const args = this.argTypes.map(arg => arg.name).join(', ');\n        const rets = this.retTypes.map(arg => arg.name).join(', ');\n        const annon = ' ' + this.annotations.join(' ');\n        return `(${args}) -> (${rets})${annon}`;\n    }\n    valueToString([principal, str]) {\n        return `func \"${principal.toText()}\".${str}`;\n    }\n    display() {\n        const args = this.argTypes.map(arg => arg.display()).join(', ');\n        const rets = this.retTypes.map(arg => arg.display()).join(', ');\n        const annon = ' ' + this.annotations.join(' ');\n        return `(${args}) → (${rets})${annon}`;\n    }\n    encodeAnnotation(ann) {\n        if (ann === 'query') {\n            return new Uint8Array([1]);\n        }\n        else if (ann === 'oneway') {\n            return new Uint8Array([2]);\n        }\n        else if (ann === 'composite_query') {\n            return new Uint8Array([3]);\n        }\n        else {\n            throw new Error('Illegal function annotation');\n        }\n    }\n}\nclass ServiceClass extends ConstructType {\n    get typeName() {\n        return IdlTypeName.ServiceClass;\n    }\n    static [Symbol.hasInstance](instance) {\n        return instance.typeName === IdlTypeName.ServiceClass;\n    }\n    constructor(fields) {\n        super();\n        this._fields = Object.entries(fields).sort((a, b) => {\n            if (a[0] < b[0]) {\n                return -1;\n            }\n            if (a[0] > b[0]) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    accept(v, d) {\n        return v.visitService(this, d);\n    }\n    covariant(x) {\n        if (x && x._isPrincipal)\n            return true;\n        throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n    }\n    encodeValue(x) {\n        const buf = x.toUint8Array();\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(buf.length);\n        return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(new Uint8Array([1]), len, buf);\n    }\n    _buildTypeTableImpl(T) {\n        this._fields.forEach(([_, func]) => func.buildTypeTable(T));\n        const opCode = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebEncode)(IDLTypeIds.Service);\n        const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(this._fields.length);\n        const meths = this._fields.map(([label, func]) => {\n            const labelBuf = new TextEncoder().encode(label);\n            const labelLen = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(labelBuf.length);\n            return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(labelLen, labelBuf, func.encodeType(T));\n        });\n        T.add(this, (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(opCode, len, ...meths));\n    }\n    decodeValue(b, t) {\n        const tt = t instanceof RecClass ? (t.getType() ?? t) : t;\n        if (!subtype(tt, this)) {\n            throw new Error(`Cannot decode service reference at type ${this.display()} from wire type ${tt.display()}`);\n        }\n        return decodePrincipalId(b);\n    }\n    get name() {\n        const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n        return `service {${fields.join('; ')}}`;\n    }\n    valueToString(x) {\n        return `service \"${x.toText()}\"`;\n    }\n    fieldsAsObject() {\n        const fields = {};\n        for (const [name, ty] of this._fields) {\n            fields[name] = ty;\n        }\n        return fields;\n    }\n}\n/**\n * Takes an unknown value and returns a string representation of it.\n * @param x - unknown value\n * @returns {string} string representation of the value\n */\nfunction toReadableString(x) {\n    const str = JSON.stringify(x, (_key, value) => typeof value === 'bigint' ? `BigInt(${value})` : value);\n    return str && str.length > toReadableString_max\n        ? str.substring(0, toReadableString_max - 3) + '...'\n        : str;\n}\n/**\n * Encode a array of values\n * @param argTypes - array of Types\n * @param args - array of values\n * @returns {Uint8Array} serialised value\n */\nfunction encode(argTypes, args) {\n    if (args.length < argTypes.length) {\n        throw Error('Wrong number of message arguments');\n    }\n    const typeTable = new TypeTable();\n    argTypes.forEach(t => t.buildTypeTable(typeTable));\n    const magic = new TextEncoder().encode(magicNumber);\n    const table = typeTable.encode();\n    const len = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebEncode)(args.length);\n    const typs = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...argTypes.map(t => t.encodeType(typeTable)));\n    const vals = (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(...zipWith(argTypes, args, (t, x) => {\n        try {\n            t.covariant(x);\n        }\n        catch (e) {\n            const err = new Error(e.message + '\\n\\n');\n            throw err;\n        }\n        return t.encodeValue(x);\n    }));\n    return (0,_utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.concat)(magic, table, len, typs, vals);\n}\n/**\n * Decode a binary value\n * @param retTypes - Types expected in the buffer.\n * @param bytes - hex-encoded string, or buffer.\n * @returns Value deserialised to JS type\n */\nfunction decode(retTypes, bytes) {\n    const b = new _utils_buffer_js__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(bytes);\n    if (bytes.byteLength < magicNumber.length) {\n        throw new Error('Message length smaller than magic number');\n    }\n    const magicBuffer = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(b, magicNumber.length);\n    const magic = new TextDecoder().decode(magicBuffer);\n    if (magic !== magicNumber) {\n        throw new Error('Wrong magic number: ' + JSON.stringify(magic));\n    }\n    function readTypeTable(pipe) {\n        const typeTable = [];\n        const len = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n        for (let i = 0; i < len; i++) {\n            const ty = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe));\n            switch (ty) {\n                case IDLTypeIds.Opt:\n                case IDLTypeIds.Vector: {\n                    const t = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe));\n                    typeTable.push([ty, t]);\n                    break;\n                }\n                case IDLTypeIds.Record:\n                case IDLTypeIds.Variant: {\n                    const fields = [];\n                    let objectLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                    let prevHash;\n                    while (objectLength--) {\n                        const hash = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                        if (hash >= Math.pow(2, 32)) {\n                            throw new Error('field id out of 32-bit range');\n                        }\n                        if (typeof prevHash === 'number' && prevHash >= hash) {\n                            throw new Error('field id collision or not sorted');\n                        }\n                        prevHash = hash;\n                        const t = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe));\n                        fields.push([hash, t]);\n                    }\n                    typeTable.push([ty, fields]);\n                    break;\n                }\n                case IDLTypeIds.Func: {\n                    const args = [];\n                    let argLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                    while (argLength--) {\n                        args.push(Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe)));\n                    }\n                    const returnValues = [];\n                    let returnValuesLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                    while (returnValuesLength--) {\n                        returnValues.push(Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe)));\n                    }\n                    const annotations = [];\n                    let annotationLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                    while (annotationLength--) {\n                        const annotation = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                        switch (annotation) {\n                            case 1: {\n                                annotations.push('query');\n                                break;\n                            }\n                            case 2: {\n                                annotations.push('oneway');\n                                break;\n                            }\n                            case 3: {\n                                annotations.push('composite_query');\n                                break;\n                            }\n                            default:\n                                throw new Error('unknown annotation');\n                        }\n                    }\n                    typeTable.push([ty, [args, returnValues, annotations]]);\n                    break;\n                }\n                case IDLTypeIds.Service: {\n                    let servLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                    const methods = [];\n                    while (servLength--) {\n                        const nameLength = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n                        const funcName = new TextDecoder().decode((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.safeRead)(pipe, nameLength));\n                        const funcType = (0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe);\n                        methods.push([funcName, funcType]);\n                    }\n                    typeTable.push([ty, methods]);\n                    break;\n                }\n                default:\n                    throw new Error('Illegal op_code: ' + ty);\n            }\n        }\n        const rawList = [];\n        const length = Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.lebDecode)(pipe));\n        for (let i = 0; i < length; i++) {\n            rawList.push(Number((0,_utils_leb128_js__WEBPACK_IMPORTED_MODULE_0__.slebDecode)(pipe)));\n        }\n        return [typeTable, rawList];\n    }\n    const [rawTable, rawTypes] = readTypeTable(b);\n    if (rawTypes.length < retTypes.length) {\n        throw new Error('Wrong number of return values');\n    }\n    const table = rawTable.map(_ => Rec());\n    function getType(t) {\n        if (t < -24) {\n            throw new Error('future value not supported');\n        }\n        if (t < 0) {\n            switch (t) {\n                case -1:\n                    return Null;\n                case -2:\n                    return Bool;\n                case -3:\n                    return Nat;\n                case -4:\n                    return Int;\n                case -5:\n                    return Nat8;\n                case -6:\n                    return Nat16;\n                case -7:\n                    return Nat32;\n                case -8:\n                    return Nat64;\n                case -9:\n                    return Int8;\n                case -10:\n                    return Int16;\n                case -11:\n                    return Int32;\n                case -12:\n                    return Int64;\n                case -13:\n                    return Float32;\n                case -14:\n                    return Float64;\n                case -15:\n                    return Text;\n                case -16:\n                    return Reserved;\n                case -17:\n                    return Empty;\n                case -24:\n                    return Principal;\n                default:\n                    throw new Error('Illegal op_code: ' + t);\n            }\n        }\n        if (t >= rawTable.length) {\n            throw new Error('type index out of range');\n        }\n        return table[t];\n    }\n    function buildType(entry) {\n        switch (entry[0]) {\n            case IDLTypeIds.Vector: {\n                const ty = getType(entry[1]);\n                return Vec(ty);\n            }\n            case IDLTypeIds.Opt: {\n                const ty = getType(entry[1]);\n                return Opt(ty);\n            }\n            case IDLTypeIds.Record: {\n                const fields = {};\n                for (const [hash, ty] of entry[1]) {\n                    const name = `_${hash}_`;\n                    fields[name] = getType(ty);\n                }\n                const record = Record(fields);\n                const tuple = record.tryAsTuple();\n                if (Array.isArray(tuple)) {\n                    return Tuple(...tuple);\n                }\n                else {\n                    return record;\n                }\n            }\n            case IDLTypeIds.Variant: {\n                const fields = {};\n                for (const [hash, ty] of entry[1]) {\n                    const name = `_${hash}_`;\n                    fields[name] = getType(ty);\n                }\n                return Variant(fields);\n            }\n            case IDLTypeIds.Func: {\n                const [args, returnValues, annotations] = entry[1];\n                return Func(args.map((t) => getType(t)), returnValues.map((t) => getType(t)), annotations);\n            }\n            case IDLTypeIds.Service: {\n                const rec = {};\n                const methods = entry[1];\n                for (const [name, typeRef] of methods) {\n                    let type = getType(typeRef);\n                    if (type instanceof RecClass) {\n                        // unpack reference type\n                        type = type.getType();\n                    }\n                    if (!(type instanceof FuncClass)) {\n                        throw new Error('Illegal service definition: services can only contain functions');\n                    }\n                    rec[name] = type;\n                }\n                return Service(rec);\n            }\n            default:\n                throw new Error('Illegal op_code: ' + entry[0]);\n        }\n    }\n    rawTable.forEach((entry, i) => {\n        // Process function type first, so that we can construct the correct service type\n        if (entry[0] === IDLTypeIds.Func) {\n            const t = buildType(entry);\n            table[i].fill(t);\n        }\n    });\n    rawTable.forEach((entry, i) => {\n        if (entry[0] !== IDLTypeIds.Func) {\n            const t = buildType(entry);\n            table[i].fill(t);\n        }\n    });\n    resetSubtypeCache();\n    const types = rawTypes.map(t => getType(t));\n    try {\n        const output = retTypes.map((t, i) => {\n            return t.decodeValue(b, types[i]);\n        });\n        // skip unused values\n        for (let ind = retTypes.length; ind < types.length; ind++) {\n            types[ind].decodeValue(b, types[ind]);\n        }\n        if (b.byteLength > 0) {\n            throw new Error('decode: Left-over bytes');\n        }\n        return output;\n    }\n    finally {\n        resetSubtypeCache();\n    }\n}\n// Export Types instances.\nconst Empty = new EmptyClass();\nconst Reserved = new ReservedClass();\n/**\n * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.\n */\nconst Unknown = new UnknownClass();\nconst Bool = new BoolClass();\nconst Null = new NullClass();\nconst Text = new TextClass();\nconst Int = new IntClass();\nconst Nat = new NatClass();\nconst Float32 = new FloatClass(32);\nconst Float64 = new FloatClass(64);\nconst Int8 = new FixedIntClass(8);\nconst Int16 = new FixedIntClass(16);\nconst Int32 = new FixedIntClass(32);\nconst Int64 = new FixedIntClass(64);\nconst Nat8 = new FixedNatClass(8);\nconst Nat16 = new FixedNatClass(16);\nconst Nat32 = new FixedNatClass(32);\nconst Nat64 = new FixedNatClass(64);\nconst Principal = new PrincipalClass();\n/**\n *\n * @param types array of any types\n * @returns TupleClass from those types\n */\nfunction Tuple(...types) {\n    return new TupleClass(types);\n}\n/**\n *\n * @param t IDL Type\n * @returns VecClass from that type\n */\nfunction Vec(t) {\n    return new VecClass(t);\n}\n/**\n *\n * @param t IDL Type\n * @returns OptClass of Type\n */\nfunction Opt(t) {\n    return new OptClass(t);\n}\n/**\n *\n * @param t Record of string and IDL Type\n * @returns RecordClass of string and Type\n */\nfunction Record(t) {\n    return new RecordClass(t);\n}\n/**\n *\n * @param fields Record of string and IDL Type\n * @returns VariantClass\n */\nfunction Variant(fields) {\n    return new VariantClass(fields);\n}\n/**\n *\n * @returns new RecClass\n */\nfunction Rec() {\n    return new RecClass();\n}\n/**\n *\n * @param args array of IDL Types\n * @param ret array of IDL Types\n * @param annotations array of strings, [] by default\n * @returns new FuncClass\n */\nfunction Func(args, ret, annotations = []) {\n    return new FuncClass(args, ret, annotations);\n}\n/**\n *\n * @param t Record of string and FuncClass\n * @returns ServiceClass\n */\nfunction Service(t) {\n    return new ServiceClass(t);\n}\n/**\n * The list of relations between types we assume to hold. Uses the types .name property as key\n */\nclass Relations {\n    constructor(relations = new Map()) {\n        this.rels = relations;\n    }\n    copy() {\n        const copy = new Map();\n        for (const [key, value] of this.rels.entries()) {\n            const valCopy = new Map(value);\n            copy.set(key, valCopy);\n        }\n        return new Relations(copy);\n    }\n    /// Returns whether we know for sure that a relation holds or doesn't (`true` or `false`), or\n    /// if we don't know yet (`undefined`)\n    known(t1, t2) {\n        return this.rels.get(t1.name)?.get(t2.name);\n    }\n    addNegative(t1, t2) {\n        this.addNames(t1.name, t2.name, false);\n    }\n    add(t1, t2) {\n        this.addNames(t1.name, t2.name, true);\n    }\n    display() {\n        let result = '';\n        for (const [t1, v] of this.rels) {\n            for (const [t2, known] of v) {\n                const subty = known ? ':<' : '!<:';\n                result += `${t1} ${subty} ${t2}\\n`;\n            }\n        }\n        return result;\n    }\n    addNames(t1, t2, isSubtype) {\n        const t1Map = this.rels.get(t1);\n        if (t1Map == undefined) {\n            const newMap = new Map();\n            newMap.set(t2, isSubtype);\n            this.rels.set(t1, newMap);\n        }\n        else {\n            t1Map.set(t2, isSubtype);\n        }\n    }\n}\n/// `subtypeCache` holds subtyping relations we've previously computed while decoding a message\nlet subtypeCache = new Relations();\n/** Resets the global subtyping cache */\nfunction resetSubtypeCache() {\n    subtypeCache = new Relations();\n}\nfunction eqFunctionAnnotations(t1, t2) {\n    const t1Annotations = new Set(t1.annotations);\n    const t2Annotations = new Set(t2.annotations);\n    if (t1Annotations.size !== t2Annotations.size) {\n        return false;\n    }\n    for (const a of t1Annotations) {\n        if (!t2Annotations.has(a))\n            return false;\n    }\n    return true;\n}\nfunction canBeOmmitted(t) {\n    return t instanceof OptClass || t instanceof NullClass || t instanceof ReservedClass;\n}\n/**\n * Subtyping on Candid types t1 <: t2 (Exported for testing)\n * @param t1 The potential subtype\n * @param t2 The potential supertype\n */\nfunction subtype(t1, t2) {\n    const relations = subtypeCache.copy();\n    const isSubtype = subtype_(relations, t1, t2);\n    if (isSubtype) {\n        subtypeCache.add(t1, t2);\n    }\n    else {\n        subtypeCache.addNegative(t1, t2);\n    }\n    return isSubtype;\n}\nfunction subtype_(relations, t1, t2) {\n    if (t1.name === t2.name)\n        return true;\n    const known = relations.known(t1, t2);\n    if (known !== undefined)\n        return known;\n    relations.add(t1, t2);\n    if (t2 instanceof ReservedClass)\n        return true;\n    if (t1 instanceof EmptyClass)\n        return true;\n    if (t1 instanceof NatClass && t2 instanceof IntClass)\n        return true;\n    if (t1 instanceof VecClass && t2 instanceof VecClass)\n        return subtype_(relations, t1._type, t2._type);\n    if (t2 instanceof OptClass)\n        return true;\n    if (t1 instanceof RecordClass && t2 instanceof RecordClass) {\n        const t1Object = t1.fieldsAsObject;\n        for (const [label, ty2] of t2._fields) {\n            const ty1 = t1Object[(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(label)];\n            if (!ty1) {\n                if (!canBeOmmitted(ty2))\n                    return false;\n            }\n            else {\n                if (!subtype_(relations, ty1, ty2))\n                    return false;\n            }\n        }\n        return true;\n    }\n    if (t1 instanceof FuncClass && t2 instanceof FuncClass) {\n        if (!eqFunctionAnnotations(t1, t2))\n            return false;\n        for (let i = 0; i < t1.argTypes.length; i++) {\n            const argTy1 = t1.argTypes[i];\n            if (i < t2.argTypes.length) {\n                if (!subtype_(relations, t2.argTypes[i], argTy1))\n                    return false;\n            }\n            else {\n                if (!canBeOmmitted(argTy1))\n                    return false;\n            }\n        }\n        for (let i = 0; i < t2.retTypes.length; i++) {\n            const retTy2 = t2.retTypes[i];\n            if (i < t1.retTypes.length) {\n                if (!subtype_(relations, t1.retTypes[i], retTy2))\n                    return false;\n            }\n            else {\n                if (!canBeOmmitted(retTy2))\n                    return false;\n            }\n        }\n        return true;\n    }\n    if (t1 instanceof VariantClass && t2 instanceof VariantClass) {\n        const t2Object = t2.alternativesAsObject;\n        for (const [label, ty1] of t1._fields) {\n            const ty2 = t2Object[(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_3__.idlLabelToId)(label)];\n            if (!ty2)\n                return false;\n            if (!subtype_(relations, ty1, ty2))\n                return false;\n        }\n        return true;\n    }\n    if (t1 instanceof ServiceClass && t2 instanceof ServiceClass) {\n        const t1Object = t1.fieldsAsObject();\n        for (const [name, ty2] of t2._fields) {\n            const ty1 = t1Object[name];\n            if (!ty1)\n                return false;\n            if (!subtype_(relations, ty1, ty2))\n                return false;\n        }\n        return true;\n    }\n    if (t1 instanceof RecClass) {\n        return subtype_(relations, t1.getType(), t2);\n    }\n    if (t2 instanceof RecClass) {\n        return subtype_(relations, t1, t2.getType());\n    }\n    return false;\n}\n//# sourceMappingURL=idl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/idl.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js":
/*!***************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iexp2: () => (/* binding */ iexp2),\n/* harmony export */   ilog2: () => (/* binding */ ilog2)\n/* harmony export */ });\n/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nfunction ilog2(n) {\n    const nBig = BigInt(n);\n    if (n <= 0) {\n        throw new RangeError('Input must be positive');\n    }\n    return nBig.toString(2).length - 1;\n}\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nfunction iexp2(n) {\n    const nBig = BigInt(n);\n    if (n < 0) {\n        throw new RangeError('Input must be non-negative');\n    }\n    return BigInt(1) << nBig;\n}\n//# sourceMappingURL=bigint-math.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9jYW5kaWQvbGliL2VzbS91dGlscy9iaWdpbnQtbWF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9jYW5kaWQvbGliL2VzbS91dGlscy9iaWdpbnQtbWF0aC5qcz80NzhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXF1aXZhbGVudCB0byBgTWF0aC5sb2cyKG4pYCB3aXRoIHN1cHBvcnQgZm9yIGBCaWdJbnRgIHZhbHVlc1xuICogQHBhcmFtIG4gYmlnaW50IG9yIGludGVnZXJcbiAqIEByZXR1cm5zIGludGVnZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlsb2cyKG4pIHtcbiAgICBjb25zdCBuQmlnID0gQmlnSW50KG4pO1xuICAgIGlmIChuIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0lucHV0IG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5CaWcudG9TdHJpbmcoMikubGVuZ3RoIC0gMTtcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBgMiAqKiBuYCB3aXRoIHN1cHBvcnQgZm9yIGBCaWdJbnRgIHZhbHVlc1xuICogKG5lY2Vzc2FyeSBmb3IgYnJvd3NlciBwcmVwcm9jZXNzb3JzIHdoaWNoIHJlcGxhY2UgdGhlIGAqKmAgb3BlcmF0b3Igd2l0aCBgTWF0aC5wb3dgKVxuICogQHBhcmFtIG4gYmlnaW50IG9yIGludGVnZXJcbiAqIEByZXR1cm5zIGJpZ2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWV4cDIobikge1xuICAgIGNvbnN0IG5CaWcgPSBCaWdJbnQobik7XG4gICAgaWYgKG4gPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnB1dCBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpO1xuICAgIH1cbiAgICByZXR1cm4gQmlnSW50KDEpIDw8IG5CaWc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdpbnQtbWF0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js":
/*!**********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipeArrayBuffer: () => (/* binding */ PipeArrayBuffer),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   uint8Equals: () => (/* binding */ uint8Equals),\n/* harmony export */   uint8FromBufLike: () => (/* binding */ uint8FromBufLike),\n/* harmony export */   uint8ToDataView: () => (/* binding */ uint8ToDataView)\n/* harmony export */ });\n/**\n * Concatenate multiple Uint8Arrays.\n * @param uint8Arrays The Uint8Arrays to concatenate.\n */\nfunction concat(...uint8Arrays) {\n    const result = new Uint8Array(uint8Arrays.reduce((acc, curr) => acc + curr.byteLength, 0));\n    let index = 0;\n    for (const b of uint8Arrays) {\n        result.set(b, index);\n        index += b.byteLength;\n    }\n    return result;\n}\n/**\n * A class that abstracts a pipe-like Uint8Array.\n */\nclass PipeArrayBuffer {\n    /**\n     * Save a checkpoint of the reading view (for backtracking)\n     */\n    save() {\n        return this._view;\n    }\n    /**\n     * Restore a checkpoint of the reading view (for backtracking)\n     * @param checkPoint a previously saved checkpoint\n     */\n    restore(checkPoint) {\n        if (!(checkPoint instanceof Uint8Array)) {\n            throw new Error('Checkpoint must be a Uint8Array');\n        }\n        this._view = checkPoint;\n    }\n    /**\n     * Creates a new instance of a pipe\n     * @param buffer an optional buffer to start with\n     * @param length an optional amount of bytes to use for the length.\n     */\n    constructor(buffer, length = buffer?.byteLength || 0) {\n        if (buffer && !(buffer instanceof Uint8Array)) {\n            try {\n                buffer = uint8FromBufLike(buffer);\n            }\n            catch {\n                throw new Error('Buffer must be a Uint8Array');\n            }\n        }\n        if (length < 0 || !Number.isInteger(length)) {\n            throw new Error('Length must be a non-negative integer');\n        }\n        if (buffer && length > buffer.byteLength) {\n            throw new Error('Length cannot exceed buffer length');\n        }\n        this._buffer = buffer || new Uint8Array(0);\n        this._view = new Uint8Array(this._buffer.buffer, 0, length);\n    }\n    get buffer() {\n        // Return a copy of the buffer.\n        return this._view.slice();\n    }\n    get byteLength() {\n        return this._view.byteLength;\n    }\n    /**\n     * Read `num` number of bytes from the front of the pipe.\n     * @param num The number of bytes to read.\n     */\n    read(num) {\n        const result = this._view.subarray(0, num);\n        this._view = this._view.subarray(num);\n        return result.slice();\n    }\n    readUint8() {\n        if (this._view.byteLength === 0) {\n            return undefined;\n        }\n        const result = this._view[0];\n        this._view = this._view.subarray(1);\n        return result;\n    }\n    /**\n     * Write a buffer to the end of the pipe.\n     * @param buf The bytes to write.\n     */\n    write(buf) {\n        if (!(buf instanceof Uint8Array)) {\n            throw new Error('Buffer must be a Uint8Array');\n        }\n        const offset = this._view.byteLength;\n        if (this._view.byteOffset + this._view.byteLength + buf.byteLength >= this._buffer.byteLength) {\n            // Alloc grow the view to include the new bytes.\n            this.alloc(buf.byteLength);\n        }\n        else {\n            // Update the view to include the new bytes.\n            this._view = new Uint8Array(this._buffer.buffer, this._view.byteOffset, this._view.byteLength + buf.byteLength);\n        }\n        this._view.set(buf, offset);\n    }\n    /**\n     * Whether or not there is more data to read from the buffer\n     */\n    get end() {\n        return this._view.byteLength === 0;\n    }\n    /**\n     * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n     * @param amount A number of bytes to add to the buffer.\n     */\n    alloc(amount) {\n        if (amount <= 0 || !Number.isInteger(amount)) {\n            throw new Error('Amount must be a positive integer');\n        }\n        // Add a little bit of exponential growth.\n        const b = new Uint8Array(((this._buffer.byteLength + amount) * 1.2) | 0);\n        const v = new Uint8Array(b.buffer, 0, this._view.byteLength + amount);\n        v.set(this._view);\n        this._buffer = b;\n        this._view = v;\n    }\n}\n/**\n * Returns a true Uint8Array from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns Uint8Array\n */\nfunction uint8FromBufLike(bufLike) {\n    if (!bufLike) {\n        throw new Error('Input cannot be null or undefined');\n    }\n    if (bufLike instanceof Uint8Array) {\n        return bufLike;\n    }\n    if (bufLike instanceof ArrayBuffer) {\n        return new Uint8Array(bufLike);\n    }\n    if (Array.isArray(bufLike)) {\n        return new Uint8Array(bufLike);\n    }\n    if ('buffer' in bufLike) {\n        return uint8FromBufLike(bufLike.buffer);\n    }\n    return new Uint8Array(bufLike);\n}\n/**\n *\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns number - negative if u1 < u2, positive if u1 > u2, 0 if u1 === u2\n */\nfunction compare(u1, u2) {\n    if (u1.byteLength !== u2.byteLength) {\n        return u1.byteLength - u2.byteLength;\n    }\n    for (let i = 0; i < u1.length; i++) {\n        if (u1[i] !== u2[i]) {\n            return u1[i] - u2[i];\n        }\n    }\n    return 0;\n}\n/**\n * Checks two uint8Arrays for equality.\n * @param u1 uint8Array 1\n * @param u2 uint8Array 2\n * @returns boolean\n */\nfunction uint8Equals(u1, u2) {\n    return compare(u1, u2) === 0;\n}\n/**\n * Helpers to convert a Uint8Array to a DataView.\n * @param uint8 Uint8Array\n * @returns DataView\n */\nfunction uint8ToDataView(uint8) {\n    if (!(uint8 instanceof Uint8Array)) {\n        throw new Error('Input must be a Uint8Array');\n    }\n    return new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n}\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/hash.js":
/*!********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/hash.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   idlLabelToId: () => (/* binding */ idlLabelToId)\n/* harmony export */ });\n/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s - string to hash\n * @returns number representing hashed string\n */\nfunction idlHash(s) {\n    const utf8encoder = new TextEncoder();\n    const array = utf8encoder.encode(s);\n    let h = 0;\n    for (const c of array) {\n        h = (h * 223 + c) % 2 ** 32;\n    }\n    return h;\n}\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nfunction idlLabelToId(label) {\n    if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n        const num = +label.slice(1, -1);\n        if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n            return num;\n        }\n    }\n    return idlHash(label);\n}\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9jYW5kaWQvbGliL2VzbS91dGlscy9oYXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9jYW5kaWQvbGliL2VzbS91dGlscy9oYXNoLmpzPzU5NGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIYXNoZXMgYSBzdHJpbmcgdG8gYSBudW1iZXIuIEFsZ29yaXRobSBjYW4gYmUgZm91bmQgaGVyZTpcbiAqIGh0dHBzOi8vY2FtbC5pbnJpYS5mci9wdWIvcGFwZXJzL2dhcnJpZ3VlLXBvbHltb3JwaGljX3ZhcmlhbnRzLW1sOTgucGRmXG4gKiBAcGFyYW0gcyAtIHN0cmluZyB0byBoYXNoXG4gKiBAcmV0dXJucyBudW1iZXIgcmVwcmVzZW50aW5nIGhhc2hlZCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gaWRsSGFzaChzKSB7XG4gICAgY29uc3QgdXRmOGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCBhcnJheSA9IHV0ZjhlbmNvZGVyLmVuY29kZShzKTtcbiAgICBsZXQgaCA9IDA7XG4gICAgZm9yIChjb25zdCBjIG9mIGFycmF5KSB7XG4gICAgICAgIGggPSAoaCAqIDIyMyArIGMpICUgMiAqKiAzMjtcbiAgICB9XG4gICAgcmV0dXJuIGg7XG59XG4vKipcbiAqXG4gKiBAcGFyYW0gbGFiZWwgc3RyaW5nXG4gKiBAcmV0dXJucyBudW1iZXIgcmVwcmVzZW50aW5nIGhhc2hlZCBsYWJlbFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRsTGFiZWxUb0lkKGxhYmVsKSB7XG4gICAgaWYgKC9eX1xcZCtfJC8udGVzdChsYWJlbCkgfHwgL15fMHhbMC05YS1mQS1GXStfJC8udGVzdChsYWJlbCkpIHtcbiAgICAgICAgY29uc3QgbnVtID0gK2xhYmVsLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bSkgJiYgbnVtID49IDAgJiYgbnVtIDwgMiAqKiAzMikge1xuICAgICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWRsSGFzaChsYWJlbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/hash.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js":
/*!**********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lebDecode: () => (/* binding */ lebDecode),\n/* harmony export */   lebEncode: () => (/* binding */ lebEncode),\n/* harmony export */   readIntLE: () => (/* binding */ readIntLE),\n/* harmony export */   readUIntLE: () => (/* binding */ readUIntLE),\n/* harmony export */   safeRead: () => (/* binding */ safeRead),\n/* harmony export */   safeReadUint8: () => (/* binding */ safeReadUint8),\n/* harmony export */   slebDecode: () => (/* binding */ slebDecode),\n/* harmony export */   slebEncode: () => (/* binding */ slebEncode),\n/* harmony export */   writeIntLE: () => (/* binding */ writeIntLE),\n/* harmony export */   writeUIntLE: () => (/* binding */ writeUIntLE)\n/* harmony export */ });\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/buffer.js\");\n/* harmony import */ var _bigint_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bigint-math.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/bigint-math.js\");\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\n\n\nfunction eob() {\n    throw new Error('unexpected end of buffer');\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Uint8Array\n */\nfunction safeRead(pipe, num) {\n    if (pipe.byteLength < num) {\n        eob();\n    }\n    return pipe.read(num);\n}\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nfunction safeReadUint8(pipe) {\n    const byte = pipe.readUint8();\n    if (byte === undefined) {\n        eob();\n    }\n    return byte;\n}\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nfunction lebEncode(value) {\n    if (typeof value === 'number') {\n        value = BigInt(value);\n    }\n    if (value < BigInt(0)) {\n        throw new Error('Cannot leb encode negative values.');\n    }\n    const byteLength = (value === BigInt(0) ? 0 : (0,_bigint_math_js__WEBPACK_IMPORTED_MODULE_0__.ilog2)(value)) + 1;\n    const pipe = new _buffer_js__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(new Uint8Array(byteLength), 0);\n    while (true) {\n        const i = Number(value & BigInt(0x7f));\n        value /= BigInt(0x80);\n        if (value === BigInt(0)) {\n            pipe.write(new Uint8Array([i]));\n            break;\n        }\n        else {\n            pipe.write(new Uint8Array([i | 0x80]));\n        }\n    }\n    return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nfunction lebDecode(pipe) {\n    let weight = BigInt(1);\n    let value = BigInt(0);\n    let byte;\n    do {\n        byte = safeReadUint8(pipe);\n        value += BigInt(byte & 0x7f).valueOf() * weight;\n        weight *= BigInt(128);\n    } while (byte >= 0x80);\n    return value;\n}\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nfunction slebEncode(value) {\n    if (typeof value === 'number') {\n        value = BigInt(value);\n    }\n    const isNeg = value < BigInt(0);\n    if (isNeg) {\n        value = -value - BigInt(1);\n    }\n    const byteLength = (value === BigInt(0) ? 0 : (0,_bigint_math_js__WEBPACK_IMPORTED_MODULE_0__.ilog2)(value)) + 1;\n    const pipe = new _buffer_js__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(new Uint8Array(byteLength), 0);\n    while (true) {\n        const i = getLowerBytes(value);\n        value /= BigInt(0x80);\n        // prettier-ignore\n        if ((isNeg && value === BigInt(0) && (i & 0x40) !== 0)\n            || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {\n            pipe.write(new Uint8Array([i]));\n            break;\n        }\n        else {\n            pipe.write(new Uint8Array([i | 0x80]));\n        }\n    }\n    function getLowerBytes(num) {\n        const bytes = num % BigInt(0x80);\n        if (isNeg) {\n            // We swap the bits here again, and remove 1 to do two's complement.\n            return Number(BigInt(0x80) - bytes - BigInt(1));\n        }\n        else {\n            return Number(bytes);\n        }\n    }\n    return pipe.buffer;\n}\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nfunction slebDecode(pipe) {\n    // Get the size of the buffer, then cut a buffer of that size.\n    const pipeView = new Uint8Array(pipe.buffer);\n    let len = 0;\n    for (; len < pipeView.byteLength; len++) {\n        if (pipeView[len] < 0x80) {\n            // If it's a positive number, we reuse lebDecode.\n            if ((pipeView[len] & 0x40) === 0) {\n                return lebDecode(pipe);\n            }\n            break;\n        }\n    }\n    const bytes = new Uint8Array(safeRead(pipe, len + 1));\n    let value = BigInt(0);\n    for (let i = bytes.byteLength - 1; i >= 0; i--) {\n        value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n    }\n    return -value - BigInt(1);\n}\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Uint8Array\n */\nfunction writeUIntLE(value, byteLength) {\n    if (BigInt(value) < BigInt(0)) {\n        throw new Error('Cannot write negative values.');\n    }\n    return writeIntLE(value, byteLength);\n}\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns Uint8Array\n */\nfunction writeIntLE(value, byteLength) {\n    value = BigInt(value);\n    const pipe = new _buffer_js__WEBPACK_IMPORTED_MODULE_1__.PipeArrayBuffer(new Uint8Array(Math.min(1, byteLength)), 0);\n    let i = 0;\n    let mul = BigInt(256);\n    let sub = BigInt(0);\n    let byte = Number(value % mul);\n    pipe.write(new Uint8Array([byte]));\n    while (++i < byteLength) {\n        if (value < 0 && sub === BigInt(0) && byte !== 0) {\n            sub = BigInt(1);\n        }\n        byte = Number((value / mul - sub) % BigInt(256));\n        pipe.write(new Uint8Array([byte]));\n        mul *= BigInt(256);\n    }\n    return pipe.buffer;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nfunction readUIntLE(pipe, byteLength) {\n    if (byteLength <= 0 || !Number.isInteger(byteLength)) {\n        throw new Error('Byte length must be a positive integer');\n    }\n    let val = BigInt(safeReadUint8(pipe));\n    let mul = BigInt(1);\n    let i = 0;\n    while (++i < byteLength) {\n        mul *= BigInt(256);\n        const byte = BigInt(safeReadUint8(pipe));\n        val = val + mul * byte;\n    }\n    return val;\n}\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nfunction readIntLE(pipe, byteLength) {\n    if (byteLength <= 0 || !Number.isInteger(byteLength)) {\n        throw new Error('Byte length must be a positive integer');\n    }\n    let val = readUIntLE(pipe, byteLength);\n    const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n    if (val >= mul) {\n        val -= mul * BigInt(2);\n    }\n    return val;\n}\n//# sourceMappingURL=leb128.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/candid/lib/esm/utils/leb128.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/cbor/dist/cbor.mjs":
/*!**********************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/cbor/dist/cbor.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodingError: () => (/* binding */ w),\n/* harmony export */   EncodingError: () => (/* binding */ x),\n/* harmony export */   decode: () => (/* binding */ ut),\n/* harmony export */   encode: () => (/* binding */ rt),\n/* harmony export */   encodeWithSelfDescribedTag: () => (/* binding */ dt)\n/* harmony export */ });\nclass w extends Error {\n  constructor(n) {\n    super(n), this.name = \"DecodingError\";\n  }\n}\nconst m = 55799, L = Symbol(\"CBOR_STOP_CODE\");\nvar g = /* @__PURE__ */ ((t) => (t[t.False = 20] = \"False\", t[t.True = 21] = \"True\", t[t.Null = 22] = \"Null\", t[t.Undefined = 23] = \"Undefined\", t[t.Break = 31] = \"Break\", t))(g || {}), c = /* @__PURE__ */ ((t) => (t[t.UnsignedInteger = 0] = \"UnsignedInteger\", t[t.NegativeInteger = 1] = \"NegativeInteger\", t[t.ByteString = 2] = \"ByteString\", t[t.TextString = 3] = \"TextString\", t[t.Array = 4] = \"Array\", t[t.Map = 5] = \"Map\", t[t.Tag = 6] = \"Tag\", t[t.Simple = 7] = \"Simple\", t))(c || {});\nconst z = 23, Y = 255, G = 65535, P = 4294967295, H = BigInt(\"0xffffffffffffffff\");\nvar d = /* @__PURE__ */ ((t) => (t[t.Value = 23] = \"Value\", t[t.OneByte = 24] = \"OneByte\", t[t.TwoBytes = 25] = \"TwoBytes\", t[t.FourBytes = 26] = \"FourBytes\", t[t.EightBytes = 27] = \"EightBytes\", t[t.Indefinite = 31] = \"Indefinite\", t))(d || {});\nconst h = !1;\nfunction W(t) {\n  return t == null;\n}\nfunction R(t, n) {\n  const e = new Uint8Array(n);\n  return e.set(t), e;\n}\nconst K = new TextDecoder();\nfunction Z(t) {\n  return (t & 224) >> 5;\n}\nfunction q(t) {\n  return t & 31;\n}\nlet A = new Uint8Array(), y, a = 0;\nfunction ut(t, n) {\n  A = t, a = 0;\n  const e = B(n);\n  return (n == null ? void 0 : n(e)) ?? e;\n}\nfunction B(t) {\n  const [n, e] = N();\n  switch (n) {\n    case c.UnsignedInteger:\n      return E(e);\n    case c.NegativeInteger:\n      return j(e);\n    case c.ByteString:\n      return $(e);\n    case c.TextString:\n      return F(e);\n    case c.Array:\n      return J(e, t);\n    case c.Map:\n      return b(e, t);\n    case c.Tag:\n      return M(e, t);\n    case c.Simple:\n      return Q(e);\n  }\n  throw new w(`Unsupported major type: ${n}`);\n}\nfunction N() {\n  const t = A.at(a);\n  if (W(t))\n    throw new w(\"Provided CBOR data is empty\");\n  const n = Z(t), e = q(t);\n  return a++, [n, e];\n}\nfunction J(t, n) {\n  const e = E(t);\n  if (e === 1 / 0) {\n    const u = [];\n    let f = B(n);\n    for (; f !== L; )\n      u.push((n == null ? void 0 : n(f)) ?? f), f = B(n);\n    return u;\n  }\n  const i = new Array(e);\n  for (let u = 0; u < e; u++) {\n    const f = B(n);\n    i[u] = (n == null ? void 0 : n(f)) ?? f;\n  }\n  return i;\n}\nfunction Q(t) {\n  switch (t) {\n    case g.False:\n      return !1;\n    case g.True:\n      return !0;\n    case g.Null:\n      return null;\n    case g.Undefined:\n      return;\n    case g.Break:\n      return L;\n  }\n  throw new w(`Unrecognized simple type: ${t.toString(2)}`);\n}\nfunction b(t, n) {\n  const e = E(t), i = {};\n  if (e === 1 / 0) {\n    let [u, f] = N();\n    for (; u !== c.Simple && f !== g.Break; ) {\n      const l = F(f), U = B(n);\n      i[l] = (n == null ? void 0 : n(U, l)) ?? U, [u, f] = N();\n    }\n    return i;\n  }\n  for (let u = 0; u < e; u++) {\n    const [f, l] = N();\n    if (f !== c.TextString)\n      throw new w(\"Map keys must be text strings\");\n    const U = F(l), D = B(n);\n    i[U] = (n == null ? void 0 : n(D, U)) ?? D;\n  }\n  return i;\n}\nfunction E(t) {\n  if (t <= d.Value)\n    return t;\n  switch (y = new DataView(A.buffer, A.byteOffset + a), t) {\n    case d.OneByte:\n      return a++, y.getUint8(0);\n    case d.TwoBytes:\n      return a += 2, y.getUint16(0, h);\n    case d.FourBytes:\n      return a += 4, y.getUint32(0, h);\n    case d.EightBytes:\n      return a += 8, y.getBigUint64(0, h);\n    case d.Indefinite:\n      return 1 / 0;\n    default:\n      throw new w(`Unsupported integer info: ${t.toString(2)}`);\n  }\n}\nfunction j(t) {\n  const n = E(t);\n  return typeof n == \"number\" ? -1 - n : -1n - n;\n}\nfunction $(t) {\n  const n = E(t);\n  if (n > Number.MAX_SAFE_INTEGER)\n    throw new w(\"Byte length is too large\");\n  const e = Number(n);\n  return a += e, A.slice(a - e, a);\n}\nfunction F(t) {\n  const n = $(t);\n  return K.decode(n);\n}\nfunction M(t, n) {\n  const e = E(t);\n  if (e === m)\n    return B(n);\n  throw new w(`Unsupported tag: ${e}.`);\n}\nclass x extends Error {\n  constructor(n) {\n    super(n), this.name = \"SerializationError\";\n  }\n}\nconst p = 2 * 1024, C = 100, v = new TextEncoder();\nfunction S(t) {\n  return t << 5;\n}\nlet o = new Uint8Array(p), r = new DataView(o.buffer), s = 0, O = [];\nfunction rt(t, n) {\n  s = 0;\n  const e = (n == null ? void 0 : n(t)) ?? t;\n  return _(e, n), o.slice(0, s);\n}\nfunction dt(t, n) {\n  s = 0;\n  const e = (n == null ? void 0 : n(t)) ?? t;\n  return it(m, e, n), o.slice(0, s);\n}\nfunction _(t, n) {\n  if (s > o.length - C && (o = R(o, o.length * 2), r = new DataView(o.buffer)), t === !1 || t === !0 || t === null || t === void 0) {\n    et(t);\n    return;\n  }\n  if (typeof t == \"number\" || typeof t == \"bigint\") {\n    ft(t);\n    return;\n  }\n  if (typeof t == \"string\") {\n    X(t);\n    return;\n  }\n  if (t instanceof Uint8Array) {\n    V(t);\n    return;\n  }\n  if (t instanceof ArrayBuffer) {\n    V(new Uint8Array(t));\n    return;\n  }\n  if (Array.isArray(t)) {\n    tt(t, n);\n    return;\n  }\n  if (typeof t == \"object\") {\n    nt(t, n);\n    return;\n  }\n  throw new x(`Unsupported type: ${typeof t}`);\n}\nfunction tt(t, n) {\n  I(c.Array, t.length), t.forEach((e, i) => {\n    _((n == null ? void 0 : n(e, i.toString())) ?? e, n);\n  });\n}\nfunction nt(t, n) {\n  O = Object.entries(t), I(c.Map, O.length), O.forEach(([e, i]) => {\n    X(e), _((n == null ? void 0 : n(i, e)) ?? i, n);\n  });\n}\nfunction I(t, n) {\n  if (n <= z) {\n    r.setUint8(\n      s++,\n      S(t) | Number(n)\n    );\n    return;\n  }\n  if (n <= Y) {\n    r.setUint8(\n      s++,\n      S(t) | d.OneByte\n    ), r.setUint8(s, Number(n)), s += 1;\n    return;\n  }\n  if (n <= G) {\n    r.setUint8(\n      s++,\n      S(t) | d.TwoBytes\n    ), r.setUint16(s, Number(n), h), s += 2;\n    return;\n  }\n  if (n <= P) {\n    r.setUint8(\n      s++,\n      S(t) | d.FourBytes\n    ), r.setUint32(s, Number(n), h), s += 4;\n    return;\n  }\n  if (n <= H) {\n    r.setUint8(\n      s++,\n      S(t) | d.EightBytes\n    ), r.setBigUint64(s, BigInt(n), h), s += 8;\n    return;\n  }\n  throw new x(`Value too large to encode: ${n}`);\n}\nfunction et(t) {\n  I(c.Simple, st(t));\n}\nfunction st(t) {\n  if (t === !1)\n    return g.False;\n  if (t === !0)\n    return g.True;\n  if (t === null)\n    return g.Null;\n  if (t === void 0)\n    return g.Undefined;\n  throw new x(`Unrecognized simple value: ${t.toString()}`);\n}\nfunction k(t, n) {\n  I(t, n.length), s > o.length - n.length && (o = R(o, o.length + n.length), r = new DataView(o.buffer)), o.set(n, s), s += n.length;\n}\nfunction T(t, n) {\n  I(t, n);\n}\nfunction ct(t) {\n  T(c.UnsignedInteger, t);\n}\nfunction ot(t) {\n  T(\n    c.NegativeInteger,\n    typeof t == \"bigint\" ? -1n - t : -1 - t\n  );\n}\nfunction ft(t) {\n  t >= 0 ? ct(t) : ot(t);\n}\nfunction X(t) {\n  k(c.TextString, v.encode(t));\n}\nfunction V(t) {\n  k(c.ByteString, t);\n}\nfunction it(t, n, e) {\n  I(c.Tag, t), _(n, e);\n}\n\n//# sourceMappingURL=cbor.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/cbor/dist/cbor.mjs\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js":
/*!**********************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSON_KEY_PRINCIPAL: () => (/* binding */ JSON_KEY_PRINCIPAL),\n/* harmony export */   Principal: () => (/* binding */ Principal)\n/* harmony export */ });\n/* harmony import */ var _utils_base32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/base32.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/base32.js\");\n/* harmony import */ var _utils_getCrc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/getCrc.js */ \"(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/../../packages/sdk-js/node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\nconst JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\nconst MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR = 'aaaaa-aa';\nclass Principal {\n    static anonymous() {\n        return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n    }\n    /**\n     * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n     * @returns {Principal} principal of the management canister\n     */\n    static managementCanister() {\n        return this.fromText(MANAGEMENT_CANISTER_PRINCIPAL_TEXT_STR);\n    }\n    static selfAuthenticating(publicKey) {\n        const sha = (0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha224)(publicKey);\n        return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n    }\n    static from(other) {\n        if (typeof other === 'string') {\n            return Principal.fromText(other);\n        }\n        else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n            return new Principal(other);\n        }\n        else if (Principal.isPrincipal(other)) {\n            return new Principal(other._arr);\n        }\n        throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n    }\n    static fromHex(hex) {\n        return new this((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(hex));\n    }\n    static fromText(text) {\n        let maybePrincipal = text;\n        // If formatted as JSON string, parse it first\n        if (text.includes(JSON_KEY_PRINCIPAL)) {\n            const obj = JSON.parse(text);\n            if (JSON_KEY_PRINCIPAL in obj) {\n                maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n            }\n        }\n        const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n        let arr = (0,_utils_base32_js__WEBPACK_IMPORTED_MODULE_2__.decode)(canisterIdNoDash);\n        arr = arr.slice(4, arr.length);\n        const principal = new this(arr);\n        if (principal.toText() !== maybePrincipal) {\n            throw new Error(`Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`);\n        }\n        return principal;\n    }\n    static fromUint8Array(arr) {\n        return new this(arr);\n    }\n    static isPrincipal(other) {\n        return (other instanceof Principal ||\n            (typeof other === 'object' &&\n                other !== null &&\n                '_isPrincipal' in other &&\n                other['_isPrincipal'] === true &&\n                '_arr' in other &&\n                other['_arr'] instanceof Uint8Array));\n    }\n    constructor(_arr) {\n        this._arr = _arr;\n        this._isPrincipal = true;\n    }\n    isAnonymous() {\n        return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n    }\n    toUint8Array() {\n        return this._arr;\n    }\n    toHex() {\n        return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this._arr).toUpperCase();\n    }\n    toText() {\n        const checksumArrayBuf = new ArrayBuffer(4);\n        const view = new DataView(checksumArrayBuf);\n        view.setUint32(0, (0,_utils_getCrc_js__WEBPACK_IMPORTED_MODULE_3__.getCrc32)(this._arr));\n        const checksum = new Uint8Array(checksumArrayBuf);\n        const array = new Uint8Array([...checksum, ...this._arr]);\n        const result = (0,_utils_base32_js__WEBPACK_IMPORTED_MODULE_2__.encode)(array);\n        const matches = result.match(/.{1,5}/g);\n        if (!matches) {\n            // This should only happen if there's no character, which is unreachable.\n            throw new Error();\n        }\n        return matches.join('-');\n    }\n    toString() {\n        return this.toText();\n    }\n    /**\n     * Serializes to JSON\n     * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n     */\n    toJSON() {\n        return { [JSON_KEY_PRINCIPAL]: this.toText() };\n    }\n    /**\n     * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n     * @param {Principal} other - a {@link Principal} to compare\n     * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n     */\n    compareTo(other) {\n        for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n            if (this._arr[i] < other._arr[i])\n                return 'lt';\n            else if (this._arr[i] > other._arr[i])\n                return 'gt';\n        }\n        // Here, at least one principal is a prefix of the other principal (they could be the same)\n        if (this._arr.length < other._arr.length)\n            return 'lt';\n        if (this._arr.length > other._arr.length)\n            return 'gt';\n        return 'eq';\n    }\n    /**\n     * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n     * @param other a {@link Principal} to compare\n     * @returns {boolean} boolean\n     */\n    ltEq(other) {\n        const cmp = this.compareTo(other);\n        return cmp == 'lt' || cmp == 'eq';\n    }\n    /**\n     * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n     * @param other a {@link Principal} to compare\n     * @returns {boolean} boolean\n     */\n    gtEq(other) {\n        const cmp = this.compareTo(other);\n        return cmp == 'gt' || cmp == 'eq';\n    }\n}\n//# sourceMappingURL=principal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/principal.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/base32.js":
/*!*************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/base32.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\n// Build a lookup table for decoding.\nconst lookupTable = Object.create(null);\nfor (let i = 0; i < alphabet.length; i++) {\n    lookupTable[alphabet[i]] = i;\n}\n// Add aliases for rfc4648.\nlookupTable['0'] = lookupTable.o;\nlookupTable['1'] = lookupTable.i;\n/**\n * @param input The Uint8Array to encode.\n * @returns A Base32 string encoding the input.\n */\nfunction encode(input) {\n    // How many bits will we skip from the first byte.\n    let skip = 0;\n    // 5 high bits, carry from one byte to the next.\n    let bits = 0;\n    // The output string in base32.\n    let output = '';\n    function encodeByte(byte) {\n        if (skip < 0) {\n            // we have a carry from the previous byte\n            bits |= byte >> -skip;\n        }\n        else {\n            // no carry\n            bits = (byte << skip) & 248;\n        }\n        if (skip > 3) {\n            // Not enough data to produce a character, get us another one\n            skip -= 8;\n            return 1;\n        }\n        if (skip < 4) {\n            // produce a character\n            output += alphabet[bits >> 3];\n            skip += 5;\n        }\n        return 0;\n    }\n    for (let i = 0; i < input.length;) {\n        i += encodeByte(input[i]);\n    }\n    return output + (skip < 0 ? alphabet[bits >> 3] : '');\n}\n/**\n * @param input The base32 encoded string to decode.\n */\nfunction decode(input) {\n    // how many bits we have from the previous character.\n    let skip = 0;\n    // current byte we're producing.\n    let byte = 0;\n    const output = new Uint8Array(((input.length * 4) / 3) | 0);\n    let o = 0;\n    function decodeChar(char) {\n        // Consume a character from the stream, store\n        // the output in this.output. As before, better\n        // to use update().\n        let val = lookupTable[char.toLowerCase()];\n        if (val === undefined) {\n            throw new Error(`Invalid character: ${JSON.stringify(char)}`);\n        }\n        // move to the high bits\n        val <<= 3;\n        byte |= val >>> skip;\n        skip += 5;\n        if (skip >= 8) {\n            // We have enough bytes to produce an output\n            output[o++] = byte;\n            skip -= 8;\n            if (skip > 0) {\n                byte = (val << (5 - skip)) & 255;\n            }\n            else {\n                byte = 0;\n            }\n        }\n    }\n    for (const c of input) {\n        decodeChar(c);\n    }\n    return output.slice(0, o);\n}\n//# sourceMappingURL=base32.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9wcmluY2lwYWwvbGliL2VzbS91dGlscy9iYXNlMzIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQXFCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHFCQUFxQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlxdWJlL29wcy1jb25zb2xlLy4uLy4uL3BhY2thZ2VzL3Nkay1qcy9ub2RlX21vZHVsZXMvQGRmaW5pdHkvcHJpbmNpcGFsL2xpYi9lc20vdXRpbHMvYmFzZTMyLmpzP2YzODIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjcnO1xuLy8gQnVpbGQgYSBsb29rdXAgdGFibGUgZm9yIGRlY29kaW5nLlxuY29uc3QgbG9va3VwVGFibGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFRhYmxlW2FscGhhYmV0W2ldXSA9IGk7XG59XG4vLyBBZGQgYWxpYXNlcyBmb3IgcmZjNDY0OC5cbmxvb2t1cFRhYmxlWycwJ10gPSBsb29rdXBUYWJsZS5vO1xubG9va3VwVGFibGVbJzEnXSA9IGxvb2t1cFRhYmxlLmk7XG4vKipcbiAqIEBwYXJhbSBpbnB1dCBUaGUgVWludDhBcnJheSB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyBBIEJhc2UzMiBzdHJpbmcgZW5jb2RpbmcgdGhlIGlucHV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gICAgLy8gSG93IG1hbnkgYml0cyB3aWxsIHdlIHNraXAgZnJvbSB0aGUgZmlyc3QgYnl0ZS5cbiAgICBsZXQgc2tpcCA9IDA7XG4gICAgLy8gNSBoaWdoIGJpdHMsIGNhcnJ5IGZyb20gb25lIGJ5dGUgdG8gdGhlIG5leHQuXG4gICAgbGV0IGJpdHMgPSAwO1xuICAgIC8vIFRoZSBvdXRwdXQgc3RyaW5nIGluIGJhc2UzMi5cbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgZnVuY3Rpb24gZW5jb2RlQnl0ZShieXRlKSB7XG4gICAgICAgIGlmIChza2lwIDwgMCkge1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIGNhcnJ5IGZyb20gdGhlIHByZXZpb3VzIGJ5dGVcbiAgICAgICAgICAgIGJpdHMgfD0gYnl0ZSA+PiAtc2tpcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIGNhcnJ5XG4gICAgICAgICAgICBiaXRzID0gKGJ5dGUgPDwgc2tpcCkgJiAyNDg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXAgPiAzKSB7XG4gICAgICAgICAgICAvLyBOb3QgZW5vdWdoIGRhdGEgdG8gcHJvZHVjZSBhIGNoYXJhY3RlciwgZ2V0IHVzIGFub3RoZXIgb25lXG4gICAgICAgICAgICBza2lwIC09IDg7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2tpcCA8IDQpIHtcbiAgICAgICAgICAgIC8vIHByb2R1Y2UgYSBjaGFyYWN0ZXJcbiAgICAgICAgICAgIG91dHB1dCArPSBhbHBoYWJldFtiaXRzID4+IDNdO1xuICAgICAgICAgICAgc2tpcCArPSA1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDspIHtcbiAgICAgICAgaSArPSBlbmNvZGVCeXRlKGlucHV0W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dCArIChza2lwIDwgMCA/IGFscGhhYmV0W2JpdHMgPj4gM10gOiAnJyk7XG59XG4vKipcbiAqIEBwYXJhbSBpbnB1dCBUaGUgYmFzZTMyIGVuY29kZWQgc3RyaW5nIHRvIGRlY29kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICAgIC8vIGhvdyBtYW55IGJpdHMgd2UgaGF2ZSBmcm9tIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuXG4gICAgbGV0IHNraXAgPSAwO1xuICAgIC8vIGN1cnJlbnQgYnl0ZSB3ZSdyZSBwcm9kdWNpbmcuXG4gICAgbGV0IGJ5dGUgPSAwO1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KCgoaW5wdXQubGVuZ3RoICogNCkgLyAzKSB8IDApO1xuICAgIGxldCBvID0gMDtcbiAgICBmdW5jdGlvbiBkZWNvZGVDaGFyKGNoYXIpIHtcbiAgICAgICAgLy8gQ29uc3VtZSBhIGNoYXJhY3RlciBmcm9tIHRoZSBzdHJlYW0sIHN0b3JlXG4gICAgICAgIC8vIHRoZSBvdXRwdXQgaW4gdGhpcy5vdXRwdXQuIEFzIGJlZm9yZSwgYmV0dGVyXG4gICAgICAgIC8vIHRvIHVzZSB1cGRhdGUoKS5cbiAgICAgICAgbGV0IHZhbCA9IGxvb2t1cFRhYmxlW2NoYXIudG9Mb3dlckNhc2UoKV07XG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNoYXJhY3RlcjogJHtKU09OLnN0cmluZ2lmeShjaGFyKX1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtb3ZlIHRvIHRoZSBoaWdoIGJpdHNcbiAgICAgICAgdmFsIDw8PSAzO1xuICAgICAgICBieXRlIHw9IHZhbCA+Pj4gc2tpcDtcbiAgICAgICAgc2tpcCArPSA1O1xuICAgICAgICBpZiAoc2tpcCA+PSA4KSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGVub3VnaCBieXRlcyB0byBwcm9kdWNlIGFuIG91dHB1dFxuICAgICAgICAgICAgb3V0cHV0W28rK10gPSBieXRlO1xuICAgICAgICAgICAgc2tpcCAtPSA4O1xuICAgICAgICAgICAgaWYgKHNraXAgPiAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZSA9ICh2YWwgPDwgKDUgLSBza2lwKSkgJiAyNTU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBieXRlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGMgb2YgaW5wdXQpIHtcbiAgICAgICAgZGVjb2RlQ2hhcihjKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5zbGljZSgwLCBvKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UzMi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/base32.js\n");

/***/ }),

/***/ "(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js":
/*!*************************************************************************************!*\
  !*** ../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCrc32: () => (/* binding */ getCrc32)\n/* harmony export */ });\n// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n/**\n * Calculate the CRC32 of a Uint8Array.\n * @param buf The Uint8Array to calculate the CRC32 of.\n */\nfunction getCrc32(buf) {\n    let crc = -1;\n    for (let i = 0; i < buf.length; i++) {\n        const byte = buf[i];\n        const t = (byte ^ crc) & 0xff;\n        crc = lookUpTable[t] ^ (crc >>> 8);\n    }\n    return (crc ^ -1) >>> 0;\n}\n//# sourceMappingURL=getCrc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9wcmluY2lwYWwvbGliL2VzbS91dGlscy9nZXRDcmMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaXF1YmUvb3BzLWNvbnNvbGUvLi4vLi4vcGFja2FnZXMvc2RrLWpzL25vZGVfbW9kdWxlcy9AZGZpbml0eS9wcmluY2lwYWwvbGliL2VzbS91dGlscy9nZXRDcmMuanM/YzdmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgdHJhbnNsYXRlZCB0byBKYXZhU2NyaXB0IGZyb21cbi8vIGh0dHBzOi8vbHhwMzIuZ2l0aHViLmlvL2RvY3MvYS1zaW1wbGUtZXhhbXBsZS1jcmMzMi1jYWxjdWxhdGlvbi9cbmNvbnN0IGxvb2tVcFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LCAweDcwNmFmNDhmLCAweGU5NjNhNTM1LCAweDllNjQ5NWEzLFxuICAgIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsIDB4OTBiZjFkOTEsXG4gICAgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSwgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNyxcbiAgICAweDEzNmM5ODU2LCAweDY0NmJhOGMwLCAweGZkNjJmOTdhLCAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LCAweGZhMGYzZDYzLCAweDhkMDgwZGY1LFxuICAgIDB4M2I2ZTIwYzgsIDB4NGM2OTEwNWUsIDB4ZDU2MDQxZTQsIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXG4gICAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMywgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSxcbiAgICAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLCAweGM4ZDc1MTgwLCAweGJmZDA2MTE2LCAweDIxYjRmNGI1LCAweDU2YjNjNDIzLCAweGNmYmE5NTk5LCAweGI4YmRhNTBmLFxuICAgIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsIDB4MmY2ZjdjODcsIDB4NTg2ODRjMTEsIDB4YzE2MTFkYWIsIDB4YjY2NjJkM2QsXG4gICAgMHg3NmRjNDE5MCwgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZiwgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMyxcbiAgICAweDc4MDdjOWEyLCAweDBmMDBmOTM0LCAweDk2MDlhODhlLCAweGUxMGU5ODE4LCAweDdmNmEwZGJiLCAweDA4NmQzZDJkLCAweDkxNjQ2Yzk3LCAweGU2NjM1YzAxLFxuICAgIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsXG4gICAgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCwgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMywgMHhmYmQ0NGM2NSxcbiAgICAweDRkYjI2MTU4LCAweDNhYjU1MWNlLCAweGEzYmMwMDc0LCAweGQ0YmIzMGUyLCAweDRhZGZhNTQxLCAweDNkZDg5NWQ3LCAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLFxuICAgIDB4NDM2OWU5NmEsIDB4MzQ2ZWQ5ZmMsIDB4YWQ2Nzg4NDYsIDB4ZGE2MGI4ZDAsIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksXG4gICAgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCwgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LCAweDJlYjQwZDgxLCAweGI3YmQ1YzNiLCAweGMwYmE2Y2FkLFxuICAgIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsIDB4NzNkYzE2ODMsXG4gICAgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCwgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSxcbiAgICAweGYwMGY5MzQ0LCAweDg3MDhhM2QyLCAweDFlMDFmMjY4LCAweDY5MDZjMmZlLCAweGY3NjI1NzVkLCAweDgwNjU2N2NiLCAweDE5NmMzNjcxLCAweDZlNmIwNmU3LFxuICAgIDB4ZmVkNDFiNzYsIDB4ODlkMzJiZTAsIDB4MTBkYTdhNWEsIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXG4gICAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSwgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YixcbiAgICAweGQ4MGQyYmRhLCAweGFmMGExYjRjLCAweDM2MDM0YWY2LCAweDQxMDQ3YTYwLCAweGRmNjBlZmMzLCAweGE4NjdkZjU1LCAweDMxNmU4ZWVmLCAweDQ2NjliZTc5LFxuICAgIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsXG4gICAgMHhjNWJhM2JiZSwgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCxcbiAgICAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLCAweDcyMDc2Nzg1LCAweDA1MDA1NzEzLFxuICAgIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsXG4gICAgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MiwgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSwgMHgxOGI3NDc3NyxcbiAgICAweDg4MDg1YWU2LCAweGZmMGY2YTcwLCAweDY2MDYzYmNhLCAweDExMDEwYjVjLCAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LFxuICAgIDB4YTAwYWUyNzgsIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsXG4gICAgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NiwgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgICAweGJkYmRmMjFjLCAweGNhYmFjMjhhLCAweDUzYjM5MzMwLCAweDI0YjRhM2E2LCAweGJhZDAzNjA1LCAweGNkZDcwNjkzLCAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLFxuICAgIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGQsXG5dKTtcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBDUkMzMiBvZiBhIFVpbnQ4QXJyYXkuXG4gKiBAcGFyYW0gYnVmIFRoZSBVaW50OEFycmF5IHRvIGNhbGN1bGF0ZSB0aGUgQ1JDMzIgb2YuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcmMzMihidWYpIHtcbiAgICBsZXQgY3JjID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYnl0ZSA9IGJ1ZltpXTtcbiAgICAgICAgY29uc3QgdCA9IChieXRlIF4gY3JjKSAmIDB4ZmY7XG4gICAgICAgIGNyYyA9IGxvb2tVcFRhYmxlW3RdIF4gKGNyYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiAoY3JjIF4gLTEpID4+PiAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q3JjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../packages/sdk-js/node_modules/@dfinity/principal/lib/esm/utils/getCrc.js\n");

/***/ })

};
;