"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/../../packages/sdk-js/dist/index.js":
/*!*******************************************!*\
  !*** ../../packages/sdk-js/dist/index.js ***!
  \*******************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnchorStatus: function() { return /* binding */ getAnchorStatus; },\n/* harmony export */   getDualLockStatus: function() { return /* binding */ getDualLockStatus; },\n/* harmony export */   getEVMTransactionStatus: function() { return /* binding */ getEVMTransactionStatus; },\n/* harmony export */   getOrdinalPresence: function() { return /* binding */ getOrdinalPresence; },\n/* harmony export */   submitForAnchoring: function() { return /* binding */ submitForAnchoring; }\n/* harmony export */ });\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dfinity/agent */ \"(app-pages-browser)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/agent/http/index.js\");\n/* harmony import */ var _dfinity_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @dfinity/agent */ \"(app-pages-browser)/../../packages/sdk-js/node_modules/@dfinity/agent/lib/esm/actor.js\");\n// @iqube/sdk-js - SDK for interacting with iQube services\n\nconst CANISTER_CONFIG = {\n    proof_of_state: {\n        canisterId: \"umunu-kh777-77774-qaaca-cai\",\n        host: \"http://127.0.0.1:4943\"\n    },\n    btc_signer_psbt: {\n        canisterId: \"uxrrr-q7777-77774-qaaaq-cai\",\n        host: \"http://127.0.0.1:4943\"\n    },\n    cross_chain_service: {\n        canisterId: \"u6s2n-gx777-77774-qaaba-cai\",\n        host: \"http://127.0.0.1:4943\"\n    },\n    evm_rpc: {\n        canisterId: \"uzt4z-lp777-77774-qaabq-cai\",\n        host: \"http://127.0.0.1:4943\"\n    }\n};\n// Candid interface definitions\nconst proofOfStateIDL = (param)=>{\n    let { IDL } = param;\n    const Receipt = IDL.Record({\n        \"id\": IDL.Text,\n        \"data_hash\": IDL.Text,\n        \"timestamp\": IDL.Nat64,\n        \"merkle_proof\": IDL.Vec(IDL.Text)\n    });\n    const MerkleBatch = IDL.Record({\n        \"root\": IDL.Text,\n        \"receipts\": IDL.Vec(Receipt),\n        \"created_at\": IDL.Nat64,\n        \"btc_anchor_txid\": IDL.Opt(IDL.Text),\n        \"btc_block_height\": IDL.Opt(IDL.Nat64)\n    });\n    return IDL.Service({\n        \"issue_receipt\": IDL.Func([\n            IDL.Text\n        ], [\n            IDL.Text\n        ], []),\n        \"batch\": IDL.Func([], [\n            IDL.Text\n        ], []),\n        \"anchor\": IDL.Func([], [\n            IDL.Text\n        ], []),\n        \"get_receipt\": IDL.Func([\n            IDL.Text\n        ], [\n            IDL.Opt(Receipt)\n        ], [\n            \"query\"\n        ]),\n        \"get_batches\": IDL.Func([], [\n            IDL.Vec(MerkleBatch)\n        ], [\n            \"query\"\n        ]),\n        \"get_pending_count\": IDL.Func([], [\n            IDL.Nat64\n        ], [\n            \"query\"\n        ])\n    });\n};\nconst crossChainServiceIDL = (param)=>{\n    let { IDL } = param;\n    const DVNMessage = IDL.Record({\n        \"id\": IDL.Text,\n        \"source_chain\": IDL.Text,\n        \"destination_chain\": IDL.Text,\n        \"payload\": IDL.Text,\n        \"created_at\": IDL.Nat64\n    });\n    return IDL.Service({\n        \"get_pending_messages\": IDL.Func([], [\n            IDL.Vec(DVNMessage)\n        ], [\n            \"query\"\n        ]),\n        \"get_ready_messages\": IDL.Func([], [\n            IDL.Vec(DVNMessage)\n        ], [\n            \"query\"\n        ])\n    });\n};\n// Create agent and actors for live canister calls\nlet agent = null;\nlet proofOfStateActor = null;\nlet crossChainServiceActor = null;\nasync function getAgent() {\n    if (!agent) {\n        agent = new _dfinity_agent__WEBPACK_IMPORTED_MODULE_0__.HttpAgent({\n            host: \"http://127.0.0.1:4943\"\n        });\n        // Fetch root key for local development\n        await agent.fetchRootKey();\n    }\n    return agent;\n}\nasync function getProofOfStateActor() {\n    if (!proofOfStateActor) {\n        const agentInstance = await getAgent();\n        proofOfStateActor = _dfinity_agent__WEBPACK_IMPORTED_MODULE_1__.Actor.createActor(proofOfStateIDL, {\n            agent: agentInstance,\n            canisterId: CANISTER_CONFIG.proof_of_state.canisterId\n        });\n    }\n    return proofOfStateActor;\n}\nasync function getCrossChainServiceActor() {\n    if (!crossChainServiceActor) {\n        const agentInstance = await getAgent();\n        crossChainServiceActor = _dfinity_agent__WEBPACK_IMPORTED_MODULE_1__.Actor.createActor(crossChainServiceIDL, {\n            agent: agentInstance,\n            canisterId: CANISTER_CONFIG.cross_chain_service.canisterId\n        });\n    }\n    return crossChainServiceActor;\n}\nasync function callICPCanister(canister, method) {\n    let args = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    try {\n        if (canister === \"proof_of_state\") {\n            const actor = await getProofOfStateActor();\n            return await actor[method](...args);\n        } else if (canister === \"cross_chain_service\") {\n            const actor = await getCrossChainServiceActor();\n            return await actor[method](...args);\n        }\n        // Fallback for other canisters\n        return null;\n    } catch (error) {\n        console.warn(\"ICP canister call failed, falling back to mock data:\", error);\n        return null;\n    }\n}\nasync function getAnchorStatus(iQubeId) {\n    try {\n        // Get latest batch info directly - this is more reliable than individual receipts\n        const batches = await callICPCanister(\"proof_of_state\", \"get_batches\", []);\n        if (batches && batches.length > 0) {\n            const latestBatch = batches[batches.length - 1];\n            if (latestBatch.btc_anchor_txid) {\n                return {\n                    btcTxHash: latestBatch.btc_anchor_txid,\n                    confirmations: 6,\n                    blockHeight: Number(latestBatch.btc_block_height) || 800000,\n                    isConfirmed: true\n                };\n            } else {\n                // Batch exists but no BTC anchor yet\n                return {\n                    btcTxHash: \"pending_anchor_\".concat(latestBatch.root.slice(0, 12)),\n                    confirmations: 0,\n                    blockHeight: 0,\n                    isConfirmed: false\n                };\n            }\n        }\n    } catch (error) {\n        console.warn(\"Failed to get real anchor status, using fallback:\", error);\n    }\n    // Fallback to mock data only if canister call completely fails\n    return {\n        btcTxHash: \"mock_btc_txid_\" + iQubeId.slice(-8),\n        confirmations: 6,\n        blockHeight: 850000,\n        isConfirmed: true\n    };\n}\nasync function getDualLockStatus(iQubeId) {\n    try {\n        // Try to get real dual lock status from cross_chain_service canister\n        const pendingMessages = await callICPCanister(\"cross_chain_service\", \"get_pending_messages\", []);\n        if (pendingMessages && pendingMessages.length > 0) {\n            var _message_id;\n            const message = pendingMessages[0];\n            return {\n                evmTxHash: \"pending_evm_tx_\" + ((_message_id = message.id) === null || _message_id === void 0 ? void 0 : _message_id.slice(-8)) || 0,\n                icpReceiptId: message.id || \"\",\n                isLocked: false,\n                unlockHeight: 851000\n            };\n        }\n        // Also try to get ready messages (messages with enough attestations)\n        const readyMessages = await callICPCanister(\"cross_chain_service\", \"get_ready_messages\", []);\n        if (readyMessages && readyMessages.length > 0) {\n            var _latestMessage_id;\n            const latestMessage = readyMessages[readyMessages.length - 1];\n            return {\n                evmTxHash: \"cross_chain_tx_\" + ((_latestMessage_id = latestMessage.id) === null || _latestMessage_id === void 0 ? void 0 : _latestMessage_id.slice(-8)) || 0,\n                icpReceiptId: latestMessage.id || \"\",\n                isLocked: true,\n                unlockHeight: 851000\n            };\n        }\n    } catch (error) {\n        console.warn(\"Failed to get real dual lock status:\", error);\n    }\n    // Fallback to mock data\n    return {\n        evmTxHash: \"mock_evm_tx_hash_\" + iQubeId.slice(-8),\n        icpReceiptId: \"mock_icp_receipt_\" + iQubeId.slice(-8),\n        isLocked: true,\n        unlockHeight: 851000\n    };\n}\n// New function to submit data for anchoring\nasync function submitForAnchoring(data, metadata) {\n    try {\n        // Use the correct method name from our canister\n        const receiptId = await callICPCanister(\"proof_of_state\", \"issue_receipt\", [\n            data\n        ]);\n        if (receiptId) {\n            // Also trigger batching and anchoring\n            const batchRoot = await callICPCanister(\"proof_of_state\", \"batch\", []);\n            if (batchRoot) {\n                // Trigger anchoring\n                await callICPCanister(\"proof_of_state\", \"anchor\", []);\n            }\n            return {\n                receiptId: receiptId,\n                batchId: batchRoot || undefined\n            };\n        }\n    } catch (error) {\n        console.warn(\"Failed to submit for anchoring:\", error);\n    }\n    // Fallback to mock\n    return {\n        receiptId: \"mock_receipt_\" + Date.now(),\n        batchId: \"mock_batch_\" + Date.now()\n    };\n}\n// New function to check EVM transaction status\nasync function getEVMTransactionStatus(chainId, txHash) {\n    try {\n        const result = await callICPCanister(\"evm_rpc\", \"get_transaction_receipt\", [\n            chainId,\n            txHash\n        ]);\n        if (result && result.Ok) {\n            const receipt = result.Ok;\n            return {\n                confirmed: receipt.status,\n                blockNumber: receipt.block_number,\n                gasUsed: receipt.gas_used\n            };\n        }\n    } catch (error) {\n        console.warn(\"Failed to get EVM transaction status:\", error);\n    }\n    // Fallback to mock\n    return {\n        confirmed: true,\n        blockNumber: 18500000,\n        gasUsed: 21000\n    };\n}\nasync function getOrdinalPresence(iqubeId) {\n    // TODO: query ordinal adapter\n    return false;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../packages/sdk-js/dist/index.js\n"));

/***/ })

});