name: ICP Canisters CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-canisters:
    name: Build Rust canisters (no replica)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust 1.89.0
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89.0
          components: clippy,rustfmt

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            canisters/**

      - name: Build Rust canisters
        env:
          RUSTFLAGS: "-C target-feature=+atomics,+bulk-memory,+mutable-globals"
        run: |
          set -e
          # Build each canister crate (remove --locked due to Cargo.lock updates)
          cargo build --target wasm32-unknown-unknown --release -p proof_of_state
          cargo build --target wasm32-unknown-unknown --release -p btc_signer_psbt
          cargo build --target wasm32-unknown-unknown --release -p cross_chain_service
          cargo build --target wasm32-unknown-unknown --release -p evm_rpc

  web-and-sdk:
    name: Lint and build web + SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (root)
        run: npm ci

      - name: Build SDK packages
        run: |
          npm run -w packages/indexers build || true
          npm run -w packages/sdk-js build || true

      - name: Lint
        run: npm run lint || true

      - name: Build Next.js apps (Ops Console + 21 Sats Market)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || '' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || '' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || '' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || '' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
        run: |
          npm run -w apps/ops-console build || true
          npm run -w apps/21sats-market build || true

  e2e-anchor:
    name: "E2E Anchor Flow (dfx local)"
    runs-on: ubuntu-latest
    needs: build-canisters
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with wasm32 target
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.89.0
          target: wasm32-unknown-unknown
          
      - name: Install dfx 0.29.1
        run: |
          wget https://github.com/dfinity/sdk/releases/download/0.29.1/dfx-0.29.1-x86_64-linux.tar.gz
          tar -xzf dfx-0.29.1-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/
          dfx --version
          
      - name: Start replica
        run: |
          dfx start --background --clean
          sleep 5
          
      - name: Update Cargo.lock
        run: cargo update
        
      - name: Deploy proof_of_state and run anchor flow
        run: |
          # Deploy only proof_of_state canister for anchor flow test
          dfx deploy proof_of_state
          
          # Test the anchor flow: issue_receipt -> batch -> anchor -> get_batches
          {
            echo "-- get_pending_count --"
            dfx canister call proof_of_state get_pending_count
            
            echo "-- issue_receipt --"
            RECEIPT_ID=$(dfx canister call proof_of_state issue_receipt '("deadbeefdeadbeefdeadbeefdeadbeef")' | grep -o '"[^"]*"' | tr -d '"')
            echo $RECEIPT_ID
            
            echo "-- batch --"
            BATCH_ROOT=$(dfx canister call proof_of_state batch | grep -o '"[^"]*"' | tr -d '"')
            echo $BATCH_ROOT
            
            echo "-- anchor --"
            dfx canister call proof_of_state anchor
            
            echo "-- get_batches --"
            dfx canister call proof_of_state get_batches
          } | tee anchor_flow.log
        
      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: e2e-anchor-logs
          path: anchor_flow.log
          if-no-files-found: warn
          
      - name: Stop replica
        run: dfx stop

  e2e-cross-chain:
    name: "E2E Cross-Chain DVN (dfx local)"
    runs-on: ubuntu-latest
    needs: build-canisters
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust with wasm32 target
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.89.0
          target: wasm32-unknown-unknown
          
      - name: Install dfx 0.29.1
        run: |
          wget https://github.com/dfinity/sdk/releases/download/0.29.1/dfx-0.29.1-x86_64-linux.tar.gz
          tar -xzf dfx-0.29.1-x86_64-linux.tar.gz
          sudo mv dfx /usr/local/bin/
          dfx --version
          
      - name: Start replica
        run: |
          dfx start --background --clean
          sleep 5
          
      - name: Update Cargo.lock
        run: cargo update
        
      - name: Deploy cross-chain service and run DVN flow
        run: |
          # Deploy cross-chain service canister
          dfx deploy cross_chain_service
          
          # Test LayerZero DVN message verification E2E flow
          {
            echo "=== Cross-Chain DVN Message Verification E2E Test ==="
            
            echo "-- get_pending_messages (should be empty) --"
            dfx canister call cross_chain_service get_pending_messages
            
            echo "-- submit_dvn_message --"
            MESSAGE_ID=$(dfx canister call cross_chain_service submit_dvn_message '(
              1 : nat32,
              137 : nat32,
              vec {1; 2; 3; 4},
              "0x1234567890abcdef1234567890abcdef12345678"
            )' | grep -o '"[^"]*"' | tr -d '"')
            echo "Submitted message: $MESSAGE_ID"
            
            echo "-- get_dvn_message --"
            dfx canister call cross_chain_service get_dvn_message "(\"$MESSAGE_ID\")"
            
            echo "-- submit_attestation (DVN 1) --"
            dfx canister call cross_chain_service submit_attestation "(
              \"$MESSAGE_ID\",
              "dvn_validator_1",
              vec {0xde; 0xad; 0xbe; 0xef}
            )'
            
            echo "-- get_message_attestations (1 attestation) --"
            dfx canister call cross_chain_service get_message_attestations "(\"$MESSAGE_ID\")"
            
            echo "-- submit_attestation (DVN 2) --"
            dfx canister call cross_chain_service submit_attestation "(
              \"$MESSAGE_ID\", 
              \"dvn_validator_2\",
              vec {0xca; 0xfe; 0xba; 0xbe}
            )"
            
            echo "-- get_message_attestations (2 attestations - ready for execution) --"
            dfx canister call cross_chain_service get_message_attestations "(\"$MESSAGE_ID\")"
            
            echo "-- monitor_evm_transaction --"
            dfx canister call cross_chain_service monitor_evm_transaction '(
              1 : nat32,
              "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
              "https://eth-mainnet.g.alchemy.com/v2/demo"
            )'
            
            echo "-- verify_layerzero_message (mock DVN endpoint) --"
            dfx canister call cross_chain_service verify_layerzero_message '(
              137 : nat32,
              "0x1234567890abcdef1234567890abcdef12345678",
              "https://api.layerzero.network/v1/dvn"
            )'
            
            echo "-- get_pending_messages (should show our message) --"
            dfx canister call cross_chain_service get_pending_messages
            
            echo "=== Cross-Chain DVN E2E Test Complete ==="
          } | tee cross_chain_flow.log
        
      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: e2e-cross-chain-logs
          path: cross_chain_flow.log
          if-no-files-found: warn
          
      - name: Stop replica
        run: dfx stop
