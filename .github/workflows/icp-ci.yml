name: ICP Canisters CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-canisters:
    name: Build Rust canisters (no replica)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust 1.89.0
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.89.0
          components: clippy,rustfmt

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            canisters/**

      - name: Build Rust canisters
        env:
          RUSTFLAGS: "-C target-feature=+atomics,+bulk-memory,+mutable-globals"
        run: |
          set -e
          # Build each canister crate (remove --locked due to Cargo.lock updates)
          cargo build --target wasm32-unknown-unknown --release -p proof_of_state
          cargo build --target wasm32-unknown-unknown --release -p btc_signer_psbt
          cargo build --target wasm32-unknown-unknown --release -p cross_chain_service
          cargo build --target wasm32-unknown-unknown --release -p evm_rpc

  web-and-sdk:
    name: Lint and build web + SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (root)
        run: npm ci

      - name: Build SDK packages
        run: |
          npm run -w packages/indexers build || true
          npm run -w packages/sdk-js build || true

      - name: Lint
        run: npm run lint || true

      - name: Build Next.js apps (Ops Console + 21 Sats Market)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || '' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || '' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || '' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || '' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
        run: |
          npm run -w apps/ops-console build || true
          npm run -w apps/21sats-market build || true

  e2e-anchor:
    name: E2E Anchor Flow (dfx local)
    runs-on: ubuntu-latest
    needs: build-canisters
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dfx (dfxvm)
        shell: bash
        run: |
          set -e
          # Non-interactive install with yes flag
          yes | curl -fsSL https://internetcomputer.org/install.sh | bash || true
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfxvm/bin" >> $GITHUB_PATH
          source ~/.profile || true
          export PATH="$HOME/.local/share/dfx/bin:$HOME/.local/share/dfxvm/bin:$PATH"
          if command -v dfxvm >/dev/null 2>&1; then
            dfxvm install 0.29.1
          fi
          dfx --version

      - name: Start replica
        run: |
          set -e
          dfx start --background --clean
          # wait for replica
          sleep 5

      - name: Deploy proof_of_state and run anchor flow
        id: flow
        run: |
          set -e
          LOG=anchor_flow.log
          {
            echo "-- deploy --"
            dfx deploy proof_of_state
            echo "-- get_pending_count --"
            dfx canister call proof_of_state get_pending_count '()'
            echo "-- issue_receipt --"
            dfx canister call proof_of_state issue_receipt '("deadbeefdeadbeefdeadbeefdeadbeef")'
            echo "-- batch --"
            dfx canister call proof_of_state batch '()'
            echo "-- anchor --"
            dfx canister call proof_of_state anchor '()'
            echo "-- get_batches --"
            dfx canister call proof_of_state get_batches '()'
          } | tee "$LOG"
          echo "log-path=$LOG" >> $GITHUB_OUTPUT

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: e2e-anchor-logs
          path: ${{ steps.flow.outputs.log-path }}

      - name: Stop replica
        if: always()
        run: dfx stop || true
